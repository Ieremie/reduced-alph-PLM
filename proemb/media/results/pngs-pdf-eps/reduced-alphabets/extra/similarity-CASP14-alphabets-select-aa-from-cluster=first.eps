%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: similarity-CASP14-alphabets-select-aa-from-cluster=first.pdf
%%Creator: (Adobe Acrobat 23.3.0)
%%For: ioan
%%CreationDate: 30/08/2023, 14:32
%%BoundingBox: 0 0 502 302
%%HiResBoundingBox: 0 0 501.4563 301.0464
%%CropBox: 0 0 501.4563 301.0464
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 575 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.2a0d8d9, 2023/03/14-11:19:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-08-30T14:27:48+01:00"
   xmp:CreatorTool="Matplotlib v3.5.2, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -301.046 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 301.046 li
501.456 301.046 li
501.456 0 li
cp
clp
0 301.046 mo
501.456 301.046 li
501.456 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
f
21.9126 281.439 mo
22.7187 280.633 li
26.2316 284.146 li
26.8425 284.757 27.2583 285.325 27.4789 285.817 cv
27.6996 286.31 27.7335 286.853 27.5977 287.43 cv
27.4535 288.015 27.0886 288.601 26.5116 289.178 cv
25.9346 289.755 25.3746 290.128 24.823 290.289 cv
24.2715 290.467 23.7369 290.442 23.2108 290.221 cv
22.6848 290.001 22.0993 289.568 21.4544 288.923 cv
17.9415 285.41 li
18.7391 284.613 li
22.2435 288.117 li
22.7781 288.652 23.2108 288.999 23.5587 289.144 cv
23.9151 289.296 24.2715 289.313 24.6449 289.212 cv
25.0182 289.11 25.3746 288.889 25.731 288.533 cv
26.3165 287.947 26.605 287.404 26.588 286.878 cv
26.571 286.352 26.1807 285.707 25.417 284.943 cv
21.9126 281.439 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
30.1179 285.385 mo
24.0424 279.309 li
24.8655 278.486 li
32.8247 280.064 li
28.0559 275.296 li
28.8281 274.524 li
34.9036 280.599 li
34.0805 281.422 li
26.1128 279.835 li
30.89 284.613 li
30.1179 285.385 li
cp
f
36.3885 279.114 mo
30.313 273.039 li
31.1191 272.232 li
37.1946 278.308 li
36.3885 279.114 li
cp
f
38.6116 276.891 mo
32.5362 270.815 li
34.8272 268.524 li
35.226 268.126 35.5569 267.846 35.8115 267.659 cv
36.1594 267.413 36.5073 267.269 36.8467 267.201 cv
37.1861 267.133 37.5425 267.167 37.9243 267.294 cv
38.2977 267.43 38.6371 267.633 38.9341 267.93 cv
39.4602 268.457 39.7232 269.059 39.7487 269.746 cv
39.7741 270.434 39.3583 271.206 38.5013 272.063 cv
36.9485 273.616 li
39.4177 276.085 li
38.6116 276.891 li
cp
36.2357 272.903 mo
37.8055 271.333 li
38.3231 270.815 38.5947 270.357 38.6201 269.941 cv
38.6456 269.526 38.4843 269.144 38.128 268.787 cv
37.8734 268.533 37.5934 268.389 37.2794 268.329 cv
36.9655 268.287 36.677 268.338 36.4139 268.482 cv
36.2442 268.584 35.9727 268.821 35.6163 269.178 cv
34.0635 270.731 li
36.2357 272.903 li
cp
f
44.2883 271.214 mo
38.2129 265.139 li
40.9027 262.449 li
41.4458 261.906 41.9125 261.558 42.3028 261.388 cv
42.6931 261.219 43.1174 261.185 43.5586 261.286 cv
43.9998 261.388 44.3902 261.609 44.7211 261.94 cv
45.1623 262.381 45.3829 262.89 45.3914 263.459 cv
45.4084 264.036 45.1623 264.655 44.6617 265.308 cv
44.9756 265.198 45.2387 265.139 45.4508 265.13 cv
45.909 265.113 46.3927 265.156 46.9273 265.266 cv
49.6341 265.868 li
48.6243 266.878 li
46.5624 266.412 li
45.9684 266.293 45.4933 266.208 45.1454 266.165 cv
44.7975 266.123 44.5259 266.123 44.3308 266.165 cv
44.1356 266.208 43.9574 266.284 43.8047 266.369 cv
43.6944 266.445 43.5247 266.581 43.321 266.785 cv
42.3876 267.718 li
45.086 270.417 li
44.2883 271.214 li
cp
41.6918 267.022 mo
43.4228 265.291 li
43.7877 264.927 44.0423 264.604 44.1695 264.324 cv
44.2968 264.044 44.3393 263.764 44.2799 263.484 cv
44.212 263.213 44.0932 262.975 43.8895 262.771 cv
43.6095 262.491 43.2616 262.364 42.8713 262.381 cv
42.4725 262.406 42.0482 262.644 41.607 263.085 cv
39.6808 265.011 li
41.6918 267.022 li
cp
f
47.1903 262.39 mo
46.189 261.388 45.6714 260.328 45.6375 259.208 cv
45.612 258.096 46.0193 257.112 46.8764 256.255 cv
47.4364 255.695 48.0728 255.33 48.794 255.152 cv
49.5153 254.973 50.2365 254.999 50.9493 255.236 cv
51.6705 255.482 52.3324 255.907 52.9348 256.509 cv
53.5543 257.129 53.9785 257.807 54.2161 258.537 cv
54.4537 259.284 54.4707 259.997 54.2585 260.701 cv
54.0464 261.405 53.6816 262.008 53.1555 262.534 cv
52.5785 263.111 51.9336 263.484 51.2123 263.662 cv
50.4826 263.849 49.7698 263.815 49.0656 263.569 cv
48.3528 263.331 47.7334 262.933 47.1903 262.39 cv
cp
48.0388 261.575 mo
48.7686 262.305 49.5407 262.686 50.3553 262.72 cv
51.1699 262.754 51.8742 262.457 52.4682 261.863 cv
53.0706 261.261 53.3591 260.548 53.3252 259.734 cv
53.2912 258.919 52.8839 258.121 52.1033 257.341 cv
51.6111 256.849 51.0935 256.501 50.5505 256.297 cv
50.0159 256.102 49.4898 256.051 48.9637 256.17 cv
48.4376 256.289 47.971 256.552 47.5806 256.942 cv
47.0036 257.519 46.7066 258.206 46.6897 259.004 cv
46.6727 259.801 47.1224 260.659 48.0388 261.575 cv
cp
f
58.5436 256.959 mo
53.1894 251.605 li
51.1869 253.607 li
50.4656 252.886 li
55.2853 248.066 li
56.0065 248.788 li
53.9955 250.799 li
59.3497 256.153 li
58.5436 256.959 li
cp
f
65.0857 248.991 mo
65.7985 249.704 li
61.7849 253.718 li
61.5983 253.548 61.4625 253.344 61.3607 253.107 cv
61.191 252.733 61.0891 252.309 61.0382 251.817 cv
60.9958 251.333 61.0213 250.697 61.0891 249.916 cv
61.2164 248.72 61.2334 247.854 61.1485 247.294 cv
61.0637 246.751 60.8855 246.335 60.597 246.047 cv
60.3085 245.758 59.9436 245.614 59.5278 245.623 cv
59.1121 245.631 58.7387 245.801 58.3993 246.14 cv
58.0429 246.497 57.8647 246.895 57.8647 247.32 cv
57.8647 247.761 58.0514 248.168 58.4332 248.55 cv
57.5847 249.229 li
57.0671 248.609 56.8295 247.982 56.8635 247.337 cv
56.9059 246.7 57.2198 246.081 57.7968 245.504 cv
58.3738 244.927 59.0102 244.63 59.6721 244.613 cv
60.3339 244.596 60.9025 244.825 61.3776 245.3 cv
61.6237 245.546 61.8104 245.835 61.9461 246.174 cv
62.0819 246.514 62.1668 246.921 62.1922 247.405 cv
62.2262 247.897 62.2007 248.635 62.1159 249.619 cv
62.0395 250.442 62.0055 250.985 62.014 251.248 cv
62.0225 251.511 62.0565 251.749 62.1074 251.97 cv
65.0857 248.991 li
cp
f
63.6093 245.903 mo
62.8965 245.19 62.3874 244.545 62.0989 243.951 cv
61.8019 243.366 61.6831 242.806 61.734 242.279 cv
61.7849 241.753 62.0395 241.261 62.4807 240.82 cv
62.8032 240.498 63.1595 240.277 63.5414 240.167 cv
63.9147 240.065 64.3051 240.048 64.7124 240.133 cv
65.1196 240.218 65.5439 240.387 65.9936 240.65 cv
66.4349 240.922 66.9694 241.355 67.5634 241.949 cv
68.2762 242.661 68.7768 243.315 69.0738 243.9 cv
69.3708 244.486 69.4811 245.037 69.4302 245.563 cv
69.3793 246.089 69.1162 246.573 68.675 247.014 cv
68.081 247.608 67.4192 247.863 66.6725 247.778 cv
65.773 247.676 64.7548 247.048 63.6093 245.903 cv
cp
64.3729 245.139 mo
65.3742 246.14 66.1464 246.692 66.7149 246.785 cv
67.2749 246.887 67.7246 246.76 68.064 246.42 cv
68.4034 246.081 68.5307 245.631 68.4374 245.063 cv
68.3441 244.494 67.801 243.713 66.7997 242.712 cv
65.7985 241.711 65.0178 241.168 64.4493 241.075 cv
63.8893 240.99 63.4311 241.108 63.0917 241.448 cv
62.7438 241.796 62.6165 242.212 62.7013 242.704 cv
62.8201 243.332 63.3802 244.146 64.3729 245.139 cv
cp
f
71.5126 281.439 mo
72.3187 280.633 li
75.8316 284.146 li
76.4425 284.757 76.8583 285.325 77.0789 285.817 cv
77.2996 286.31 77.3335 286.853 77.1977 287.43 cv
77.0535 288.015 76.6886 288.601 76.1116 289.178 cv
75.5346 289.755 74.9746 290.128 74.423 290.289 cv
73.8715 290.467 73.3369 290.442 72.8108 290.221 cv
72.2848 290.001 71.6993 289.568 71.0544 288.923 cv
67.5415 285.41 li
68.3391 284.613 li
71.8435 288.117 li
72.3781 288.652 72.8108 288.999 73.1587 289.144 cv
73.5151 289.296 73.8715 289.313 74.2449 289.212 cv
74.6182 289.11 74.9746 288.889 75.331 288.533 cv
75.9165 287.947 76.205 287.404 76.188 286.878 cv
76.171 286.352 75.7807 285.707 75.017 284.943 cv
71.5126 281.439 li
cp
f
79.7179 285.385 mo
73.6424 279.309 li
74.4655 278.486 li
82.4247 280.064 li
77.6559 275.296 li
78.4281 274.524 li
84.5036 280.599 li
83.6805 281.422 li
75.7128 279.835 li
80.49 284.613 li
79.7179 285.385 li
cp
f
85.9885 279.114 mo
79.913 273.039 li
80.7191 272.232 li
86.7946 278.308 li
85.9885 279.114 li
cp
f
88.2116 276.891 mo
82.1362 270.815 li
84.4272 268.524 li
84.826 268.126 85.1569 267.846 85.4115 267.659 cv
85.7594 267.413 86.1073 267.269 86.4467 267.201 cv
86.7861 267.133 87.1425 267.167 87.5243 267.294 cv
87.8977 267.43 88.2371 267.633 88.5341 267.93 cv
89.0602 268.457 89.3232 269.059 89.3487 269.746 cv
89.3741 270.434 88.9583 271.206 88.1013 272.063 cv
86.5485 273.616 li
89.0177 276.085 li
88.2116 276.891 li
cp
85.8357 272.903 mo
87.4055 271.333 li
87.9231 270.815 88.1947 270.357 88.2201 269.941 cv
88.2456 269.526 88.0843 269.144 87.728 268.787 cv
87.4734 268.533 87.1934 268.389 86.8794 268.329 cv
86.5655 268.287 86.277 268.338 86.0139 268.482 cv
85.8442 268.584 85.5727 268.821 85.2163 269.178 cv
83.6635 270.731 li
85.8357 272.903 li
cp
f
93.8883 271.214 mo
87.8129 265.139 li
90.5027 262.449 li
91.0458 261.906 91.5125 261.558 91.9028 261.388 cv
92.2931 261.219 92.7174 261.185 93.1586 261.286 cv
93.5998 261.388 93.9902 261.609 94.3211 261.94 cv
94.7623 262.381 94.9829 262.89 94.9914 263.459 cv
95.0084 264.036 94.7623 264.655 94.2617 265.308 cv
94.5756 265.198 94.8387 265.139 95.0508 265.13 cv
95.509 265.113 95.9927 265.156 96.5273 265.266 cv
99.2341 265.868 li
98.2243 266.878 li
96.1624 266.412 li
95.5684 266.293 95.0932 266.208 94.7454 266.165 cv
94.3975 266.123 94.1259 266.123 93.9308 266.165 cv
93.7356 266.208 93.5574 266.284 93.4047 266.369 cv
93.2944 266.445 93.1247 266.581 92.921 266.785 cv
91.9876 267.718 li
94.686 270.417 li
93.8883 271.214 li
cp
91.2919 267.022 mo
93.0228 265.291 li
93.3877 264.927 93.6423 264.604 93.7695 264.324 cv
93.8968 264.044 93.9393 263.764 93.8799 263.484 cv
93.812 263.213 93.6932 262.975 93.4895 262.771 cv
93.2095 262.491 92.8616 262.364 92.4713 262.381 cv
92.0725 262.406 91.6482 262.644 91.207 263.085 cv
89.2808 265.011 li
91.2919 267.022 li
cp
f
96.7903 262.39 mo
95.789 261.388 95.2714 260.328 95.2375 259.208 cv
95.212 258.096 95.6193 257.112 96.4764 256.255 cv
97.0364 255.695 97.6728 255.33 98.394 255.152 cv
99.1153 254.973 99.8365 254.999 100.549 255.236 cv
101.271 255.482 101.932 255.907 102.535 256.509 cv
103.154 257.129 103.579 257.807 103.816 258.537 cv
104.054 259.284 104.071 259.997 103.859 260.701 cv
103.646 261.405 103.282 262.008 102.755 262.534 cv
102.178 263.111 101.534 263.484 100.812 263.662 cv
100.083 263.849 99.3698 263.815 98.6656 263.569 cv
97.9528 263.331 97.3334 262.933 96.7903 262.39 cv
cp
97.6388 261.575 mo
98.3686 262.305 99.1407 262.686 99.9553 262.72 cv
100.77 262.754 101.474 262.457 102.068 261.863 cv
102.671 261.261 102.959 260.548 102.925 259.734 cv
102.891 258.919 102.484 258.121 101.703 257.341 cv
101.211 256.849 100.694 256.501 100.15 256.297 cv
99.6159 256.102 99.0898 256.051 98.5637 256.17 cv
98.0376 256.289 97.571 256.552 97.1806 256.942 cv
96.6036 257.519 96.3067 258.206 96.2897 259.004 cv
96.2727 259.801 96.7224 260.659 97.6388 261.575 cv
cp
f
108.144 256.959 mo
102.789 251.605 li
100.787 253.607 li
100.066 252.886 li
104.885 248.066 li
105.607 248.788 li
103.596 250.799 li
108.95 256.153 li
108.144 256.959 li
cp
f
114.295 250.807 mo
113.549 251.554 li
108.797 246.802 li
108.78 247.158 108.721 247.574 108.602 248.032 cv
108.483 248.491 108.347 248.881 108.203 249.195 cv
107.482 248.474 li
107.702 247.863 107.83 247.26 107.864 246.666 cv
107.897 246.089 107.847 245.597 107.711 245.19 cv
108.194 244.706 li
114.295 250.807 li
cp
f
114.058 244.46 mo
113.634 244.664 113.243 244.732 112.878 244.672 cv
112.522 244.621 112.2 244.435 111.903 244.138 cv
111.461 243.696 111.249 243.179 111.266 242.551 cv
111.283 241.923 111.555 241.346 112.081 240.82 cv
112.607 240.294 113.201 240.022 113.829 240.005 cv
114.457 239.988 114.991 240.201 115.432 240.642 cv
115.721 240.93 115.891 241.253 115.95 241.601 cv
116.009 241.965 115.95 242.347 115.755 242.763 cv
116.247 242.509 116.722 242.424 117.189 242.5 cv
117.656 242.576 118.08 242.797 118.453 243.17 cv
118.979 243.696 119.225 244.316 119.208 245.029 cv
119.191 245.758 118.877 246.412 118.283 247.006 cv
117.681 247.608 117.028 247.922 116.306 247.931 cv
115.594 247.948 114.974 247.685 114.44 247.15 cv
114.049 246.76 113.812 246.335 113.744 245.86 cv
113.676 245.402 113.786 244.935 114.058 244.46 cv
cp
112.641 243.349 mo
112.929 243.637 113.26 243.781 113.625 243.773 cv
113.998 243.773 114.321 243.62 114.618 243.323 cv
114.906 243.035 115.051 242.721 115.051 242.347 cv
115.059 241.982 114.932 241.668 114.669 241.405 cv
114.397 241.134 114.066 241.007 113.693 241.007 cv
113.32 241.007 112.989 241.151 112.709 241.431 cv
112.42 241.719 112.276 242.05 112.267 242.415 cv
112.267 242.789 112.386 243.094 112.641 243.349 cv
cp
115.203 246.386 mo
115.424 246.607 115.678 246.76 115.975 246.853 cv
116.281 246.955 116.578 246.963 116.892 246.87 cv
117.197 246.785 117.46 246.624 117.689 246.395 cv
118.046 246.038 118.224 245.64 118.233 245.173 cv
118.233 244.715 118.054 244.299 117.698 243.943 cv
117.342 243.586 116.934 243.416 116.459 243.416 cv
115.984 243.416 115.56 243.603 115.203 243.96 cv
114.847 244.316 114.677 244.723 114.677 245.181 cv
114.686 245.648 114.864 246.047 115.203 246.386 cv
cp
f
136.417 278.285 mo
130.342 272.21 li
131.148 271.404 li
133.643 273.898 li
136.799 270.742 li
134.305 268.247 li
135.111 267.441 li
141.186 273.516 li
140.38 274.323 li
137.52 271.463 li
134.364 274.62 li
137.223 277.479 li
136.417 278.285 li
cp
f
140.295 270.504 mo
140.982 269.681 li
141.322 269.953 141.661 270.122 141.992 270.182 cv
142.315 270.25 142.671 270.199 143.07 270.037 cv
143.46 269.885 143.834 269.63 144.181 269.282 cv
144.487 268.977 144.708 268.671 144.852 268.34 cv
145.004 268.018 145.047 267.721 145.004 267.441 cv
144.962 267.178 144.843 266.94 144.657 266.754 cv
144.47 266.567 144.241 266.457 143.986 266.423 cv
143.74 266.397 143.443 266.457 143.087 266.609 cv
142.858 266.703 142.408 266.966 141.712 267.39 cv
141.016 267.814 140.499 268.077 140.159 268.179 cv
139.718 268.315 139.311 268.349 138.946 268.273 cv
138.581 268.196 138.259 268.009 137.97 267.721 cv
137.665 267.416 137.47 267.051 137.376 266.601 cv
137.283 266.168 137.334 265.71 137.537 265.235 cv
137.733 264.768 138.03 264.318 138.437 263.911 cv
138.887 263.461 139.362 263.139 139.845 262.944 cv
140.329 262.749 140.813 262.689 141.279 262.783 cv
141.755 262.884 142.162 263.105 142.535 263.444 cv
141.823 264.276 li
141.398 263.937 140.974 263.784 140.533 263.818 cv
140.1 263.86 139.642 264.115 139.175 264.581 cv
138.683 265.074 138.428 265.515 138.386 265.914 cv
138.344 266.312 138.445 266.635 138.7 266.889 cv
138.921 267.11 139.175 267.212 139.464 267.195 cv
139.761 267.186 140.312 266.923 141.118 266.423 cv
141.924 265.922 142.501 265.6 142.849 265.455 cv
143.367 265.277 143.834 265.218 144.249 265.294 cv
144.674 265.379 145.047 265.583 145.369 265.905 cv
145.692 266.228 145.904 266.626 146.006 267.102 cv
146.108 267.577 146.057 268.069 145.87 268.561 cv
145.675 269.062 145.361 269.528 144.928 269.961 cv
144.377 270.513 143.842 270.894 143.316 271.115 cv
142.79 271.336 142.255 271.378 141.721 271.268 cv
141.186 271.158 140.711 270.903 140.295 270.504 cv
cp
f
148.178 266.524 mo
142.103 260.449 li
144.198 258.353 li
144.665 257.886 145.055 257.564 145.361 257.36 cv
145.794 257.097 146.243 256.953 146.693 256.911 cv
147.287 256.86 147.873 256.97 148.45 257.225 cv
149.027 257.496 149.587 257.886 150.13 258.43 cv
150.596 258.896 150.944 259.363 151.199 259.821 cv
151.445 260.288 151.606 260.721 151.666 261.119 cv
151.733 261.527 151.725 261.892 151.657 262.231 cv
151.589 262.57 151.453 262.91 151.241 263.258 cv
151.021 263.614 150.732 263.97 150.367 264.335 cv
148.178 266.524 li
cp
148.271 265.006 mo
149.57 263.707 li
149.968 263.309 150.248 262.961 150.401 262.655 cv
150.545 262.358 150.622 262.061 150.622 261.79 cv
150.622 261.416 150.52 261.009 150.299 260.585 cv
150.079 260.16 149.748 259.711 149.29 259.253 cv
148.653 258.616 148.051 258.234 147.508 258.099 cv
146.965 257.963 146.481 257.988 146.065 258.166 cv
145.768 258.311 145.378 258.616 144.903 259.091 cv
143.63 260.364 li
148.271 265.006 li
cp
f
154.279 260.424 mo
148.203 254.348 li
149.417 253.135 li
155.153 256.003 li
155.696 256.274 156.086 256.478 156.341 256.614 cv
156.188 256.325 155.976 255.892 155.688 255.315 cv
152.921 249.63 li
153.999 248.553 li
160.074 254.628 li
159.302 255.4 li
154.22 250.318 li
157.537 257.165 li
156.816 257.886 li
149.892 254.475 li
155.06 259.643 li
154.279 260.424 li
cp
f
163.884 250.818 mo
163.138 251.565 li
158.386 246.813 li
158.369 247.17 158.309 247.585 158.191 248.044 cv
158.072 248.502 157.936 248.892 157.792 249.206 cv
157.071 248.485 li
157.291 247.874 157.418 247.271 157.452 246.677 cv
157.486 246.1 157.435 245.608 157.3 245.201 cv
157.783 244.717 li
163.884 250.818 li
cp
f
160.558 243.589 mo
159.837 242.868 li
163.774 238.93 li
164.359 239.516 li
164.385 240.322 164.546 241.264 164.852 242.316 cv
165.149 243.377 165.556 244.378 166.065 245.294 cv
166.421 245.956 166.888 246.61 167.457 247.246 cv
166.684 248.018 li
166.218 247.534 165.734 246.864 165.233 246.007 cv
164.733 245.15 164.334 244.242 164.045 243.275 cv
163.757 242.308 163.587 241.425 163.536 240.61 cv
160.558 243.589 li
cp
f
173.25 291.053 mo
167.174 284.977 li
168.388 283.764 li
174.124 286.632 li
174.667 286.904 175.057 287.107 175.312 287.243 cv
175.159 286.955 174.947 286.522 174.658 285.945 cv
171.892 280.26 li
172.97 279.182 li
179.045 285.257 li
178.273 286.03 li
173.19 280.947 li
176.508 287.795 li
175.787 288.516 li
168.863 285.105 li
174.03 290.272 li
173.25 291.053 li
cp
f
180.318 283.985 mo
174.242 277.909 li
175.456 276.696 li
181.192 279.564 li
181.735 279.835 182.125 280.039 182.38 280.175 cv
182.227 279.886 182.015 279.454 181.726 278.877 cv
178.96 273.191 li
180.038 272.114 li
186.113 278.189 li
185.341 278.962 li
180.258 273.879 li
183.576 280.726 li
182.855 281.448 li
175.931 278.037 li
181.098 283.204 li
180.318 283.985 li
cp
f
185.188 275.211 mo
185.876 274.388 li
186.215 274.66 186.554 274.829 186.885 274.889 cv
187.208 274.956 187.564 274.906 187.963 274.744 cv
188.353 274.592 188.727 274.337 189.075 273.989 cv
189.38 273.684 189.601 273.378 189.745 273.047 cv
189.898 272.725 189.94 272.428 189.898 272.148 cv
189.855 271.885 189.736 271.647 189.55 271.461 cv
189.363 271.274 189.134 271.164 188.879 271.13 cv
188.633 271.104 188.336 271.164 187.98 271.316 cv
187.751 271.41 187.301 271.673 186.605 272.097 cv
185.91 272.521 185.392 272.784 185.053 272.886 cv
184.611 273.022 184.204 273.056 183.839 272.979 cv
183.474 272.903 183.152 272.716 182.863 272.428 cv
182.558 272.122 182.363 271.758 182.269 271.308 cv
182.176 270.875 182.227 270.417 182.431 269.942 cv
182.626 269.475 182.923 269.025 183.33 268.618 cv
183.78 268.168 184.255 267.846 184.739 267.651 cv
185.222 267.456 185.706 267.396 186.173 267.489 cv
186.648 267.591 187.055 267.812 187.428 268.151 cv
186.716 268.983 li
186.291 268.643 185.867 268.491 185.426 268.525 cv
184.993 268.567 184.535 268.822 184.068 269.288 cv
183.576 269.78 183.322 270.222 183.279 270.621 cv
183.237 271.019 183.338 271.342 183.593 271.596 cv
183.814 271.817 184.068 271.919 184.357 271.902 cv
184.654 271.893 185.205 271.63 186.011 271.13 cv
186.817 270.629 187.394 270.307 187.742 270.162 cv
188.26 269.984 188.727 269.925 189.142 270.001 cv
189.567 270.086 189.94 270.29 190.262 270.612 cv
190.585 270.934 190.797 271.333 190.899 271.808 cv
191.001 272.284 190.95 272.776 190.763 273.268 cv
190.568 273.769 190.254 274.235 189.821 274.668 cv
189.27 275.22 188.735 275.601 188.209 275.822 cv
187.683 276.043 187.148 276.085 186.614 275.975 cv
186.079 275.864 185.604 275.61 185.188 275.211 cv
cp
f
193.088 271.214 mo
187.013 265.139 li
191.408 260.744 li
192.129 261.465 li
188.54 265.054 li
190.398 266.912 li
193.758 263.552 li
194.471 264.265 li
191.111 267.625 li
193.181 269.696 li
196.907 265.971 li
197.619 266.683 li
193.088 271.214 li
cp
f
202.685 260.311 mo
203.321 260.2 203.848 260.048 204.28 259.853 cv
204.594 260.642 li
203.992 260.922 203.313 261.108 202.558 261.202 cv
202.346 261.906 201.972 262.517 201.429 263.06 cv
200.878 263.612 200.25 263.985 199.537 264.172 cv
198.824 264.358 198.103 264.333 197.39 264.095 cv
196.677 263.858 196.016 263.433 195.405 262.822 cv
194.811 262.228 194.378 261.558 194.132 260.82 cv
193.877 260.09 193.852 259.369 194.047 258.665 cv
194.242 257.96 194.607 257.324 195.167 256.764 cv
195.727 256.204 196.364 255.839 197.085 255.661 cv
197.806 255.483 198.527 255.508 199.24 255.746 cv
199.953 255.983 200.615 256.408 201.217 257.01 cv
201.718 257.511 202.091 258.037 202.337 258.588 cv
202.583 259.14 202.702 259.717 202.685 260.311 cv
cp
199.885 261.057 mo
200.479 260.735 201.056 260.548 201.616 260.497 cv
201.658 259.59 201.251 258.707 200.386 257.842 cv
199.893 257.349 199.384 257.01 198.841 256.806 cv
198.307 256.611 197.781 256.56 197.254 256.679 cv
196.728 256.798 196.262 257.061 195.863 257.46 cv
195.26 258.062 194.972 258.775 194.989 259.573 cv
195.006 260.37 195.422 261.176 196.236 261.991 cv
197.034 262.788 197.831 263.196 198.646 263.23 cv
199.461 263.264 200.156 262.975 200.767 262.364 cv
201.056 262.076 201.276 261.753 201.421 261.388 cv
201.005 261.482 200.623 261.626 200.275 261.838 cv
199.885 261.057 li
cp
f
203.109 257.29 mo
203.797 256.467 li
204.136 256.738 204.475 256.908 204.806 256.968 cv
205.129 257.035 205.485 256.985 205.884 256.823 cv
206.274 256.671 206.648 256.416 206.996 256.068 cv
207.301 255.763 207.522 255.457 207.666 255.126 cv
207.819 254.804 207.861 254.507 207.819 254.227 cv
207.776 253.964 207.657 253.726 207.471 253.539 cv
207.284 253.353 207.055 253.243 206.8 253.209 cv
206.554 253.183 206.257 253.243 205.901 253.395 cv
205.672 253.489 205.222 253.752 204.526 254.176 cv
203.831 254.6 203.313 254.863 202.974 254.965 cv
202.532 255.101 202.125 255.135 201.76 255.058 cv
201.395 254.982 201.073 254.795 200.784 254.507 cv
200.479 254.201 200.284 253.836 200.19 253.387 cv
200.097 252.954 200.148 252.496 200.352 252.021 cv
200.547 251.554 200.844 251.104 201.251 250.697 cv
201.701 250.247 202.176 249.925 202.66 249.73 cv
203.143 249.534 203.627 249.475 204.094 249.568 cv
204.569 249.67 204.976 249.891 205.349 250.23 cv
204.637 251.062 li
204.212 250.722 203.788 250.57 203.347 250.604 cv
202.914 250.646 202.456 250.901 201.989 251.367 cv
201.497 251.859 201.243 252.301 201.2 252.699 cv
201.158 253.098 201.26 253.421 201.514 253.675 cv
201.735 253.896 201.989 253.998 202.278 253.981 cv
202.575 253.972 203.126 253.709 203.932 253.209 cv
204.738 252.708 205.315 252.386 205.663 252.241 cv
206.181 252.063 206.648 252.004 207.063 252.08 cv
207.488 252.165 207.861 252.369 208.184 252.691 cv
208.506 253.013 208.718 253.412 208.82 253.887 cv
208.922 254.363 208.871 254.855 208.684 255.347 cv
208.489 255.847 208.175 256.314 207.742 256.747 cv
207.191 257.298 206.656 257.68 206.13 257.901 cv
205.604 258.122 205.069 258.164 204.535 258.054 cv
204 257.943 203.525 257.689 203.109 257.29 cv
cp
f
213.504 250.799 mo
212.757 251.545 li
208.005 246.794 li
207.988 247.15 207.929 247.566 207.81 248.024 cv
207.691 248.482 207.556 248.873 207.411 249.187 cv
206.69 248.465 li
206.911 247.854 207.038 247.252 207.072 246.658 cv
207.106 246.081 207.055 245.589 206.919 245.181 cv
207.403 244.698 li
213.504 250.799 li
cp
f
213.809 247.286 mo
214.454 246.437 li
214.963 246.777 215.413 246.938 215.803 246.921 cv
216.194 246.904 216.542 246.743 216.839 246.446 cv
217.186 246.098 217.365 245.682 217.356 245.198 cv
217.356 244.723 217.178 244.291 216.822 243.934 cv
216.482 243.595 216.075 243.425 215.634 243.425 cv
215.192 243.425 214.785 243.595 214.446 243.934 cv
214.301 244.078 214.157 244.291 214.004 244.545 cv
213.436 243.807 li
213.563 243.697 li
213.877 243.383 214.089 243.018 214.174 242.593 cv
214.259 242.169 214.132 241.787 213.784 241.439 cv
213.512 241.168 213.198 241.041 212.834 241.049 cv
212.469 241.058 212.138 241.202 211.849 241.49 cv
211.561 241.779 211.408 242.118 211.391 242.492 cv
211.383 242.873 211.535 243.264 211.841 243.671 cv
210.967 244.291 li
210.551 243.705 210.373 243.103 210.424 242.509 cv
210.475 241.915 210.729 241.372 211.213 240.888 cv
211.544 240.557 211.926 240.328 212.35 240.192 cv
212.766 240.065 213.173 240.048 213.563 240.133 cv
213.962 240.226 214.301 240.413 214.573 240.684 cv
214.845 240.956 215.006 241.27 215.082 241.618 cv
215.158 241.983 215.116 242.364 214.963 242.755 cv
215.405 242.483 215.854 242.39 216.312 242.441 cv
216.779 242.5 217.212 242.729 217.602 243.12 cv
218.128 243.646 218.383 244.291 218.357 245.046 cv
218.34 245.809 218.035 246.471 217.45 247.057 cv
216.906 247.6 216.312 247.888 215.642 247.914 cv
214.972 247.956 214.369 247.744 213.809 247.286 cv
cp
f
237.017 276.885 mo
229.33 272.422 li
230.153 271.599 li
235.057 274.654 li
235.583 274.976 236.084 275.307 236.567 275.638 cv
236.075 274.84 235.787 274.382 235.719 274.246 cv
232.766 268.986 li
233.733 268.018 li
237.679 270.216 li
238.655 270.767 239.529 271.336 240.301 271.904 cv
239.996 271.446 239.656 270.903 239.283 270.275 cv
236.33 265.422 li
237.144 264.607 li
241.548 272.354 li
240.776 273.126 li
234.87 269.783 li
234.37 269.503 234.073 269.325 233.971 269.257 cv
234.183 269.605 234.361 269.902 234.506 270.148 cv
237.84 276.062 li
237.017 276.885 li
cp
f
243.004 270.899 mo
239.245 262.507 li
240.11 261.641 li
248.672 265.23 li
247.764 266.138 li
245.21 265.01 li
242.673 267.547 li
243.844 270.059 li
243.004 270.899 li
cp
242.249 266.664 mo
244.311 264.603 li
241.994 263.559 li
241.29 263.245 240.721 262.965 240.297 262.727 cv
240.611 263.194 240.891 263.695 241.137 264.212 cv
242.249 266.664 li
cp
f
247.094 262.905 mo
247.781 262.082 li
248.121 262.354 248.46 262.524 248.791 262.583 cv
249.113 262.651 249.47 262.6 249.869 262.439 cv
250.259 262.286 250.632 262.031 250.98 261.684 cv
251.286 261.378 251.506 261.073 251.65 260.742 cv
251.803 260.419 251.846 260.122 251.803 259.842 cv
251.761 259.579 251.642 259.342 251.455 259.155 cv
251.269 258.968 251.04 258.858 250.785 258.824 cv
250.539 258.799 250.242 258.858 249.886 259.011 cv
249.656 259.104 249.207 259.367 248.511 259.791 cv
247.815 260.216 247.298 260.479 246.958 260.58 cv
246.517 260.716 246.11 260.75 245.745 260.674 cv
245.38 260.597 245.057 260.411 244.769 260.122 cv
244.463 259.817 244.268 259.452 244.175 259.002 cv
244.082 258.569 244.133 258.111 244.336 257.636 cv
244.531 257.169 244.828 256.72 245.236 256.312 cv
245.685 255.863 246.16 255.54 246.644 255.345 cv
247.128 255.15 247.611 255.09 248.078 255.184 cv
248.553 255.286 248.961 255.506 249.334 255.846 cv
248.621 256.677 li
248.197 256.338 247.773 256.185 247.331 256.219 cv
246.899 256.261 246.441 256.516 245.974 256.983 cv
245.482 257.475 245.227 257.916 245.185 258.315 cv
245.142 258.714 245.244 259.036 245.499 259.291 cv
245.719 259.511 245.974 259.613 246.262 259.596 cv
246.559 259.588 247.111 259.325 247.917 258.824 cv
248.723 258.323 249.3 258.001 249.648 257.857 cv
250.166 257.678 250.632 257.619 251.048 257.695 cv
251.472 257.78 251.846 257.984 252.168 258.306 cv
252.491 258.629 252.703 259.028 252.804 259.503 cv
252.906 259.978 252.855 260.47 252.669 260.962 cv
252.474 261.463 252.16 261.93 251.727 262.362 cv
251.175 262.914 250.641 263.296 250.115 263.516 cv
249.589 263.737 249.054 263.779 248.519 263.669 cv
247.985 263.559 247.51 263.304 247.094 262.905 cv
cp
f
252.754 257.246 mo
253.441 256.423 li
253.78 256.694 254.12 256.864 254.451 256.923 cv
254.773 256.991 255.13 256.94 255.528 256.779 cv
255.919 256.626 256.292 256.372 256.64 256.024 cv
256.945 255.718 257.166 255.413 257.31 255.082 cv
257.463 254.759 257.505 254.463 257.463 254.183 cv
257.421 253.919 257.302 253.682 257.115 253.495 cv
256.928 253.309 256.699 253.198 256.445 253.164 cv
256.199 253.139 255.902 253.198 255.545 253.351 cv
255.316 253.444 254.866 253.707 254.171 254.132 cv
253.475 254.556 252.957 254.819 252.618 254.921 cv
252.177 255.056 251.769 255.09 251.404 255.014 cv
251.04 254.938 250.717 254.751 250.429 254.463 cv
250.123 254.157 249.928 253.792 249.835 253.342 cv
249.741 252.91 249.792 252.452 249.996 251.976 cv
250.191 251.51 250.488 251.06 250.895 250.653 cv
251.345 250.203 251.82 249.88 252.304 249.685 cv
252.788 249.49 253.271 249.431 253.738 249.524 cv
254.213 249.626 254.62 249.847 254.994 250.186 cv
254.281 251.017 li
253.857 250.678 253.432 250.525 252.991 250.559 cv
252.558 250.602 252.1 250.856 251.634 251.323 cv
251.141 251.815 250.887 252.256 250.844 252.655 cv
250.802 253.054 250.904 253.376 251.158 253.631 cv
251.379 253.852 251.634 253.953 251.922 253.936 cv
252.219 253.928 252.771 253.665 253.577 253.164 cv
254.383 252.664 254.96 252.341 255.308 252.197 cv
255.825 252.019 256.292 251.959 256.708 252.036 cv
257.132 252.121 257.505 252.324 257.828 252.647 cv
258.15 252.969 258.362 253.368 258.464 253.843 cv
258.566 254.318 258.515 254.81 258.328 255.303 cv
258.133 255.803 257.819 256.27 257.387 256.703 cv
256.835 257.254 256.3 257.636 255.774 257.857 cv
255.248 258.077 254.714 258.12 254.179 258.009 cv
253.645 257.899 253.169 257.645 252.754 257.246 cv
cp
f
263.148 250.754 mo
262.401 251.501 li
257.65 246.749 li
257.633 247.106 257.573 247.521 257.455 247.98 cv
257.336 248.438 257.2 248.828 257.056 249.142 cv
256.334 248.421 li
256.555 247.81 256.682 247.208 256.716 246.614 cv
256.75 246.037 256.699 245.544 256.564 245.137 cv
257.047 244.653 li
263.148 250.754 li
cp
f
263.454 247.241 mo
264.099 246.393 li
264.608 246.732 265.057 246.894 265.448 246.877 cv
265.838 246.86 266.186 246.698 266.483 246.401 cv
266.831 246.054 267.009 245.638 267 245.154 cv
267 244.679 266.822 244.246 266.466 243.89 cv
266.127 243.55 265.719 243.381 265.278 243.381 cv
264.837 243.381 264.429 243.55 264.09 243.89 cv
263.946 244.034 263.802 244.246 263.649 244.501 cv
263.08 243.763 li
263.208 243.652 li
263.522 243.338 263.734 242.973 263.818 242.549 cv
263.903 242.125 263.776 241.743 263.428 241.395 cv
263.157 241.124 262.843 240.996 262.478 241.005 cv
262.113 241.013 261.782 241.158 261.494 241.446 cv
261.205 241.735 261.052 242.074 261.035 242.447 cv
261.027 242.829 261.18 243.219 261.485 243.627 cv
260.611 244.246 li
260.195 243.661 260.017 243.058 260.068 242.464 cv
260.119 241.87 260.373 241.327 260.857 240.844 cv
261.188 240.513 261.57 240.284 261.994 240.148 cv
262.41 240.021 262.817 240.004 263.208 240.088 cv
263.606 240.182 263.946 240.368 264.217 240.64 cv
264.489 240.911 264.65 241.225 264.726 241.573 cv
264.803 241.938 264.76 242.32 264.608 242.71 cv
265.049 242.439 265.499 242.345 265.957 242.396 cv
266.423 242.456 266.856 242.685 267.247 243.075 cv
267.773 243.601 268.027 244.246 268.002 245.001 cv
267.985 245.765 267.679 246.427 267.094 247.012 cv
266.551 247.555 265.957 247.844 265.286 247.869 cv
264.616 247.912 264.014 247.7 263.454 247.241 cv
cp
f
289.101 270.499 mo
289.788 269.676 li
290.127 269.947 290.467 270.117 290.798 270.176 cv
291.12 270.244 291.477 270.193 291.875 270.032 cv
292.266 269.879 292.639 269.625 292.987 269.277 cv
293.292 268.971 293.513 268.666 293.657 268.335 cv
293.81 268.012 293.852 267.715 293.81 267.435 cv
293.768 267.172 293.649 266.935 293.462 266.748 cv
293.275 266.561 293.046 266.451 292.792 266.417 cv
292.546 266.392 292.249 266.451 291.892 266.604 cv
291.663 266.697 291.214 266.96 290.518 267.385 cv
289.822 267.809 289.304 268.072 288.965 268.174 cv
288.524 268.309 288.116 268.343 287.752 268.267 cv
287.387 268.191 287.064 268.004 286.776 267.715 cv
286.47 267.41 286.275 267.045 286.182 266.595 cv
286.088 266.163 286.139 265.704 286.343 265.229 cv
286.538 264.763 286.835 264.313 287.242 263.906 cv
287.692 263.456 288.167 263.133 288.651 262.938 cv
289.135 262.743 289.618 262.684 290.085 262.777 cv
290.56 262.879 290.968 263.099 291.341 263.439 cv
290.628 264.27 li
290.204 263.931 289.78 263.778 289.338 263.812 cv
288.906 263.855 288.447 264.109 287.981 264.576 cv
287.489 265.068 287.234 265.509 287.192 265.908 cv
287.149 266.307 287.251 266.629 287.506 266.884 cv
287.726 267.104 287.981 267.206 288.269 267.189 cv
288.566 267.181 289.118 266.918 289.924 266.417 cv
290.73 265.917 291.307 265.594 291.655 265.45 cv
292.172 265.272 292.639 265.212 293.055 265.289 cv
293.479 265.373 293.852 265.577 294.175 265.9 cv
294.497 266.222 294.71 266.621 294.811 267.096 cv
294.913 267.571 294.862 268.063 294.676 268.555 cv
294.48 269.056 294.166 269.523 293.734 269.956 cv
293.182 270.507 292.648 270.889 292.122 271.11 cv
291.595 271.33 291.061 271.373 290.526 271.262 cv
289.992 271.152 289.517 270.897 289.101 270.499 cv
cp
f
296.984 266.519 mo
290.908 260.443 li
293.004 258.348 li
293.471 257.881 293.861 257.558 294.167 257.355 cv
294.599 257.092 295.049 256.948 295.499 256.905 cv
296.093 256.854 296.678 256.964 297.255 257.219 cv
297.832 257.491 298.392 257.881 298.935 258.424 cv
299.402 258.891 299.75 259.357 300.004 259.816 cv
300.25 260.282 300.412 260.715 300.471 261.114 cv
300.539 261.521 300.531 261.886 300.463 262.225 cv
300.395 262.565 300.259 262.904 300.047 263.252 cv
299.826 263.608 299.538 263.965 299.173 264.33 cv
296.984 266.519 li
cp
297.077 265 mo
298.375 263.702 li
298.774 263.303 299.054 262.955 299.207 262.65 cv
299.351 262.353 299.427 262.056 299.427 261.784 cv
299.427 261.411 299.326 261.003 299.105 260.579 cv
298.884 260.155 298.553 259.705 298.095 259.247 cv
297.459 258.611 296.856 258.229 296.313 258.093 cv
295.77 257.957 295.287 257.983 294.871 258.161 cv
294.574 258.305 294.183 258.611 293.708 259.086 cv
292.436 260.359 li
297.077 265 li
cp
f
303.085 260.418 mo
297.009 254.343 li
298.222 253.129 li
303.959 255.997 li
304.502 256.269 304.892 256.472 305.146 256.608 cv
304.994 256.32 304.782 255.887 304.493 255.31 cv
301.727 249.625 li
302.805 248.547 li
308.88 254.623 li
308.108 255.395 li
303.025 250.312 li
306.343 257.16 li
305.622 257.881 li
298.698 254.47 li
303.865 259.637 li
303.085 260.418 li
cp
f
312.69 250.813 mo
311.943 251.559 li
307.191 246.808 li
307.174 247.164 307.115 247.58 306.996 248.038 cv
306.877 248.496 306.742 248.887 306.597 249.201 cv
305.876 248.479 li
306.097 247.868 306.224 247.266 306.258 246.672 cv
306.292 246.095 306.241 245.603 306.105 245.195 cv
306.589 244.712 li
312.69 250.813 li
cp
f
317.798 244.279 mo
318.511 244.992 li
314.497 249.005 li
314.311 248.836 314.175 248.632 314.073 248.394 cv
313.903 248.021 313.801 247.597 313.75 247.105 cv
313.708 246.621 313.734 245.985 313.801 245.204 cv
313.929 244.008 313.946 243.142 313.861 242.582 cv
313.776 242.039 313.598 241.623 313.309 241.335 cv
313.021 241.046 312.656 240.902 312.24 240.91 cv
311.824 240.919 311.451 241.089 311.112 241.428 cv
310.755 241.784 310.577 242.183 310.577 242.607 cv
310.577 243.049 310.764 243.456 311.145 243.838 cv
310.297 244.517 li
309.779 243.897 309.542 243.269 309.576 242.624 cv
309.618 241.988 309.932 241.369 310.509 240.792 cv
311.086 240.215 311.722 239.918 312.384 239.901 cv
313.046 239.884 313.615 240.113 314.09 240.588 cv
314.336 240.834 314.523 241.123 314.658 241.462 cv
314.794 241.801 314.879 242.209 314.904 242.692 cv
314.938 243.184 314.913 243.923 314.828 244.907 cv
314.752 245.73 314.718 246.273 314.726 246.536 cv
314.735 246.799 314.769 247.037 314.82 247.257 cv
317.798 244.279 li
cp
f
339.504 268.83 mo
338.791 268.117 li
341.362 265.546 li
343.611 267.795 li
343.543 268.508 343.373 269.152 343.102 269.729 cv
342.83 270.306 342.482 270.807 342.041 271.248 cv
341.438 271.851 340.777 272.275 340.038 272.504 cv
339.292 272.742 338.562 272.742 337.832 272.504 cv
337.094 272.275 336.432 271.851 335.838 271.257 cv
335.244 270.663 334.811 269.992 334.557 269.229 cv
334.294 268.474 334.268 267.735 334.481 267.014 cv
334.693 266.31 335.1 265.648 335.711 265.037 cv
336.144 264.604 336.619 264.282 337.111 264.061 cv
337.612 263.849 338.078 263.773 338.537 263.824 cv
338.995 263.875 339.478 264.053 339.996 264.35 cv
339.47 265.283 li
339.071 265.071 338.715 264.935 338.401 264.893 cv
338.095 264.859 337.756 264.91 337.391 265.054 cv
337.035 265.207 336.704 265.419 336.398 265.724 cv
336.025 266.098 335.77 266.471 335.609 266.853 cv
335.456 267.243 335.388 267.6 335.405 267.939 cv
335.422 268.295 335.49 268.618 335.626 268.923 cv
335.847 269.449 336.178 269.933 336.619 270.374 cv
337.162 270.917 337.705 271.274 338.256 271.452 cv
338.808 271.63 339.351 271.63 339.886 271.452 cv
340.42 271.274 340.878 270.985 341.286 270.578 cv
341.625 270.239 341.897 269.831 342.092 269.365 cv
342.287 268.898 342.406 268.508 342.431 268.177 cv
341.294 267.04 li
339.504 268.83 li
cp
f
345.613 267.489 mo
339.538 261.414 li
341.82 259.131 li
342.279 258.673 342.72 258.368 343.119 258.206 cv
343.526 258.054 343.933 258.02 344.349 258.113 cv
344.756 258.215 345.113 258.402 345.384 258.673 cv
345.647 258.936 345.817 259.259 345.91 259.623 cv
345.995 259.997 345.97 260.396 345.825 260.811 cv
346.301 260.557 346.767 260.463 347.225 260.514 cv
347.684 260.582 348.091 260.786 348.439 261.134 cv
348.727 261.422 348.931 261.762 349.05 262.118 cv
349.177 262.483 349.211 262.822 349.177 263.128 cv
349.135 263.442 349.007 263.756 348.812 264.087 cv
348.609 264.426 348.32 264.782 347.93 265.173 cv
345.613 267.489 li
cp
342.898 263.162 mo
344.213 261.847 li
344.57 261.49 344.807 261.219 344.909 261.015 cv
345.053 260.752 345.104 260.497 345.062 260.251 cv
345.028 260.014 344.909 259.776 344.697 259.564 cv
344.493 259.36 344.264 259.233 344.018 259.174 cv
343.763 259.123 343.526 259.157 343.288 259.276 cv
343.051 259.411 342.711 259.683 342.279 260.116 cv
341.065 261.329 li
342.898 263.162 li
cp
345.707 265.97 mo
347.217 264.46 li
347.472 264.205 347.65 264.01 347.735 263.875 cv
347.879 263.662 347.981 263.459 348.032 263.255 cv
348.074 263.06 348.066 262.848 347.998 262.61 cv
347.938 262.381 347.811 262.169 347.607 261.965 cv
347.387 261.745 347.132 261.609 346.844 261.558 cv
346.555 261.507 346.275 261.55 346.004 261.685 cv
345.732 261.821 345.401 262.084 345.011 262.475 cv
343.611 263.875 li
345.707 265.97 li
cp
f
351.281 261.821 mo
345.206 255.746 li
346.419 254.532 li
352.155 257.4 li
352.699 257.672 353.089 257.875 353.343 258.011 cv
353.191 257.723 352.979 257.29 352.69 256.713 cv
349.924 251.028 li
351.001 249.95 li
357.077 256.026 li
356.305 256.798 li
351.222 251.715 li
354.54 258.563 li
353.819 259.284 li
346.895 255.873 li
352.062 261.04 li
351.281 261.821 li
cp
f
358.392 254.71 mo
352.317 248.635 li
355.006 245.945 li
355.549 245.402 356.016 245.054 356.407 244.885 cv
356.797 244.715 357.221 244.681 357.662 244.783 cv
358.104 244.885 358.494 245.105 358.825 245.436 cv
359.266 245.877 359.487 246.386 359.495 246.955 cv
359.512 247.532 359.266 248.151 358.765 248.805 cv
359.079 248.694 359.342 248.635 359.555 248.627 cv
360.013 248.61 360.496 248.652 361.031 248.762 cv
363.738 249.365 li
362.728 250.374 li
360.666 249.908 li
360.072 249.789 359.597 249.704 359.249 249.662 cv
358.901 249.619 358.63 249.619 358.434 249.662 cv
358.239 249.704 358.061 249.781 357.908 249.865 cv
357.798 249.942 357.628 250.078 357.425 250.281 cv
356.491 251.215 li
359.19 253.913 li
358.392 254.71 li
cp
355.796 250.519 mo
357.527 248.788 li
357.891 248.423 358.146 248.1 358.273 247.82 cv
358.401 247.54 358.443 247.26 358.384 246.98 cv
358.316 246.709 358.197 246.471 357.993 246.268 cv
357.713 245.988 357.365 245.86 356.975 245.877 cv
356.576 245.903 356.152 246.14 355.711 246.582 cv
353.785 248.508 li
355.796 250.519 li
cp
f
358.969 243.578 mo
358.248 242.857 li
362.185 238.919 li
362.77 239.505 li
362.796 240.311 362.957 241.253 363.263 242.305 cv
363.56 243.366 363.967 244.367 364.476 245.283 cv
364.832 245.945 365.299 246.599 365.868 247.235 cv
365.095 248.007 li
364.629 247.523 364.145 246.853 363.644 245.996 cv
363.144 245.139 362.745 244.231 362.457 243.264 cv
362.168 242.297 361.998 241.414 361.947 240.599 cv
358.969 243.578 li
cp
f
387.828 274.875 mo
380.14 270.411 li
380.963 269.588 li
385.868 272.643 li
386.394 272.965 386.895 273.296 387.378 273.627 cv
386.886 272.83 386.598 272.371 386.53 272.236 cv
383.577 266.975 li
384.544 266.007 li
388.49 268.205 li
389.466 268.757 390.34 269.325 391.112 269.894 cv
390.806 269.435 390.467 268.892 390.094 268.264 cv
387.141 263.411 li
387.955 262.596 li
392.359 270.343 li
391.587 271.116 li
385.681 267.772 li
385.181 267.492 384.884 267.314 384.782 267.246 cv
384.994 267.594 385.172 267.891 385.316 268.137 cv
388.651 274.051 li
387.828 274.875 li
cp
f
395.838 266.864 mo
388.15 262.401 li
388.974 261.578 li
393.878 264.633 li
394.404 264.955 394.905 265.286 395.388 265.617 cv
394.896 264.819 394.608 264.361 394.54 264.226 cv
391.587 258.965 li
392.554 257.997 li
396.5 260.195 li
397.476 260.747 398.35 261.315 399.122 261.884 cv
398.816 261.425 398.477 260.882 398.104 260.254 cv
395.151 255.401 li
395.965 254.586 li
400.369 262.333 li
399.597 263.105 li
393.691 259.762 li
393.191 259.482 392.894 259.304 392.792 259.236 cv
393.004 259.584 393.182 259.881 393.326 260.127 cv
396.661 266.041 li
395.838 266.864 li
cp
f
402.762 259.94 mo
396.687 253.865 li
397.9 252.652 li
403.636 255.52 li
404.179 255.791 404.569 255.995 404.824 256.131 cv
404.671 255.842 404.459 255.409 404.171 254.832 cv
401.404 249.147 li
402.482 248.07 li
408.558 254.145 li
407.785 254.917 li
402.703 249.834 li
406.02 256.682 li
405.299 257.403 li
398.375 253.992 li
403.543 259.16 li
402.762 259.94 li
cp
f
407.726 251.532 mo
408.345 250.708 li
408.829 251.158 409.245 251.387 409.567 251.404 cv
409.89 251.421 410.187 251.294 410.467 251.014 cv
410.662 250.819 410.789 250.607 410.849 250.361 cv
410.899 250.123 410.874 249.894 410.772 249.673 cv
410.67 249.47 410.45 249.181 410.093 248.825 cv
405.91 244.642 li
406.708 243.844 li
410.849 247.985 li
411.358 248.494 411.689 248.961 411.841 249.351 cv
412.003 249.75 412.019 250.157 411.901 250.564 cv
411.765 250.972 411.527 251.362 411.171 251.718 cv
410.636 252.253 410.085 252.516 409.499 252.49 cv
408.905 252.473 408.32 252.159 407.726 251.532 cv
cp
f
412.206 247.306 mo
412.927 246.466 li
413.36 246.797 413.784 246.95 414.183 246.924 cv
414.591 246.907 414.938 246.746 415.235 246.449 cv
415.592 246.093 415.761 245.651 415.745 245.125 cv
415.719 244.608 415.49 244.124 415.04 243.674 cv
414.616 243.25 414.158 243.046 413.674 243.038 cv
413.19 243.029 412.749 243.216 412.367 243.598 cv
412.13 243.835 411.969 244.115 411.884 244.421 cv
411.799 244.726 411.782 245.015 411.85 245.286 cv
411.061 245.906 li
408.524 242.198 li
411.544 239.177 li
412.257 239.89 li
409.839 242.308 li
411.137 244.268 li
411.247 243.649 411.502 243.14 411.901 242.741 cv
412.427 242.215 413.063 241.952 413.793 241.952 cv
414.531 241.96 415.184 242.24 415.761 242.817 cv
416.313 243.369 416.627 244.005 416.703 244.726 cv
416.805 245.609 416.517 246.373 415.838 247.051 cv
415.286 247.603 414.684 247.9 414.031 247.942 cv
413.369 247.993 412.766 247.781 412.206 247.306 cv
cp
f
438.704 268.83 mo
437.991 268.117 li
440.562 265.546 li
442.811 267.795 li
442.743 268.508 442.573 269.152 442.302 269.729 cv
442.03 270.306 441.682 270.807 441.241 271.248 cv
440.638 271.851 439.977 272.275 439.238 272.504 cv
438.492 272.742 437.762 272.742 437.032 272.504 cv
436.294 272.275 435.632 271.851 435.038 271.257 cv
434.444 270.663 434.011 269.992 433.757 269.229 cv
433.494 268.474 433.468 267.735 433.681 267.014 cv
433.893 266.31 434.3 265.648 434.911 265.037 cv
435.344 264.604 435.819 264.282 436.311 264.061 cv
436.812 263.849 437.278 263.773 437.737 263.824 cv
438.195 263.875 438.678 264.053 439.196 264.35 cv
438.67 265.283 li
438.271 265.071 437.915 264.935 437.601 264.893 cv
437.295 264.859 436.956 264.91 436.591 265.054 cv
436.235 265.207 435.904 265.419 435.598 265.724 cv
435.225 266.098 434.97 266.471 434.809 266.853 cv
434.656 267.243 434.588 267.6 434.605 267.939 cv
434.622 268.295 434.69 268.618 434.826 268.923 cv
435.047 269.449 435.378 269.933 435.819 270.374 cv
436.362 270.917 436.905 271.274 437.456 271.452 cv
438.008 271.63 438.551 271.63 439.086 271.452 cv
439.62 271.274 440.078 270.985 440.486 270.578 cv
440.825 270.239 441.097 269.831 441.292 269.365 cv
441.487 268.898 441.606 268.508 441.631 268.177 cv
440.494 267.04 li
438.704 268.83 li
cp
f
444.813 267.489 mo
438.738 261.414 li
441.02 259.131 li
441.479 258.673 441.92 258.368 442.319 258.206 cv
442.726 258.054 443.133 258.02 443.549 258.113 cv
443.956 258.215 444.313 258.402 444.584 258.673 cv
444.847 258.936 445.017 259.259 445.11 259.623 cv
445.195 259.997 445.17 260.396 445.025 260.811 cv
445.501 260.557 445.967 260.463 446.425 260.514 cv
446.884 260.582 447.291 260.786 447.639 261.134 cv
447.927 261.422 448.131 261.762 448.25 262.118 cv
448.377 262.483 448.411 262.822 448.377 263.128 cv
448.335 263.442 448.207 263.756 448.012 264.087 cv
447.809 264.426 447.52 264.782 447.13 265.173 cv
444.813 267.489 li
cp
442.098 263.162 mo
443.413 261.847 li
443.77 261.49 444.007 261.219 444.109 261.015 cv
444.253 260.752 444.304 260.497 444.262 260.251 cv
444.228 260.014 444.109 259.776 443.897 259.564 cv
443.693 259.36 443.464 259.233 443.218 259.174 cv
442.963 259.123 442.726 259.157 442.488 259.276 cv
442.251 259.411 441.911 259.683 441.479 260.116 cv
440.265 261.329 li
442.098 263.162 li
cp
444.907 265.97 mo
446.417 264.46 li
446.672 264.205 446.85 264.01 446.935 263.875 cv
447.079 263.662 447.181 263.459 447.232 263.255 cv
447.274 263.06 447.266 262.848 447.198 262.61 cv
447.138 262.381 447.011 262.169 446.807 261.965 cv
446.587 261.745 446.332 261.609 446.044 261.558 cv
445.755 261.507 445.475 261.55 445.204 261.685 cv
444.932 261.821 444.601 262.084 444.211 262.475 cv
442.811 263.875 li
444.907 265.97 li
cp
f
450.481 261.821 mo
444.406 255.746 li
445.619 254.532 li
451.355 257.4 li
451.899 257.672 452.289 257.875 452.543 258.011 cv
452.391 257.723 452.179 257.29 451.89 256.713 cv
449.124 251.028 li
450.201 249.95 li
456.277 256.026 li
455.505 256.798 li
450.422 251.715 li
453.74 258.563 li
453.019 259.284 li
446.095 255.873 li
451.262 261.04 li
450.481 261.821 li
cp
f
457.592 254.71 mo
451.517 248.635 li
454.206 245.945 li
454.749 245.402 455.216 245.054 455.607 244.885 cv
455.997 244.715 456.421 244.681 456.862 244.783 cv
457.304 244.885 457.694 245.105 458.025 245.436 cv
458.466 245.877 458.687 246.386 458.695 246.955 cv
458.712 247.532 458.466 248.151 457.965 248.805 cv
458.279 248.694 458.542 248.635 458.755 248.627 cv
459.213 248.61 459.696 248.652 460.231 248.762 cv
462.938 249.365 li
461.928 250.374 li
459.866 249.908 li
459.272 249.789 458.797 249.704 458.449 249.662 cv
458.101 249.619 457.83 249.619 457.635 249.662 cv
457.439 249.704 457.261 249.781 457.108 249.865 cv
456.998 249.942 456.828 250.078 456.625 250.281 cv
455.691 251.215 li
458.39 253.913 li
457.592 254.71 li
cp
454.996 250.519 mo
456.727 248.788 li
457.091 248.423 457.346 248.1 457.473 247.82 cv
457.601 247.54 457.643 247.26 457.584 246.98 cv
457.516 246.709 457.397 246.471 457.193 246.268 cv
456.913 245.988 456.565 245.86 456.175 245.877 cv
455.776 245.903 455.352 246.14 454.911 246.582 cv
452.985 248.508 li
454.996 250.519 li
cp
f
465.789 246.514 mo
464.338 245.063 li
461.707 247.693 li
461.02 247.006 li
459.849 240.302 li
460.46 239.692 li
464.397 243.629 li
465.22 242.806 li
465.908 243.493 li
465.085 244.316 li
466.536 245.767 li
465.789 246.514 li
cp
463.651 244.375 mo
460.91 241.635 li
461.75 246.276 li
463.651 244.375 li
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 228.96 mo
494.256 228.96 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
29.4885 233.257 mo
28.4325 233.257 li
28.4325 226.537 li
28.1685 226.777 27.8325 227.029 27.4245 227.269 cv
27.0165 227.509 26.6445 227.689 26.3205 227.809 cv
26.3205 226.789 li
26.9085 226.513 27.4245 226.177 27.8685 225.781 cv
28.3005 225.397 28.6125 225.013 28.8045 224.629 cv
29.4885 224.629 li
29.4885 233.257 li
cp
f
32.1885 229.021 mo
32.1885 228.013 32.2845 227.197 32.5005 226.573 cv
32.7045 225.949 33.0165 225.469 33.4245 225.133 cv
33.8325 224.797 34.3605 224.629 34.9845 224.629 cv
35.4405 224.629 35.8485 224.725 36.1965 224.917 cv
36.5325 225.109 36.8205 225.373 37.0485 225.721 cv
37.2765 226.069 37.4565 226.489 37.5885 226.993 cv
37.7085 227.497 37.7805 228.181 37.7805 229.021 cv
37.7805 230.029 37.6725 230.845 37.4685 231.469 cv
37.2645 232.093 36.9525 232.561 36.5445 232.897 cv
36.1365 233.233 35.6085 233.389 34.9845 233.389 cv
34.1445 233.389 33.4965 233.101 33.0285 232.513 cv
32.4645 231.805 32.1885 230.641 32.1885 229.021 cv
cp
33.2685 229.021 mo
33.2685 230.437 33.4245 231.373 33.7605 231.841 cv
34.0845 232.309 34.4925 232.537 34.9725 232.537 cv
35.4525 232.537 35.8605 232.309 36.1965 231.841 cv
36.5325 231.373 36.7005 230.437 36.7005 229.021 cv
36.7005 227.605 36.5325 226.669 36.1965 226.201 cv
35.8605 225.745 35.4525 225.505 34.9725 225.505 cv
34.4805 225.505 34.0965 225.709 33.8085 226.117 cv
33.4485 226.645 33.2685 227.617 33.2685 229.021 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 205.274 mo
494.256 205.274 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
31.0485 208.563 mo
31.0485 209.571 li
25.3725 209.571 li
25.3605 209.319 25.4085 209.079 25.5045 208.839 cv
25.6485 208.455 25.8765 208.083 26.1885 207.699 cv
26.5005 207.327 26.9685 206.895 27.5685 206.391 cv
28.5045 205.635 29.1285 205.035 29.4645 204.579 cv
29.7885 204.135 29.9565 203.715 29.9565 203.307 cv
29.9565 202.899 29.8005 202.539 29.5005 202.251 cv
29.2005 201.963 28.8165 201.819 28.3365 201.819 cv
27.8325 201.819 27.4245 201.975 27.1245 202.275 cv
26.8125 202.587 26.6565 203.007 26.6565 203.547 cv
25.5765 203.427 li
25.6485 202.623 25.9245 202.011 26.4045 201.579 cv
26.8845 201.159 27.5445 200.943 28.3605 200.943 cv
29.1765 200.943 29.8365 201.183 30.3165 201.639 cv
30.7965 202.095 31.0365 202.659 31.0365 203.331 cv
31.0365 203.679 30.9645 204.015 30.8205 204.351 cv
30.6765 204.687 30.4485 205.035 30.1245 205.395 cv
29.8005 205.767 29.2605 206.271 28.5045 206.907 cv
27.8685 207.435 27.4605 207.795 27.2805 207.987 cv
27.1005 208.179 26.9565 208.371 26.8365 208.563 cv
31.0485 208.563 li
cp
f
32.1885 205.335 mo
32.1885 204.327 32.2845 203.511 32.5005 202.887 cv
32.7045 202.263 33.0165 201.783 33.4245 201.447 cv
33.8325 201.111 34.3605 200.943 34.9845 200.943 cv
35.4405 200.943 35.8485 201.039 36.1965 201.231 cv
36.5325 201.423 36.8205 201.687 37.0485 202.035 cv
37.2765 202.383 37.4565 202.803 37.5885 203.307 cv
37.7085 203.811 37.7805 204.495 37.7805 205.335 cv
37.7805 206.343 37.6725 207.159 37.4685 207.783 cv
37.2645 208.407 36.9525 208.875 36.5445 209.211 cv
36.1365 209.547 35.6085 209.703 34.9845 209.703 cv
34.1445 209.703 33.4965 209.415 33.0285 208.827 cv
32.4645 208.119 32.1885 206.955 32.1885 205.335 cv
cp
33.2685 205.335 mo
33.2685 206.751 33.4245 207.687 33.7605 208.155 cv
34.0845 208.623 34.4925 208.851 34.9725 208.851 cv
35.4525 208.851 35.8605 208.623 36.1965 208.155 cv
36.5325 207.687 36.7005 206.751 36.7005 205.335 cv
36.7005 203.919 36.5325 202.983 36.1965 202.515 cv
35.8605 202.059 35.4525 201.819 34.9725 201.819 cv
34.4805 201.819 34.0965 202.023 33.8085 202.431 cv
33.4485 202.959 33.2685 203.931 33.2685 205.335 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 181.589 mo
494.256 181.589 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.5165 183.618 mo
26.5725 183.474 li
26.6925 184.074 26.8965 184.506 27.1845 184.77 cv
27.4725 185.034 27.8325 185.166 28.2525 185.166 cv
28.7445 185.166 29.1645 184.998 29.5005 184.65 cv
29.8365 184.314 30.0165 183.882 30.0165 183.378 cv
30.0165 182.898 29.8485 182.49 29.5365 182.178 cv
29.2245 181.866 28.8165 181.698 28.3365 181.698 cv
28.1325 181.698 27.8805 181.746 27.5925 181.818 cv
27.7125 180.894 li
27.8805 180.906 li
28.3245 180.906 28.7325 180.798 29.0925 180.558 cv
29.4525 180.318 29.6325 179.958 29.6325 179.466 cv
29.6325 179.082 29.5005 178.77 29.2365 178.518 cv
28.9725 178.266 28.6365 178.134 28.2285 178.134 cv
27.8205 178.134 27.4725 178.266 27.1965 178.518 cv
26.9205 178.782 26.7525 179.166 26.6805 179.67 cv
25.6245 179.49 li
25.7445 178.782 26.0445 178.23 26.5005 177.846 cv
26.9565 177.462 27.5205 177.258 28.2045 177.258 cv
28.6725 177.258 29.1045 177.366 29.5005 177.57 cv
29.8845 177.774 30.1845 178.05 30.4005 178.386 cv
30.6165 178.734 30.7245 179.106 30.7245 179.49 cv
30.7245 179.874 30.6165 180.21 30.4245 180.51 cv
30.2205 180.822 29.9205 181.062 29.5365 181.23 cv
30.0405 181.35 30.4245 181.602 30.7125 181.962 cv
31.0005 182.334 31.1445 182.802 31.1445 183.354 cv
31.1445 184.098 30.8685 184.734 30.3165 185.25 cv
29.7645 185.778 29.0805 186.03 28.2525 186.03 cv
27.4845 186.03 26.8605 185.814 26.3685 185.358 cv
25.8645 184.914 25.5885 184.338 25.5165 183.618 cv
cp
f
32.1885 181.65 mo
32.1885 180.642 32.2845 179.826 32.5005 179.202 cv
32.7045 178.578 33.0165 178.098 33.4245 177.762 cv
33.8325 177.426 34.3605 177.258 34.9845 177.258 cv
35.4405 177.258 35.8485 177.354 36.1965 177.546 cv
36.5325 177.738 36.8205 178.002 37.0485 178.35 cv
37.2765 178.698 37.4565 179.118 37.5885 179.622 cv
37.7085 180.126 37.7805 180.81 37.7805 181.65 cv
37.7805 182.658 37.6725 183.474 37.4685 184.098 cv
37.2645 184.722 36.9525 185.19 36.5445 185.526 cv
36.1365 185.862 35.6085 186.018 34.9845 186.018 cv
34.1445 186.018 33.4965 185.73 33.0285 185.142 cv
32.4645 184.434 32.1885 183.27 32.1885 181.65 cv
cp
33.2685 181.65 mo
33.2685 183.066 33.4245 184.002 33.7605 184.47 cv
34.0845 184.938 34.4925 185.166 34.9725 185.166 cv
35.4525 185.166 35.8605 184.938 36.1965 184.47 cv
36.5325 184.002 36.7005 183.066 36.7005 181.65 cv
36.7005 180.234 36.5325 179.298 36.1965 178.83 cv
35.8605 178.374 35.4525 178.134 34.9725 178.134 cv
34.4805 178.134 34.0965 178.338 33.8085 178.746 cv
33.4485 179.274 33.2685 180.246 33.2685 181.65 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 157.903 mo
494.256 157.903 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
28.8885 162.2 mo
28.8885 160.148 li
25.1685 160.148 li
25.1685 159.176 li
29.0805 153.608 li
29.9445 153.608 li
29.9445 159.176 li
31.1085 159.176 li
31.1085 160.148 li
29.9445 160.148 li
29.9445 162.2 li
28.8885 162.2 li
cp
28.8885 159.176 mo
28.8885 155.3 li
26.2005 159.176 li
28.8885 159.176 li
cp
f
32.1885 157.964 mo
32.1885 156.956 32.2845 156.14 32.5005 155.516 cv
32.7045 154.892 33.0165 154.412 33.4245 154.076 cv
33.8325 153.74 34.3605 153.572 34.9845 153.572 cv
35.4405 153.572 35.8485 153.668 36.1965 153.86 cv
36.5325 154.052 36.8205 154.316 37.0485 154.664 cv
37.2765 155.012 37.4565 155.432 37.5885 155.936 cv
37.7085 156.44 37.7805 157.124 37.7805 157.964 cv
37.7805 158.972 37.6725 159.788 37.4685 160.412 cv
37.2645 161.036 36.9525 161.504 36.5445 161.84 cv
36.1365 162.176 35.6085 162.332 34.9845 162.332 cv
34.1445 162.332 33.4965 162.044 33.0285 161.456 cv
32.4645 160.748 32.1885 159.584 32.1885 157.964 cv
cp
33.2685 157.964 mo
33.2685 159.38 33.4245 160.316 33.7605 160.784 cv
34.0845 161.252 34.4925 161.48 34.9725 161.48 cv
35.4525 161.48 35.8605 161.252 36.1965 160.784 cv
36.5325 160.316 36.7005 159.38 36.7005 157.964 cv
36.7005 156.548 36.5325 155.612 36.1965 155.144 cv
35.8605 154.688 35.4525 154.448 34.9725 154.448 cv
34.4805 154.448 34.0965 154.652 33.8085 155.06 cv
33.4485 155.588 33.2685 156.56 33.2685 157.964 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 134.217 mo
494.256 134.217 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.5165 136.258 mo
26.6205 136.174 li
26.6925 136.714 26.8845 137.122 27.1845 137.386 cv
27.4845 137.662 27.8445 137.794 28.2645 137.794 cv
28.7685 137.794 29.2005 137.602 29.5605 137.218 cv
29.9085 136.834 30.0885 136.33 30.0885 135.694 cv
30.0885 135.094 29.9085 134.626 29.5725 134.278 cv
29.2365 133.93 28.7925 133.75 28.2525 133.75 cv
27.9165 133.75 27.6045 133.834 27.3285 133.99 cv
27.0525 134.146 26.8365 134.338 26.6925 134.578 cv
25.6965 134.458 li
26.5245 130.042 li
30.7965 130.042 li
30.7965 131.05 li
27.3765 131.05 li
26.9085 133.354 li
27.4245 132.994 27.9645 132.814 28.5285 132.814 cv
29.2725 132.814 29.9085 133.078 30.4245 133.594 cv
30.9405 134.122 31.2045 134.782 31.2045 135.598 cv
31.2045 136.378 30.9765 137.05 30.5205 137.614 cv
29.9685 138.31 29.2245 138.646 28.2645 138.646 cv
27.4845 138.646 26.8485 138.43 26.3565 137.998 cv
25.8525 137.566 25.5765 136.99 25.5165 136.258 cv
cp
f
32.1885 134.278 mo
32.1885 133.27 32.2845 132.454 32.5005 131.83 cv
32.7045 131.206 33.0165 130.726 33.4245 130.39 cv
33.8325 130.054 34.3605 129.886 34.9845 129.886 cv
35.4405 129.886 35.8485 129.982 36.1965 130.174 cv
36.5325 130.366 36.8205 130.63 37.0485 130.978 cv
37.2765 131.326 37.4565 131.746 37.5885 132.25 cv
37.7085 132.754 37.7805 133.438 37.7805 134.278 cv
37.7805 135.286 37.6725 136.102 37.4685 136.726 cv
37.2645 137.35 36.9525 137.818 36.5445 138.154 cv
36.1365 138.49 35.6085 138.646 34.9845 138.646 cv
34.1445 138.646 33.4965 138.358 33.0285 137.77 cv
32.4645 137.062 32.1885 135.898 32.1885 134.278 cv
cp
33.2685 134.278 mo
33.2685 135.694 33.4245 136.63 33.7605 137.098 cv
34.0845 137.566 34.4925 137.794 34.9725 137.794 cv
35.4525 137.794 35.8605 137.566 36.1965 137.098 cv
36.5325 136.63 36.7005 135.694 36.7005 134.278 cv
36.7005 132.862 36.5325 131.926 36.1965 131.458 cv
35.8605 131.002 35.4525 130.762 34.9725 130.762 cv
34.4805 130.762 34.0965 130.966 33.8085 131.374 cv
33.4485 131.902 33.2685 132.874 33.2685 134.278 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 110.532 mo
494.256 110.532 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
30.9885 108.337 mo
29.9325 108.421 li
29.8365 108.013 29.7045 107.713 29.5365 107.521 cv
29.2485 107.233 28.8885 107.077 28.4805 107.077 cv
28.1445 107.077 27.8445 107.173 27.5925 107.353 cv
27.2565 107.593 27.0045 107.953 26.8125 108.409 cv
26.6205 108.877 26.5125 109.537 26.5125 110.401 cv
26.7645 110.017 27.0765 109.741 27.4485 109.549 cv
27.8085 109.357 28.1925 109.261 28.6005 109.261 cv
29.2965 109.261 29.8965 109.525 30.3885 110.041 cv
30.8805 110.557 31.1325 111.229 31.1325 112.045 cv
31.1325 112.585 31.0125 113.089 30.7845 113.545 cv
30.5445 114.013 30.2325 114.361 29.8245 114.601 cv
29.4165 114.841 28.9605 114.961 28.4445 114.961 cv
27.5565 114.961 26.8485 114.649 26.2965 114.001 cv
25.7445 113.365 25.4685 112.297 25.4685 110.809 cv
25.4685 109.153 25.7685 107.953 26.3805 107.185 cv
26.9085 106.537 27.6285 106.201 28.5405 106.201 cv
29.2125 106.201 29.7765 106.393 30.2085 106.777 cv
30.6405 107.161 30.8925 107.677 30.9885 108.337 cv
cp
26.6805 112.045 mo
26.6805 112.405 26.7525 112.753 26.9085 113.089 cv
27.0525 113.425 27.2685 113.677 27.5565 113.845 cv
27.8325 114.025 28.1205 114.109 28.4325 114.109 cv
28.8645 114.109 29.2485 113.929 29.5725 113.569 cv
29.8845 113.209 30.0525 112.729 30.0525 112.105 cv
30.0525 111.517 29.8845 111.049 29.5725 110.701 cv
29.2605 110.365 28.8645 110.185 28.3845 110.185 cv
27.9045 110.185 27.5085 110.365 27.1725 110.701 cv
26.8365 111.049 26.6805 111.493 26.6805 112.045 cv
cp
f
32.1885 110.593 mo
32.1885 109.585 32.2845 108.769 32.5005 108.145 cv
32.7045 107.521 33.0165 107.041 33.4245 106.705 cv
33.8325 106.369 34.3605 106.201 34.9845 106.201 cv
35.4405 106.201 35.8485 106.297 36.1965 106.489 cv
36.5325 106.681 36.8205 106.945 37.0485 107.293 cv
37.2765 107.641 37.4565 108.061 37.5885 108.565 cv
37.7085 109.069 37.7805 109.753 37.7805 110.593 cv
37.7805 111.601 37.6725 112.417 37.4685 113.041 cv
37.2645 113.665 36.9525 114.133 36.5445 114.469 cv
36.1365 114.805 35.6085 114.961 34.9845 114.961 cv
34.1445 114.961 33.4965 114.673 33.0285 114.085 cv
32.4645 113.377 32.1885 112.213 32.1885 110.593 cv
cp
33.2685 110.593 mo
33.2685 112.009 33.4245 112.945 33.7605 113.413 cv
34.0845 113.881 34.4925 114.109 34.9725 114.109 cv
35.4525 114.109 35.8605 113.881 36.1965 113.413 cv
36.5325 112.945 36.7005 112.009 36.7005 110.593 cv
36.7005 109.177 36.5325 108.241 36.1965 107.773 cv
35.8605 107.317 35.4525 107.077 34.9725 107.077 cv
34.4805 107.077 34.0965 107.281 33.8085 107.689 cv
33.4485 108.217 33.2685 109.189 33.2685 110.593 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 86.8462 mo
494.256 86.8462 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.5765 83.6791 mo
25.5765 82.6591 li
31.1445 82.6591 li
31.1445 83.4871 li
30.5925 84.0751 30.0405 84.8551 29.5125 85.8151 cv
28.9725 86.7751 28.5525 87.7711 28.2645 88.7791 cv
28.0485 89.4991 27.9165 90.2911 27.8685 91.1431 cv
26.7765 91.1431 li
26.7885 90.4711 26.9205 89.6551 27.1725 88.6951 cv
27.4245 87.7351 27.7845 86.8111 28.2645 85.9231 cv
28.7445 85.0351 29.2485 84.2911 29.7885 83.6791 cv
25.5765 83.6791 li
cp
f
32.1885 86.9071 mo
32.1885 85.8991 32.2845 85.0831 32.5005 84.4591 cv
32.7045 83.8351 33.0165 83.3551 33.4245 83.0191 cv
33.8325 82.6831 34.3605 82.5151 34.9845 82.5151 cv
35.4405 82.5151 35.8485 82.6111 36.1965 82.8031 cv
36.5325 82.9951 36.8205 83.2591 37.0485 83.6071 cv
37.2765 83.9551 37.4565 84.3751 37.5885 84.8791 cv
37.7085 85.3831 37.7805 86.0671 37.7805 86.9071 cv
37.7805 87.9151 37.6725 88.7311 37.4685 89.3551 cv
37.2645 89.9791 36.9525 90.4471 36.5445 90.7831 cv
36.1365 91.1191 35.6085 91.2751 34.9845 91.2751 cv
34.1445 91.2751 33.4965 90.9871 33.0285 90.3991 cv
32.4645 89.6911 32.1885 88.5271 32.1885 86.9071 cv
cp
33.2685 86.9071 mo
33.2685 88.3231 33.4245 89.2591 33.7605 89.7271 cv
34.0845 90.1951 34.4925 90.4231 34.9725 90.4231 cv
35.4525 90.4231 35.8605 90.1951 36.1965 89.7271 cv
36.5325 89.2591 36.7005 88.3231 36.7005 86.9071 cv
36.7005 85.4911 36.5325 84.5551 36.1965 84.0871 cv
35.8605 83.6311 35.4525 83.3911 34.9725 83.3911 cv
34.4805 83.3911 34.0965 83.5951 33.8085 84.0031 cv
33.4485 84.5311 33.2685 85.5031 33.2685 86.9071 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 63.1606 mo
494.256 63.1606 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
27.1365 62.8014 mo
26.6925 62.6454 26.3685 62.4174 26.1525 62.1174 cv
25.9365 61.8294 25.8405 61.4694 25.8405 61.0494 cv
25.8405 60.4254 26.0565 59.9094 26.5125 59.4774 cv
26.9685 59.0454 27.5685 58.8294 28.3125 58.8294 cv
29.0565 58.8294 29.6685 59.0574 30.1245 59.4894 cv
30.5805 59.9214 30.8085 60.4494 30.8085 61.0734 cv
30.8085 61.4814 30.7005 61.8294 30.4965 62.1174 cv
30.2805 62.4174 29.9685 62.6454 29.5365 62.8014 cv
30.0645 62.9694 30.4605 63.2454 30.7365 63.6294 cv
31.0125 64.0134 31.1565 64.4694 31.1565 64.9974 cv
31.1565 65.7414 30.8925 66.3535 30.3765 66.8454 cv
29.8485 67.3494 29.1645 67.5895 28.3245 67.5895 cv
27.4725 67.5895 26.7885 67.3494 26.2725 66.8454 cv
25.7565 66.3535 25.5045 65.7294 25.5045 64.9734 cv
25.5045 64.4214 25.6365 63.9534 25.9245 63.5694 cv
26.2005 63.1974 26.6085 62.9454 27.1365 62.8014 cv
cp
26.9205 61.0134 mo
26.9205 61.4214 27.0525 61.7574 27.3165 62.0094 cv
27.5805 62.2734 27.9165 62.3934 28.3365 62.3934 cv
28.7445 62.3934 29.0685 62.2734 29.3325 62.0094 cv
29.5965 61.7574 29.7285 61.4454 29.7285 61.0734 cv
29.7285 60.6894 29.5845 60.3654 29.3205 60.1014 cv
29.0565 59.8374 28.7205 59.7054 28.3245 59.7054 cv
27.9165 59.7054 27.5805 59.8374 27.3165 60.0894 cv
27.0525 60.3534 26.9205 60.6534 26.9205 61.0134 cv
cp
26.5845 64.9734 mo
26.5845 65.2854 26.6565 65.5734 26.8005 65.8494 cv
26.9445 66.1374 27.1485 66.3535 27.4365 66.5094 cv
27.7125 66.6654 28.0125 66.7374 28.3365 66.7374 cv
28.8405 66.7374 29.2485 66.5814 29.5845 66.2574 cv
29.9085 65.9334 30.0765 65.5134 30.0765 65.0094 cv
30.0765 64.5054 29.9085 64.0974 29.5725 63.7614 cv
29.2365 63.4254 28.8045 63.2574 28.3005 63.2574 cv
27.7965 63.2574 27.3885 63.4254 27.0645 63.7494 cv
26.7405 64.0854 26.5845 64.4934 26.5845 64.9734 cv
cp
f
32.1885 63.2214 mo
32.1885 62.2134 32.2845 61.3974 32.5005 60.7734 cv
32.7045 60.1494 33.0165 59.6694 33.4245 59.3334 cv
33.8325 58.9974 34.3605 58.8294 34.9845 58.8294 cv
35.4405 58.8294 35.8485 58.9254 36.1965 59.1174 cv
36.5325 59.3094 36.8205 59.5734 37.0485 59.9214 cv
37.2765 60.2694 37.4565 60.6894 37.5885 61.1934 cv
37.7085 61.6974 37.7805 62.3814 37.7805 63.2214 cv
37.7805 64.2294 37.6725 65.0454 37.4685 65.6694 cv
37.2645 66.2934 36.9525 66.7614 36.5445 67.0974 cv
36.1365 67.4334 35.6085 67.5895 34.9845 67.5895 cv
34.1445 67.5895 33.4965 67.3014 33.0285 66.7134 cv
32.4645 66.0054 32.1885 64.8414 32.1885 63.2214 cv
cp
33.2685 63.2214 mo
33.2685 64.6374 33.4245 65.5734 33.7605 66.0414 cv
34.0845 66.5094 34.4925 66.7374 34.9725 66.7374 cv
35.4525 66.7374 35.8605 66.5094 36.1965 66.0414 cv
36.5325 65.5734 36.7005 64.6374 36.7005 63.2214 cv
36.7005 61.8054 36.5325 60.8694 36.1965 60.4014 cv
35.8605 59.9454 35.4525 59.7054 34.9725 59.7054 cv
34.4805 59.7054 34.0965 59.9094 33.8085 60.3174 cv
33.4485 60.8454 33.2685 61.8174 33.2685 63.2214 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 39.4749 mo
494.256 39.4749 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.6725 41.7798 mo
26.6805 41.6958 li
26.7645 42.1758 26.9325 42.5118 27.1725 42.7278 cv
27.4125 42.9438 27.7245 43.0518 28.1085 43.0518 cv
28.4205 43.0518 28.7085 42.9798 28.9485 42.8358 cv
29.1885 42.6918 29.3925 42.4878 29.5485 42.2358 cv
29.7045 41.9958 29.8365 41.6598 29.9445 41.2278 cv
30.0525 40.8078 30.1125 40.3758 30.1125 39.9438 cv
30.1125 39.8958 30.1005 39.8238 30.1005 39.7278 cv
29.8845 40.0638 29.5965 40.3398 29.2365 40.5438 cv
28.8765 40.7598 28.4805 40.8558 28.0485 40.8558 cv
27.3405 40.8558 26.7405 40.6038 26.2485 40.0878 cv
25.7565 39.5718 25.5165 38.8878 25.5165 38.0478 cv
25.5165 37.1838 25.7685 36.4758 26.2845 35.9478 cv
26.7885 35.4198 27.4365 35.1438 28.2165 35.1438 cv
28.7685 35.1438 29.2725 35.2998 29.7405 35.5998 cv
30.1965 35.8998 30.5565 36.3318 30.7965 36.8838 cv
31.0365 37.4478 31.1565 38.2518 31.1565 39.2958 cv
31.1565 40.3998 31.0365 41.2758 30.7965 41.9238 cv
30.5565 42.5718 30.2085 43.0638 29.7405 43.3998 cv
29.2605 43.7358 28.7085 43.9038 28.0845 43.9038 cv
27.4125 43.9038 26.8605 43.7238 26.4285 43.3518 cv
25.9965 42.9918 25.7445 42.4638 25.6725 41.7798 cv
cp
29.9925 37.9998 mo
29.9925 37.3998 29.8245 36.9198 29.5005 36.5598 cv
29.1765 36.1998 28.7925 36.0198 28.3365 36.0198 cv
27.8685 36.0198 27.4605 36.2118 27.1125 36.5958 cv
26.7645 36.9798 26.5965 37.4838 26.5965 38.0838 cv
26.5965 38.6358 26.7525 39.0798 27.0885 39.4158 cv
27.4125 39.7638 27.8205 39.9318 28.3125 39.9318 cv
28.7925 39.9318 29.2005 39.7638 29.5125 39.4158 cv
29.8245 39.0798 29.9925 38.5998 29.9925 37.9998 cv
cp
f
32.1885 39.5358 mo
32.1885 38.5278 32.2845 37.7118 32.5005 37.0878 cv
32.7045 36.4638 33.0165 35.9838 33.4245 35.6478 cv
33.8325 35.3118 34.3605 35.1438 34.9845 35.1438 cv
35.4405 35.1438 35.8485 35.2398 36.1965 35.4318 cv
36.5325 35.6238 36.8205 35.8878 37.0485 36.2358 cv
37.2765 36.5838 37.4565 37.0038 37.5885 37.5078 cv
37.7085 38.0118 37.7805 38.6958 37.7805 39.5358 cv
37.7805 40.5438 37.6725 41.3598 37.4685 41.9838 cv
37.2645 42.6078 36.9525 43.0758 36.5445 43.4118 cv
36.1365 43.7478 35.6085 43.9038 34.9845 43.9038 cv
34.1445 43.9038 33.4965 43.6158 33.0285 43.0278 cv
32.4645 42.3198 32.1885 41.1558 32.1885 39.5358 cv
cp
33.2685 39.5358 mo
33.2685 40.9518 33.4245 41.8878 33.7605 42.3558 cv
34.0845 42.8238 34.4925 43.0518 34.9725 43.0518 cv
35.4525 43.0518 35.8605 42.8238 36.1965 42.3558 cv
36.5325 41.8878 36.7005 40.9518 36.7005 39.5358 cv
36.7005 38.1198 36.5325 37.1838 36.1965 36.7158 cv
35.8605 36.2598 35.4525 36.0198 34.9725 36.0198 cv
34.4805 36.0198 34.0965 36.2238 33.8085 36.6318 cv
33.4485 37.1598 33.2685 38.1318 33.2685 39.5358 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8563 15.7893 mo
494.256 15.7893 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
22.8166 20.0862 mo
21.7606 20.0862 li
21.7606 13.3662 li
21.4966 13.6062 21.1606 13.8582 20.7526 14.0982 cv
20.3446 14.3382 19.9726 14.5182 19.6486 14.6382 cv
19.6486 13.6182 li
20.2366 13.3422 20.7526 13.0062 21.1966 12.6102 cv
21.6286 12.2262 21.9406 11.8422 22.1326 11.4582 cv
22.8166 11.4582 li
22.8166 20.0862 li
cp
f
25.5166 15.8502 mo
25.5166 14.8422 25.6126 14.0262 25.8286 13.4022 cv
26.0326 12.7782 26.3446 12.2982 26.7526 11.9622 cv
27.1606 11.6262 27.6886 11.4582 28.3126 11.4582 cv
28.7686 11.4582 29.1766 11.5542 29.5246 11.7462 cv
29.8606 11.9382 30.1486 12.2022 30.3766 12.5502 cv
30.6046 12.8982 30.7846 13.3182 30.9166 13.8222 cv
31.0366 14.3262 31.1086 15.0102 31.1086 15.8502 cv
31.1086 16.8582 31.0006 17.6742 30.7966 18.2982 cv
30.5926 18.9222 30.2806 19.3902 29.8726 19.7262 cv
29.4646 20.0622 28.9366 20.2182 28.3126 20.2182 cv
27.4726 20.2182 26.8246 19.9302 26.3566 19.3422 cv
25.7926 18.6342 25.5166 17.4702 25.5166 15.8502 cv
cp
26.5966 15.8502 mo
26.5966 17.2662 26.7526 18.2022 27.0886 18.6702 cv
27.4126 19.1382 27.8206 19.3662 28.3006 19.3662 cv
28.7806 19.3662 29.1886 19.1382 29.5246 18.6702 cv
29.8606 18.2022 30.0286 17.2662 30.0286 15.8502 cv
30.0286 14.4342 29.8606 13.4982 29.5246 13.0302 cv
29.1886 12.5742 28.7806 12.3342 28.3006 12.3342 cv
27.8086 12.3342 27.4246 12.5382 27.1366 12.9462 cv
26.7766 13.4742 26.5966 14.4462 26.5966 15.8502 cv
cp
f
32.1886 15.8502 mo
32.1886 14.8422 32.2846 14.0262 32.5006 13.4022 cv
32.7046 12.7782 33.0166 12.2982 33.4246 11.9622 cv
33.8326 11.6262 34.3606 11.4582 34.9846 11.4582 cv
35.4406 11.4582 35.8486 11.5542 36.1966 11.7462 cv
36.5326 11.9382 36.8206 12.2022 37.0486 12.5502 cv
37.2766 12.8982 37.4566 13.3182 37.5886 13.8222 cv
37.7086 14.3262 37.7806 15.0102 37.7806 15.8502 cv
37.7806 16.8582 37.6726 17.6742 37.4686 18.2982 cv
37.2646 18.9222 36.9526 19.3902 36.5446 19.7262 cv
36.1366 20.0622 35.6086 20.2182 34.9846 20.2182 cv
34.1446 20.2182 33.4966 19.9302 33.0286 19.3422 cv
32.4646 18.6342 32.1886 17.4702 32.1886 15.8502 cv
cp
33.2686 15.8502 mo
33.2686 17.2662 33.4246 18.2022 33.7606 18.6702 cv
34.0846 19.1382 34.4926 19.3662 34.9726 19.3662 cv
35.4526 19.3662 35.8606 19.1382 36.1966 18.6702 cv
36.5326 18.2022 36.7006 17.2662 36.7006 15.8502 cv
36.7006 14.4342 36.5326 13.4982 36.1966 13.0302 cv
35.8606 12.5742 35.4526 12.3342 34.9726 12.3342 cv
34.4806 12.3342 34.0966 12.5382 33.8086 12.9462 cv
33.4486 13.4742 33.2686 14.4462 33.2686 15.8502 cv
cp
f
14.1675 145.833 mo
14.0555 144.587 li
14.5595 144.531 14.9795 144.391 15.3015 144.167 cv
15.6235 143.957 15.8755 143.621 16.0715 143.159 cv
16.2675 142.711 16.3655 142.193 16.3655 141.619 cv
16.3655 141.115 16.2955 140.681 16.1415 140.289 cv
16.0015 139.897 15.7915 139.617 15.5255 139.421 cv
15.2735 139.239 14.9795 139.141 14.6715 139.141 cv
14.3635 139.141 14.0835 139.239 13.8455 139.421 cv
13.6215 139.603 13.4255 139.897 13.2575 140.317 cv
13.1455 140.583 12.9915 141.171 12.7675 142.095 cv
12.5435 143.019 12.3335 143.663 12.1375 144.027 cv
11.8855 144.503 11.5775 144.867 11.2135 145.105 cv
10.8495 145.343 10.4295 145.455 9.9535 145.455 cv
9.4495 145.455 8.9875 145.315 8.5395 145.021 cv
8.1055 144.741 7.7695 144.321 7.5455 143.761 cv
7.3215 143.215 7.1955 142.599 7.1955 141.927 cv
7.1955 141.185 7.3215 140.527 7.5595 139.967 cv
7.7975 139.407 8.1475 138.959 8.6095 138.651 cv
9.0855 138.343 9.6035 138.189 10.1915 138.161 cv
10.2895 139.435 li
9.6595 139.505 9.1835 139.729 8.8475 140.121 cv
8.5255 140.513 8.3575 141.101 8.3575 141.871 cv
8.3575 142.683 8.5115 143.257 8.8055 143.621 cv
9.0995 143.985 9.4495 144.167 9.8695 144.167 cv
10.2335 144.167 10.5275 144.041 10.7515 143.789 cv
10.9895 143.537 11.2275 142.865 11.4795 141.787 cv
11.7315 140.709 11.9415 139.967 12.1095 139.561 cv
12.3895 138.987 12.7255 138.553 13.1315 138.273 cv
13.5515 137.993 14.0275 137.853 14.5595 137.853 cv
15.0915 137.853 15.5955 138.007 16.0715 138.315 cv
16.5475 138.623 16.9115 139.071 17.1635 139.631 cv
17.4155 140.205 17.5415 140.849 17.5415 141.563 cv
17.5415 142.473 17.4155 143.229 17.1635 143.845 cv
16.9115 144.461 16.5055 144.937 15.9735 145.287 cv
15.4415 145.637 14.8395 145.819 14.1675 145.833 cv
cp
f
8.7775 136.201 mo
7.3635 136.201 li
7.3635 134.969 li
8.7775 134.969 li
8.7775 136.201 li
cp
17.3875 136.201 mo
10.1215 136.201 li
10.1215 134.969 li
17.3875 134.969 li
17.3875 136.201 li
cp
f
17.3875 133.093 mo
10.1215 133.093 li
10.1215 131.987 li
11.1435 131.987 li
10.7935 131.763 10.5135 131.469 10.2895 131.091 cv
10.0795 130.713 9.9675 130.279 9.9675 129.789 cv
9.9675 129.257 10.0795 128.823 10.3035 128.473 cv
10.5275 128.137 10.8495 127.885 11.2415 127.745 cv
10.4015 127.171 9.9675 126.429 9.9675 125.505 cv
9.9675 124.777 10.1775 124.231 10.5695 123.839 cv
10.9615 123.447 11.5775 123.251 12.4035 123.251 cv
17.3875 123.251 li
17.3875 124.483 li
12.8095 124.483 li
12.3335 124.483 11.9835 124.525 11.7595 124.609 cv
11.5355 124.693 11.3675 124.833 11.2275 125.043 cv
11.1015 125.253 11.0315 125.491 11.0315 125.771 cv
11.0315 126.289 11.2135 126.709 11.5495 127.045 cv
11.8855 127.381 12.4315 127.549 13.1735 127.549 cv
17.3875 127.549 li
17.3875 128.781 li
12.6695 128.781 li
12.1235 128.781 11.7175 128.893 11.4375 129.089 cv
11.1715 129.285 11.0315 129.621 11.0315 130.069 cv
11.0315 130.419 11.1295 130.741 11.3115 131.035 cv
11.4935 131.329 11.7595 131.539 12.1095 131.665 cv
12.4595 131.805 12.9635 131.861 13.6215 131.861 cv
17.3875 131.861 li
17.3875 133.093 li
cp
f
8.7775 121.431 mo
7.3635 121.431 li
7.3635 120.199 li
8.7775 120.199 li
8.7775 121.431 li
cp
17.3875 121.431 mo
10.1215 121.431 li
10.1215 120.199 li
17.3875 120.199 li
17.3875 121.431 li
cp
f
17.3875 118.351 mo
7.3635 118.351 li
7.3635 117.119 li
17.3875 117.119 li
17.3875 118.351 li
cp
f
16.4915 110.483 mo
16.8835 110.945 17.1635 111.379 17.3175 111.799 cv
17.4575 112.219 17.5415 112.681 17.5415 113.157 cv
17.5415 113.955 17.3595 114.571 16.9675 114.991 cv
16.5755 115.425 16.0855 115.635 15.4695 115.635 cv
15.1195 115.635 14.7975 115.565 14.5035 115.397 cv
14.2095 115.229 13.9715 115.019 13.7895 114.753 cv
13.6215 114.501 13.4815 114.207 13.3835 113.871 cv
13.3275 113.633 13.2715 113.269 13.2015 112.779 cv
13.0895 111.785 12.9495 111.057 12.7815 110.581 cv
12.6135 110.581 12.5155 110.581 12.4595 110.581 cv
11.9555 110.581 11.6055 110.693 11.3955 110.917 cv
11.1155 111.239 10.9755 111.715 10.9755 112.331 cv
10.9755 112.919 11.0875 113.339 11.2835 113.619 cv
11.4935 113.899 11.8575 114.095 12.3615 114.221 cv
12.1935 115.425 li
11.6895 115.313 11.2695 115.131 10.9475 114.879 cv
10.6395 114.627 10.3875 114.277 10.2195 113.801 cv
10.0515 113.325 9.9675 112.779 9.9675 112.149 cv
9.9675 111.533 10.0515 111.029 10.1915 110.637 cv
10.3315 110.245 10.5135 109.965 10.7375 109.783 cv
10.9615 109.601 11.2275 109.475 11.5635 109.405 cv
11.7875 109.363 12.1655 109.335 12.7115 109.335 cv
14.3495 109.335 li
15.4975 109.335 16.2115 109.321 16.5195 109.265 cv
16.8275 109.209 17.1075 109.111 17.3875 108.943 cv
17.3875 110.231 li
17.1355 110.371 16.8415 110.455 16.4915 110.483 cv
cp
13.7475 110.581 mo
13.9295 111.029 14.0835 111.701 14.2095 112.597 cv
14.2935 113.101 14.3775 113.465 14.4615 113.675 cv
14.5455 113.885 14.6855 114.039 14.8535 114.151 cv
15.0355 114.263 15.2315 114.319 15.4415 114.319 cv
15.7775 114.319 16.0435 114.207 16.2675 113.955 cv
16.4915 113.703 16.5895 113.339 16.5895 112.863 cv
16.5895 112.387 16.4915 111.967 16.2815 111.603 cv
16.0715 111.239 15.7915 110.959 15.4275 110.777 cv
15.1475 110.651 14.7415 110.581 14.1955 110.581 cv
13.7475 110.581 li
cp
f
17.3875 107.445 mo
10.1215 107.445 li
10.1215 106.339 li
11.2275 106.339 li
10.7235 106.059 10.3875 105.807 10.2195 105.555 cv
10.0515 105.317 9.9675 105.051 9.9675 104.771 cv
9.9675 104.351 10.1075 103.931 10.3595 103.497 cv
11.5075 103.931 li
11.3395 104.239 11.2415 104.533 11.2415 104.827 cv
11.2415 105.107 11.3255 105.345 11.4795 105.555 cv
11.6475 105.779 11.8715 105.933 12.1515 106.017 cv
12.5995 106.157 13.0755 106.213 13.5935 106.213 cv
17.3875 106.213 li
17.3875 107.445 li
cp
f
8.7775 102.769 mo
7.3635 102.769 li
7.3635 101.537 li
8.7775 101.537 li
8.7775 102.769 li
cp
17.3875 102.769 mo
10.1215 102.769 li
10.1215 101.537 li
17.3875 101.537 li
17.3875 102.769 li
cp
f
16.2815 96.9729 mo
17.3735 96.7909 li
17.4295 97.1549 17.4715 97.4629 17.4715 97.7289 cv
17.4715 98.1769 17.4015 98.5269 17.2755 98.7649 cv
17.1355 99.0169 16.9535 99.1849 16.7155 99.2829 cv
16.4915 99.3949 16.0015 99.4369 15.2595 99.4369 cv
11.0875 99.4369 li
11.0875 100.333 li
10.1215 100.333 li
10.1215 99.4369 li
8.3295 99.4369 li
7.5875 98.2189 li
10.1215 98.2189 li
10.1215 96.9729 li
11.0875 96.9729 li
11.0875 98.2189 li
15.3295 98.2189 li
15.6935 98.2189 15.9175 98.2049 16.0155 98.1489 cv
16.1135 98.1069 16.1975 98.0369 16.2535 97.9389 cv
16.3095 97.8409 16.3375 97.7009 16.3375 97.5189 cv
16.3375 97.3789 16.3235 97.1969 16.2815 96.9729 cv
cp
f
20.1735 95.8249 mo
19.0115 95.9649 li
19.0815 95.6989 19.1235 95.4609 19.1235 95.2509 cv
19.1235 94.9849 19.0675 94.7749 18.9835 94.6069 cv
18.8855 94.4389 18.7595 94.3129 18.6055 94.2009 cv
18.4795 94.1169 18.1715 93.9909 17.6815 93.8229 cv
17.6115 93.7949 17.5135 93.7669 17.3875 93.7109 cv
10.1215 96.4689 li
10.1215 95.1389 li
14.3355 93.6269 li
14.8675 93.4309 15.4275 93.2629 16.0155 93.1089 cv
15.4555 92.9689 14.8955 92.8009 14.3635 92.6049 cv
10.1215 91.0509 li
10.1215 89.8189 li
17.4995 92.5769 li
18.2835 92.8849 18.8295 93.1089 19.1375 93.2629 cv
19.5435 93.4869 19.8375 93.7389 20.0335 94.0189 cv
20.2155 94.2989 20.3135 94.6349 20.3135 95.0269 cv
20.3135 95.2789 20.2575 95.5449 20.1735 95.8249 cv
cp
f
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
52.8163 15.7893 mo
92.4962 15.7893 li
52.8163 15.7893 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.719814 .521752 .154269 .00848402 cmyk
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.8163 15.7893 mo
92.4962 15.7893 li
52.8163 15.7893 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
grestore
102.416 52.0659 mo
142.096 52.0659 li
142.096 40.3883 li
102.416 40.3883 li
102.416 52.0659 li
cp
.185275 .508537 .65127 .0171817 cmyk
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
102.416 52.0659 mo
142.096 52.0659 li
142.096 40.3883 li
102.416 40.3883 li
102.416 52.0659 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
152.016 15.7893 mo
191.696 15.7893 li
152.016 15.7893 li
cp
.66775 .185733 .711757 .0232242 cmyk
f
152.016 15.7893 mo
191.696 15.7893 li
152.016 15.7893 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
201.616 34.2662 mo
241.296 34.2662 li
241.296 26.2186 li
201.616 26.2186 li
201.616 34.2662 li
cp
.243503 .734279 .551598 .0673228 cmyk
f
201.616 34.2662 mo
241.296 34.2662 li
241.296 26.2186 li
201.616 26.2186 li
201.616 34.2662 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
251.216 84.3416 mo
290.896 84.3416 li
290.896 74.0759 li
251.216 74.0759 li
251.216 84.3416 li
cp
.526665 .539269 .101045 0 cmyk
f
251.216 84.3416 mo
290.896 84.3416 li
290.896 74.0759 li
251.216 74.0759 li
251.216 84.3416 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
300.816 27.1748 mo
340.496 27.1748 li
340.496 22.241 li
300.816 22.241 li
300.816 27.1748 li
cp
.429511 .473579 .580407 .124544 cmyk
f
300.816 27.1748 mo
340.496 27.1748 li
340.496 22.241 li
300.816 22.241 li
300.816 27.1748 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
350.416 159.304 mo
390.096 159.304 li
390.096 140.326 li
350.416 140.326 li
350.416 159.304 li
cp
.159854 .476875 .0191348 0 cmyk
f
350.416 159.304 mo
390.096 159.304 li
390.096 140.326 li
350.416 140.326 li
350.416 159.304 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
400.016 168.135 mo
439.696 168.135 li
439.696 152.071 li
400.016 152.071 li
400.016 168.135 li
cp
1 /0 /CSD get_res sepcs
.45098 sep
f
400.016 168.135 mo
439.696 168.135 li
439.696 152.071 li
400.016 152.071 li
400.016 168.135 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
gsave
47.8563 228.96 mo
494.256 228.96 li
494.256 7.20001 li
47.8563 7.20001 li
cp
clp
449.616 175.908 mo
489.296 175.908 li
489.296 156.855 li
449.616 156.855 li
449.616 175.908 li
cp
.261265 .243992 .579156 .00234989 cmyk
f
449.616 175.908 mo
489.296 175.908 li
489.296 156.855 li
449.616 156.855 li
449.616 175.908 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
grestore
1 lc
1 lj
72.6563 15.7893 mo
72.6563 15.7893 li
@
72.6563 15.7893 mo
72.6563 15.7893 li
@
62.7363 15.7893 mo
82.5763 15.7893 li
@
62.7363 15.7893 mo
82.5763 15.7893 li
@
122.256 52.0659 mo
122.256 66.1059 li
@
122.256 40.3883 mo
122.256 28.5923 li
@
112.336 66.1059 mo
132.176 66.1059 li
@
112.336 28.5923 mo
132.176 28.5923 li
@
171.856 15.7893 mo
171.856 15.7893 li
@
171.856 15.7893 mo
171.856 15.7893 li
@
161.936 15.7893 mo
181.776 15.7893 li
@
161.936 15.7893 mo
181.776 15.7893 li
@
221.456 34.2662 mo
221.456 44.9673 li
@
221.456 26.2186 mo
221.456 18.2825 li
@
211.536 44.9673 mo
231.376 44.9673 li
@
211.536 18.2825 mo
231.376 18.2825 li
@
271.056 84.3416 mo
271.056 99.0091 li
@
271.056 74.0759 mo
271.056 61.519 li
@
261.136 99.0091 mo
280.976 99.0091 li
@
261.136 61.519 mo
280.976 61.519 li
@
271.056 104.35 mo
273.178 100.815 li
271.056 97.2791 li
268.935 100.815 li
cp
f
1 lw
0 lc
0 lj
271.056 104.35 mo
273.178 100.815 li
271.056 97.2791 li
268.935 100.815 li
cp
@
1.5 lw
1 lc
1 lj
320.656 27.1748 mo
320.656 34.009 li
@
320.656 22.241 mo
320.656 18.2062 li
@
310.736 34.009 mo
330.576 34.009 li
@
310.736 18.2062 mo
330.576 18.2062 li
@
320.656 38.4122 mo
322.778 34.8766 li
320.656 31.3411 li
318.535 34.8766 li
cp
f
1 lw
0 lc
0 lj
320.656 38.4122 mo
322.778 34.8766 li
320.656 31.3411 li
318.535 34.8766 li
cp
@
320.656 40.7393 mo
322.778 37.2037 li
320.656 33.6682 li
318.535 37.2037 li
cp
f
320.656 40.7393 mo
322.778 37.2037 li
320.656 33.6682 li
318.535 37.2037 li
cp
@
1.5 lw
1 lc
1 lj
370.256 159.304 mo
370.256 172.593 li
@
370.256 140.326 mo
370.256 113.621 li
@
360.336 172.593 mo
380.176 172.593 li
@
360.336 113.621 mo
380.176 113.621 li
@
370.256 113.091 mo
372.378 109.556 li
370.256 106.02 li
368.135 109.556 li
cp
f
1 lw
0 lc
0 lj
370.256 113.091 mo
372.378 109.556 li
370.256 106.02 li
368.135 109.556 li
cp
@
1.5 lw
1 lc
1 lj
419.856 168.135 mo
419.856 177.757 li
@
419.856 152.071 mo
419.856 141.154 li
@
409.936 177.757 mo
429.776 177.757 li
@
409.936 141.154 mo
429.776 141.154 li
@
469.456 175.908 mo
469.456 187.575 li
@
469.456 156.855 mo
469.456 136.078 li
@
459.536 187.575 mo
479.376 187.575 li
@
459.536 136.078 mo
479.376 136.078 li
@
52.8163 15.7893 mo
92.4962 15.7893 li
@
102.416 45.3963 mo
142.096 45.3963 li
@
152.016 15.7893 mo
191.696 15.7893 li
@
201.616 28.8444 mo
241.296 28.8444 li
@
251.216 79.6055 mo
290.896 79.6055 li
@
300.816 23.9972 mo
340.496 23.9972 li
@
350.416 152.219 mo
390.096 152.219 li
@
400.016 156.53 mo
439.696 156.53 li
@
449.616 168.489 mo
489.296 168.489 li
@
1.25 lw
2 lc
0 lj
47.8563 228.96 mo
47.8563 7.20001 li
1 /0 /CSD get_res sepcs
.2 sep
@
494.256 228.96 mo
494.256 7.20001 li
@
47.8563 228.96 mo
494.256 228.96 li
@
47.8563 7.20001 mo
494.256 7.20001 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
