%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: identity-CASP14-alphabets-select-aa-from-cluster=first.pdf
%%Creator: (Adobe Acrobat 23.3.0)
%%For: ioan
%%CreationDate: 30/08/2023, 14:32
%%BoundingBox: 0 0 502 302
%%HiResBoundingBox: 0 0 501.2844 301.0464
%%CropBox: 0 0 501.2844 301.0464
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 575 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.2a0d8d9, 2023/03/14-11:19:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-08-30T14:27:33+01:00"
   xmp:CreatorTool="Matplotlib v3.5.2, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -301.046 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 301.046 li
501.284 301.046 li
501.284 0 li
cp
clp
0 301.046 mo
501.284 301.046 li
501.284 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
f
21.7407 281.439 mo
22.5468 280.633 li
26.0597 284.146 li
26.6707 284.757 27.0864 285.325 27.3071 285.817 cv
27.5277 286.31 27.5616 286.853 27.4259 287.43 cv
27.2816 288.015 26.9167 288.601 26.3397 289.178 cv
25.7627 289.755 25.2027 290.128 24.6512 290.289 cv
24.0996 290.467 23.5651 290.442 23.039 290.221 cv
22.5129 290.001 21.9274 289.568 21.2825 288.923 cv
17.7696 285.41 li
18.5672 284.613 li
22.0716 288.117 li
22.6062 288.652 23.039 288.999 23.3869 289.144 cv
23.7432 289.296 24.0996 289.313 24.473 289.212 cv
24.8463 289.11 25.2027 288.889 25.5591 288.533 cv
26.1446 287.947 26.4331 287.404 26.4161 286.878 cv
26.3991 286.352 26.0088 285.707 25.2451 284.943 cv
21.7407 281.439 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
29.946 285.385 mo
23.8705 279.309 li
24.6936 278.486 li
32.6528 280.064 li
27.8841 275.296 li
28.6562 274.524 li
34.7317 280.599 li
33.9086 281.422 li
25.9409 279.835 li
30.7181 284.613 li
29.946 285.385 li
cp
f
36.2166 279.114 mo
30.1411 273.039 li
30.9472 272.232 li
37.0227 278.308 li
36.2166 279.114 li
cp
f
38.4397 276.891 mo
32.3643 270.815 li
34.6553 268.524 li
35.0541 268.126 35.385 267.846 35.6396 267.659 cv
35.9875 267.413 36.3354 267.269 36.6748 267.201 cv
37.0142 267.133 37.3706 267.167 37.7524 267.294 cv
38.1258 267.43 38.4652 267.633 38.7622 267.93 cv
39.2883 268.457 39.5513 269.059 39.5768 269.746 cv
39.6022 270.434 39.1865 271.206 38.3294 272.063 cv
36.7766 273.616 li
39.2459 276.085 li
38.4397 276.891 li
cp
36.0639 272.903 mo
37.6336 271.333 li
38.1513 270.815 38.4228 270.357 38.4482 269.941 cv
38.4737 269.526 38.3125 269.144 37.9561 268.787 cv
37.7015 268.533 37.4215 268.389 37.1076 268.329 cv
36.7936 268.287 36.5051 268.338 36.2421 268.482 cv
36.0724 268.584 35.8008 268.821 35.4444 269.178 cv
33.8916 270.731 li
36.0639 272.903 li
cp
f
44.1165 271.214 mo
38.041 265.139 li
40.7308 262.449 li
41.2739 261.906 41.7406 261.558 42.1309 261.388 cv
42.5212 261.219 42.9455 261.185 43.3867 261.286 cv
43.828 261.388 44.2183 261.609 44.5492 261.94 cv
44.9904 262.381 45.2111 262.89 45.2196 263.459 cv
45.2365 264.036 44.9905 264.655 44.4898 265.308 cv
44.8038 265.198 45.0668 265.139 45.279 265.13 cv
45.7372 265.113 46.2208 265.156 46.7554 265.266 cv
49.4622 265.868 li
48.4524 266.878 li
46.3905 266.412 li
45.7966 266.293 45.3214 266.208 44.9735 266.165 cv
44.6256 266.123 44.3541 266.123 44.1589 266.165 cv
43.9637 266.208 43.7855 266.284 43.6328 266.369 cv
43.5225 266.445 43.3528 266.581 43.1491 266.785 cv
42.2158 267.718 li
44.9141 270.417 li
44.1165 271.214 li
cp
41.52 267.022 mo
43.251 265.291 li
43.6158 264.927 43.8704 264.604 43.9977 264.324 cv
44.125 264.044 44.1674 263.764 44.108 263.484 cv
44.0401 263.213 43.9213 262.975 43.7177 262.771 cv
43.4376 262.491 43.0897 262.364 42.6994 262.381 cv
42.3006 262.406 41.8764 262.644 41.4351 263.085 cv
39.509 265.011 li
41.52 267.022 li
cp
f
47.0184 262.39 mo
46.0172 261.388 45.4996 260.328 45.4656 259.208 cv
45.4402 258.096 45.8475 257.112 46.7045 256.255 cv
47.2645 255.695 47.9009 255.33 48.6222 255.152 cv
49.3434 254.973 50.0646 254.999 50.7774 255.236 cv
51.4987 255.482 52.1605 255.907 52.763 256.509 cv
53.3824 257.129 53.8067 257.807 54.0442 258.537 cv
54.2818 259.284 54.2988 259.997 54.0867 260.701 cv
53.8745 261.405 53.5097 262.008 52.9836 262.534 cv
52.4066 263.111 51.7617 263.484 51.0405 263.662 cv
50.3107 263.849 49.598 263.815 48.8937 263.569 cv
48.1809 263.331 47.5615 262.933 47.0184 262.39 cv
cp
47.867 261.575 mo
48.5967 262.305 49.3689 262.686 50.1834 262.72 cv
50.998 262.754 51.7023 262.457 52.2963 261.863 cv
52.8987 261.261 53.1872 260.548 53.1533 259.734 cv
53.1194 258.919 52.7121 258.121 51.9314 257.341 cv
51.4393 256.849 50.9217 256.501 50.3786 256.297 cv
49.844 256.102 49.3179 256.051 48.7919 256.17 cv
48.2658 256.289 47.7991 256.552 47.4088 256.942 cv
46.8318 257.519 46.5348 258.206 46.5178 259.004 cv
46.5008 259.801 46.9506 260.659 47.867 261.575 cv
cp
f
58.3717 256.959 mo
53.0175 251.605 li
51.015 253.607 li
50.2938 252.886 li
55.1134 248.066 li
55.8346 248.788 li
53.8236 250.799 li
59.1778 256.153 li
58.3717 256.959 li
cp
f
64.9138 248.991 mo
65.6266 249.704 li
61.6131 253.718 li
61.4264 253.548 61.2906 253.344 61.1888 253.107 cv
61.0191 252.733 60.9173 252.309 60.8663 251.817 cv
60.8239 251.333 60.8494 250.697 60.9173 249.916 cv
61.0445 248.72 61.0615 247.854 60.9767 247.294 cv
60.8918 246.751 60.7136 246.335 60.4251 246.047 cv
60.1366 245.758 59.7717 245.614 59.356 245.623 cv
58.9402 245.631 58.5668 245.801 58.2274 246.14 cv
57.871 246.497 57.6929 246.895 57.6929 247.32 cv
57.6929 247.761 57.8795 248.168 58.2614 248.55 cv
57.4128 249.229 li
56.8952 248.609 56.6576 247.982 56.6916 247.337 cv
56.734 246.7 57.048 246.081 57.625 245.504 cv
58.202 244.927 58.8384 244.63 59.5002 244.613 cv
60.1621 244.596 60.7306 244.825 61.2058 245.3 cv
61.4518 245.546 61.6385 245.835 61.7743 246.174 cv
61.91 246.514 61.9949 246.921 62.0203 247.405 cv
62.0543 247.897 62.0288 248.635 61.944 249.619 cv
61.8676 250.442 61.8337 250.985 61.8422 251.248 cv
61.8506 251.511 61.8846 251.749 61.9355 251.97 cv
64.9138 248.991 li
cp
f
63.4374 245.903 mo
62.7246 245.19 62.2155 244.545 61.927 243.951 cv
61.63 243.366 61.5112 242.806 61.5621 242.279 cv
61.6131 241.753 61.8676 241.261 62.3088 240.82 cv
62.6313 240.498 62.9877 240.277 63.3695 240.167 cv
63.7429 240.065 64.1332 240.048 64.5405 240.133 cv
64.9478 240.218 65.372 240.387 65.8218 240.65 cv
66.263 240.922 66.7976 241.355 67.3915 241.949 cv
68.1043 242.661 68.6049 243.315 68.9019 243.9 cv
69.1989 244.486 69.3092 245.037 69.2583 245.563 cv
69.2074 246.089 68.9443 246.573 68.5031 247.014 cv
67.9091 247.608 67.2473 247.863 66.5006 247.778 cv
65.6011 247.676 64.5829 247.048 63.4374 245.903 cv
cp
64.2011 245.139 mo
65.2023 246.14 65.9745 246.692 66.543 246.785 cv
67.103 246.887 67.5528 246.76 67.8922 246.42 cv
68.2316 246.081 68.3589 245.631 68.2655 245.063 cv
68.1722 244.494 67.6291 243.713 66.6279 242.712 cv
65.6266 241.711 64.846 241.168 64.2774 241.075 cv
63.7174 240.99 63.2592 241.108 62.9198 241.448 cv
62.5719 241.796 62.4446 242.212 62.5295 242.704 cv
62.6483 243.332 63.2083 244.146 64.2011 245.139 cv
cp
f
71.3407 281.439 mo
72.1468 280.633 li
75.6597 284.146 li
76.2707 284.757 76.6864 285.325 76.9071 285.817 cv
77.1277 286.31 77.1616 286.853 77.0259 287.43 cv
76.8816 288.015 76.5167 288.601 75.9397 289.178 cv
75.3627 289.755 74.8027 290.128 74.2512 290.289 cv
73.6996 290.467 73.165 290.442 72.639 290.221 cv
72.1129 290.001 71.5274 289.568 70.8825 288.923 cv
67.3696 285.41 li
68.1672 284.613 li
71.6716 288.117 li
72.2062 288.652 72.639 288.999 72.9869 289.144 cv
73.3432 289.296 73.6996 289.313 74.073 289.212 cv
74.4463 289.11 74.8027 288.889 75.1591 288.533 cv
75.7446 287.947 76.0331 287.404 76.0161 286.878 cv
75.9991 286.352 75.6088 285.707 74.8451 284.943 cv
71.3407 281.439 li
cp
f
79.546 285.385 mo
73.4705 279.309 li
74.2936 278.486 li
82.2528 280.064 li
77.4841 275.296 li
78.2562 274.524 li
84.3317 280.599 li
83.5086 281.422 li
75.5409 279.835 li
80.3181 284.613 li
79.546 285.385 li
cp
f
85.8166 279.114 mo
79.7411 273.039 li
80.5473 272.232 li
86.6227 278.308 li
85.8166 279.114 li
cp
f
88.0398 276.891 mo
81.9643 270.815 li
84.2553 268.524 li
84.6541 268.126 84.985 267.846 85.2396 267.659 cv
85.5875 267.413 85.9354 267.269 86.2748 267.201 cv
86.6142 267.133 86.9706 267.167 87.3524 267.294 cv
87.7258 267.43 88.0652 267.633 88.3622 267.93 cv
88.8883 268.457 89.1513 269.059 89.1768 269.746 cv
89.2022 270.434 88.7865 271.206 87.9294 272.063 cv
86.3766 273.616 li
88.8459 276.085 li
88.0398 276.891 li
cp
85.6639 272.903 mo
87.2337 271.333 li
87.7513 270.815 88.0228 270.357 88.0482 269.941 cv
88.0737 269.526 87.9125 269.144 87.5561 268.787 cv
87.3015 268.533 87.0215 268.389 86.7076 268.329 cv
86.3936 268.287 86.1051 268.338 85.8421 268.482 cv
85.6724 268.584 85.4008 268.821 85.0445 269.178 cv
83.4916 270.731 li
85.6639 272.903 li
cp
f
93.7165 271.214 mo
87.641 265.139 li
90.3308 262.449 li
90.8739 261.906 91.3406 261.558 91.7309 261.388 cv
92.1212 261.219 92.5455 261.185 92.9867 261.286 cv
93.428 261.388 93.8183 261.609 94.1492 261.94 cv
94.5904 262.381 94.8111 262.89 94.8196 263.459 cv
94.8365 264.036 94.5904 264.655 94.0898 265.308 cv
94.4038 265.198 94.6668 265.139 94.8789 265.13 cv
95.3372 265.113 95.8208 265.156 96.3554 265.266 cv
99.0622 265.868 li
98.0524 266.878 li
95.9905 266.412 li
95.3966 266.293 94.9214 266.208 94.5735 266.165 cv
94.2256 266.123 93.9541 266.123 93.7589 266.165 cv
93.5637 266.208 93.3855 266.284 93.2328 266.369 cv
93.1225 266.445 92.9528 266.581 92.7491 266.785 cv
91.8158 267.718 li
94.5141 270.417 li
93.7165 271.214 li
cp
91.12 267.022 mo
92.851 265.291 li
93.2158 264.927 93.4704 264.604 93.5977 264.324 cv
93.725 264.044 93.7674 263.764 93.708 263.484 cv
93.6401 263.213 93.5213 262.975 93.3177 262.771 cv
93.0376 262.491 92.6897 262.364 92.2994 262.381 cv
91.9006 262.406 91.4764 262.644 91.0351 263.085 cv
89.109 265.011 li
91.12 267.022 li
cp
f
96.6184 262.39 mo
95.6172 261.388 95.0996 260.328 95.0656 259.208 cv
95.0402 258.096 95.4475 257.112 96.3045 256.255 cv
96.8645 255.695 97.5009 255.33 98.2222 255.152 cv
98.9434 254.973 99.6647 254.999 100.377 255.236 cv
101.099 255.482 101.761 255.907 102.363 256.509 cv
102.982 257.129 103.407 257.807 103.644 258.537 cv
103.882 259.284 103.899 259.997 103.687 260.701 cv
103.475 261.405 103.11 262.008 102.584 262.534 cv
102.007 263.111 101.362 263.484 100.64 263.662 cv
99.9107 263.849 99.198 263.815 98.4937 263.569 cv
97.7809 263.331 97.1615 262.933 96.6184 262.39 cv
cp
97.467 261.575 mo
98.1967 262.305 98.9689 262.686 99.7834 262.72 cv
100.598 262.754 101.302 262.457 101.896 261.863 cv
102.499 261.261 102.787 260.548 102.753 259.734 cv
102.719 258.919 102.312 258.121 101.531 257.341 cv
101.039 256.849 100.522 256.501 99.9786 256.297 cv
99.444 256.102 98.9179 256.051 98.3919 256.17 cv
97.8658 256.289 97.3991 256.552 97.0088 256.942 cv
96.4318 257.519 96.1348 258.206 96.1178 259.004 cv
96.1008 259.801 96.5506 260.659 97.467 261.575 cv
cp
f
107.972 256.959 mo
102.618 251.605 li
100.615 253.607 li
99.8937 252.886 li
104.713 248.066 li
105.435 248.788 li
103.424 250.799 li
108.778 256.153 li
107.972 256.959 li
cp
f
114.124 250.807 mo
113.377 251.554 li
108.625 246.802 li
108.608 247.158 108.549 247.574 108.43 248.032 cv
108.311 248.491 108.175 248.881 108.031 249.195 cv
107.31 248.474 li
107.53 247.863 107.658 247.26 107.692 246.666 cv
107.726 246.089 107.675 245.597 107.539 245.19 cv
108.023 244.706 li
114.124 250.807 li
cp
f
113.886 244.46 mo
113.462 244.664 113.071 244.732 112.706 244.672 cv
112.35 244.621 112.028 244.435 111.731 244.138 cv
111.289 243.696 111.077 243.179 111.094 242.551 cv
111.111 241.923 111.383 241.346 111.909 240.82 cv
112.435 240.294 113.029 240.022 113.657 240.005 cv
114.285 239.988 114.819 240.201 115.261 240.642 cv
115.549 240.93 115.719 241.253 115.778 241.601 cv
115.838 241.965 115.778 242.347 115.583 242.763 cv
116.075 242.509 116.55 242.424 117.017 242.5 cv
117.484 242.576 117.908 242.797 118.281 243.17 cv
118.807 243.696 119.053 244.316 119.036 245.029 cv
119.02 245.758 118.706 246.412 118.112 247.006 cv
117.509 247.608 116.856 247.922 116.135 247.931 cv
115.422 247.948 114.802 247.685 114.268 247.15 cv
113.877 246.76 113.64 246.335 113.572 245.86 cv
113.504 245.402 113.614 244.935 113.886 244.46 cv
cp
112.469 243.349 mo
112.757 243.637 113.088 243.781 113.453 243.773 cv
113.827 243.773 114.149 243.62 114.446 243.323 cv
114.734 243.035 114.879 242.721 114.879 242.347 cv
114.887 241.982 114.76 241.668 114.497 241.405 cv
114.225 241.134 113.894 241.007 113.521 241.007 cv
113.148 241.007 112.817 241.151 112.537 241.431 cv
112.248 241.719 112.104 242.05 112.096 242.415 cv
112.096 242.789 112.214 243.094 112.469 243.349 cv
cp
115.031 246.386 mo
115.252 246.607 115.507 246.76 115.804 246.853 cv
116.109 246.955 116.406 246.963 116.72 246.87 cv
117.025 246.785 117.289 246.624 117.518 246.395 cv
117.874 246.038 118.052 245.64 118.061 245.173 cv
118.061 244.715 117.882 244.299 117.526 243.943 cv
117.17 243.586 116.762 243.416 116.287 243.416 cv
115.812 243.416 115.388 243.603 115.031 243.96 cv
114.675 244.316 114.505 244.723 114.505 245.181 cv
114.514 245.648 114.692 246.047 115.031 246.386 cv
cp
f
136.246 278.285 mo
130.17 272.21 li
130.976 271.404 li
133.471 273.898 li
136.627 270.742 li
134.133 268.247 li
134.939 267.441 li
141.014 273.516 li
140.208 274.323 li
137.349 271.463 li
134.192 274.62 li
137.052 277.479 li
136.246 278.285 li
cp
f
140.123 270.504 mo
140.811 269.681 li
141.15 269.953 141.489 270.122 141.82 270.182 cv
142.143 270.25 142.499 270.199 142.898 270.037 cv
143.288 269.885 143.662 269.63 144.01 269.282 cv
144.315 268.977 144.536 268.671 144.68 268.34 cv
144.833 268.018 144.875 267.721 144.833 267.441 cv
144.79 267.178 144.671 266.94 144.485 266.754 cv
144.298 266.567 144.069 266.457 143.814 266.423 cv
143.568 266.397 143.271 266.457 142.915 266.609 cv
142.686 266.703 142.236 266.966 141.54 267.39 cv
140.845 267.814 140.327 268.077 139.988 268.179 cv
139.546 268.315 139.139 268.349 138.774 268.273 cv
138.409 268.196 138.087 268.009 137.798 267.721 cv
137.493 267.416 137.298 267.051 137.204 266.601 cv
137.111 266.168 137.162 265.71 137.366 265.235 cv
137.561 264.768 137.858 264.318 138.265 263.911 cv
138.715 263.461 139.19 263.139 139.674 262.944 cv
140.157 262.749 140.641 262.689 141.108 262.783 cv
141.583 262.884 141.99 263.105 142.363 263.444 cv
141.651 264.276 li
141.226 263.937 140.802 263.784 140.361 263.818 cv
139.928 263.86 139.47 264.115 139.003 264.581 cv
138.511 265.074 138.257 265.515 138.214 265.914 cv
138.172 266.312 138.273 266.635 138.528 266.889 cv
138.749 267.11 139.003 267.212 139.292 267.195 cv
139.589 267.186 140.14 266.923 140.946 266.423 cv
141.752 265.922 142.329 265.6 142.677 265.455 cv
143.195 265.277 143.662 265.218 144.077 265.294 cv
144.502 265.379 144.875 265.583 145.197 265.905 cv
145.52 266.228 145.732 266.626 145.834 267.102 cv
145.936 267.577 145.885 268.069 145.698 268.561 cv
145.503 269.062 145.189 269.528 144.756 269.961 cv
144.205 270.513 143.67 270.894 143.144 271.115 cv
142.618 271.336 142.083 271.378 141.549 271.268 cv
141.014 271.158 140.539 270.903 140.123 270.504 cv
cp
f
148.006 266.524 mo
141.931 260.449 li
144.027 258.353 li
144.493 257.886 144.884 257.564 145.189 257.36 cv
145.622 257.097 146.072 256.953 146.521 256.911 cv
147.115 256.86 147.701 256.97 148.278 257.225 cv
148.855 257.496 149.415 257.886 149.958 258.43 cv
150.424 258.896 150.772 259.363 151.027 259.821 cv
151.273 260.288 151.434 260.721 151.494 261.119 cv
151.562 261.527 151.553 261.892 151.485 262.231 cv
151.417 262.57 151.281 262.91 151.069 263.258 cv
150.849 263.614 150.56 263.97 150.195 264.335 cv
148.006 266.524 li
cp
148.1 265.006 mo
149.398 263.707 li
149.797 263.309 150.077 262.961 150.229 262.655 cv
150.374 262.358 150.45 262.061 150.45 261.79 cv
150.45 261.416 150.348 261.009 150.127 260.585 cv
149.907 260.16 149.576 259.711 149.118 259.253 cv
148.481 258.616 147.879 258.234 147.336 258.099 cv
146.793 257.963 146.309 257.988 145.893 258.166 cv
145.596 258.311 145.206 258.616 144.731 259.091 cv
143.458 260.364 li
148.1 265.006 li
cp
f
154.107 260.424 mo
148.032 254.348 li
149.245 253.135 li
154.981 256.003 li
155.524 256.274 155.914 256.478 156.169 256.614 cv
156.016 256.325 155.804 255.892 155.516 255.315 cv
152.749 249.63 li
153.827 248.553 li
159.903 254.628 li
159.13 255.4 li
154.048 250.318 li
157.365 257.165 li
156.644 257.886 li
149.72 254.475 li
154.888 259.643 li
154.107 260.424 li
cp
f
163.712 250.818 mo
162.966 251.565 li
158.214 246.813 li
158.197 247.17 158.138 247.585 158.019 248.044 cv
157.9 248.502 157.764 248.892 157.62 249.206 cv
156.899 248.485 li
157.119 247.874 157.247 247.271 157.281 246.677 cv
157.314 246.1 157.264 245.608 157.128 245.201 cv
157.611 244.717 li
163.712 250.818 li
cp
f
160.386 243.589 mo
159.665 242.868 li
163.602 238.93 li
164.188 239.516 li
164.213 240.322 164.374 241.264 164.68 242.316 cv
164.977 243.377 165.384 244.378 165.893 245.294 cv
166.249 245.956 166.716 246.61 167.285 247.246 cv
166.513 248.018 li
166.046 247.534 165.562 246.864 165.062 246.007 cv
164.561 245.15 164.162 244.242 163.874 243.275 cv
163.585 242.308 163.415 241.425 163.364 240.61 cv
160.386 243.589 li
cp
f
173.078 291.053 mo
167.002 284.977 li
168.216 283.764 li
173.952 286.632 li
174.495 286.904 174.885 287.107 175.14 287.243 cv
174.987 286.955 174.775 286.522 174.486 285.945 cv
171.72 280.26 li
172.798 279.182 li
178.873 285.257 li
178.101 286.03 li
173.018 280.947 li
176.336 287.795 li
175.615 288.516 li
168.691 285.105 li
173.858 290.272 li
173.078 291.053 li
cp
f
180.146 283.985 mo
174.07 277.909 li
175.284 276.696 li
181.02 279.564 li
181.563 279.835 181.953 280.039 182.208 280.175 cv
182.055 279.886 181.843 279.454 181.554 278.877 cv
178.788 273.191 li
179.866 272.114 li
185.941 278.189 li
185.169 278.962 li
180.087 273.879 li
183.404 280.726 li
182.683 281.448 li
175.759 278.037 li
180.927 283.204 li
180.146 283.985 li
cp
f
185.016 275.211 mo
185.704 274.388 li
186.043 274.66 186.383 274.829 186.713 274.889 cv
187.036 274.956 187.392 274.906 187.791 274.744 cv
188.181 274.592 188.555 274.337 188.903 273.989 cv
189.208 273.684 189.429 273.378 189.573 273.047 cv
189.726 272.725 189.768 272.428 189.726 272.148 cv
189.683 271.885 189.565 271.647 189.378 271.461 cv
189.191 271.274 188.962 271.164 188.707 271.13 cv
188.461 271.104 188.164 271.164 187.808 271.316 cv
187.579 271.41 187.129 271.673 186.433 272.097 cv
185.738 272.521 185.22 272.784 184.881 272.886 cv
184.439 273.022 184.032 273.056 183.667 272.979 cv
183.302 272.903 182.98 272.716 182.691 272.428 cv
182.386 272.122 182.191 271.758 182.097 271.308 cv
182.004 270.875 182.055 270.417 182.259 269.942 cv
182.454 269.475 182.751 269.025 183.158 268.618 cv
183.608 268.168 184.083 267.846 184.567 267.651 cv
185.05 267.456 185.534 267.396 186.001 267.489 cv
186.476 267.591 186.883 267.812 187.257 268.151 cv
186.544 268.983 li
186.119 268.643 185.695 268.491 185.254 268.525 cv
184.821 268.567 184.363 268.822 183.896 269.288 cv
183.404 269.78 183.15 270.222 183.107 270.621 cv
183.065 271.019 183.167 271.342 183.421 271.596 cv
183.642 271.817 183.896 271.919 184.185 271.902 cv
184.482 271.893 185.033 271.63 185.839 271.13 cv
186.646 270.629 187.223 270.307 187.57 270.162 cv
188.088 269.984 188.555 269.925 188.971 270.001 cv
189.395 270.086 189.768 270.29 190.091 270.612 cv
190.413 270.934 190.625 271.333 190.727 271.808 cv
190.829 272.284 190.778 272.776 190.591 273.268 cv
190.396 273.769 190.082 274.235 189.649 274.668 cv
189.098 275.22 188.563 275.601 188.037 275.822 cv
187.511 276.043 186.976 276.085 186.442 275.975 cv
185.907 275.864 185.432 275.61 185.016 275.211 cv
cp
f
192.916 271.214 mo
186.841 265.139 li
191.236 260.744 li
191.957 261.465 li
188.368 265.054 li
190.226 266.912 li
193.587 263.552 li
194.299 264.265 li
190.939 267.625 li
193.01 269.696 li
196.735 265.971 li
197.447 266.683 li
192.916 271.214 li
cp
f
202.513 260.311 mo
203.15 260.2 203.676 260.048 204.108 259.853 cv
204.422 260.642 li
203.82 260.922 203.141 261.108 202.386 261.202 cv
202.174 261.906 201.8 262.517 201.257 263.06 cv
200.706 263.612 200.078 263.985 199.365 264.172 cv
198.652 264.358 197.931 264.333 197.218 264.095 cv
196.506 263.858 195.844 263.433 195.233 262.822 cv
194.639 262.228 194.206 261.558 193.96 260.82 cv
193.705 260.09 193.68 259.369 193.875 258.665 cv
194.07 257.96 194.435 257.324 194.995 256.764 cv
195.555 256.204 196.192 255.839 196.913 255.661 cv
197.634 255.483 198.355 255.508 199.068 255.746 cv
199.781 255.983 200.443 256.408 201.045 257.01 cv
201.546 257.511 201.919 258.037 202.165 258.588 cv
202.411 259.14 202.53 259.717 202.513 260.311 cv
cp
199.713 261.057 mo
200.307 260.735 200.884 260.548 201.444 260.497 cv
201.486 259.59 201.079 258.707 200.214 257.842 cv
199.722 257.349 199.212 257.01 198.669 256.806 cv
198.135 256.611 197.609 256.56 197.083 256.679 cv
196.556 256.798 196.09 257.061 195.691 257.46 cv
195.089 258.062 194.8 258.775 194.817 259.573 cv
194.834 260.37 195.25 261.176 196.064 261.991 cv
196.862 262.788 197.66 263.196 198.474 263.23 cv
199.289 263.264 199.985 262.975 200.595 262.364 cv
200.884 262.076 201.105 261.753 201.249 261.388 cv
200.833 261.482 200.451 261.626 200.103 261.838 cv
199.713 261.057 li
cp
f
202.937 257.29 mo
203.625 256.467 li
203.964 256.738 204.304 256.908 204.634 256.968 cv
204.957 257.035 205.313 256.985 205.712 256.823 cv
206.102 256.671 206.476 256.416 206.824 256.068 cv
207.129 255.763 207.35 255.457 207.494 255.126 cv
207.647 254.804 207.689 254.507 207.647 254.227 cv
207.604 253.964 207.486 253.726 207.299 253.539 cv
207.112 253.353 206.883 253.243 206.629 253.209 cv
206.382 253.183 206.085 253.243 205.729 253.395 cv
205.5 253.489 205.05 253.752 204.354 254.176 cv
203.659 254.6 203.141 254.863 202.802 254.965 cv
202.36 255.101 201.953 255.135 201.588 255.058 cv
201.223 254.982 200.901 254.795 200.612 254.507 cv
200.307 254.201 200.112 253.836 200.019 253.387 cv
199.925 252.954 199.976 252.496 200.18 252.021 cv
200.375 251.554 200.672 251.104 201.079 250.697 cv
201.529 250.247 202.004 249.925 202.488 249.73 cv
202.971 249.534 203.455 249.475 203.922 249.568 cv
204.397 249.67 204.804 249.891 205.178 250.23 cv
204.465 251.062 li
204.041 250.722 203.616 250.57 203.175 250.604 cv
202.742 250.646 202.284 250.901 201.817 251.367 cv
201.325 251.859 201.071 252.301 201.028 252.699 cv
200.986 253.098 201.088 253.421 201.342 253.675 cv
201.563 253.896 201.817 253.998 202.106 253.981 cv
202.403 253.972 202.954 253.709 203.761 253.209 cv
204.567 252.708 205.144 252.386 205.492 252.241 cv
206.009 252.063 206.476 252.004 206.892 252.08 cv
207.316 252.165 207.689 252.369 208.012 252.691 cv
208.334 253.013 208.546 253.412 208.648 253.887 cv
208.75 254.363 208.699 254.855 208.512 255.347 cv
208.317 255.847 208.003 256.314 207.57 256.747 cv
207.019 257.298 206.484 257.68 205.958 257.901 cv
205.432 258.122 204.898 258.164 204.363 258.054 cv
203.828 257.943 203.353 257.689 202.937 257.29 cv
cp
f
213.332 250.799 mo
212.585 251.545 li
207.834 246.794 li
207.817 247.15 207.757 247.566 207.638 248.024 cv
207.52 248.482 207.384 248.873 207.24 249.187 cv
206.518 248.465 li
206.739 247.854 206.866 247.252 206.9 246.658 cv
206.934 246.081 206.883 245.589 206.747 245.181 cv
207.231 244.698 li
213.332 250.799 li
cp
f
213.637 247.286 mo
214.282 246.437 li
214.791 246.777 215.241 246.938 215.631 246.921 cv
216.022 246.904 216.37 246.743 216.667 246.446 cv
217.015 246.098 217.193 245.682 217.184 245.198 cv
217.184 244.723 217.006 244.291 216.65 243.934 cv
216.31 243.595 215.903 243.425 215.462 243.425 cv
215.021 243.425 214.613 243.595 214.274 243.934 cv
214.13 244.078 213.985 244.291 213.833 244.545 cv
213.264 243.807 li
213.391 243.697 li
213.705 243.383 213.917 243.018 214.002 242.593 cv
214.087 242.169 213.96 241.787 213.612 241.439 cv
213.34 241.168 213.026 241.041 212.662 241.049 cv
212.297 241.058 211.966 241.202 211.677 241.49 cv
211.389 241.779 211.236 242.118 211.219 242.492 cv
211.211 242.873 211.363 243.264 211.669 243.671 cv
210.795 244.291 li
210.379 243.705 210.201 243.103 210.252 242.509 cv
210.303 241.915 210.557 241.372 211.041 240.888 cv
211.372 240.557 211.754 240.328 212.178 240.192 cv
212.594 240.065 213.001 240.048 213.391 240.133 cv
213.79 240.226 214.13 240.413 214.401 240.684 cv
214.673 240.956 214.834 241.27 214.91 241.618 cv
214.987 241.983 214.944 242.364 214.791 242.755 cv
215.233 242.483 215.682 242.39 216.141 242.441 cv
216.607 242.5 217.04 242.729 217.43 243.12 cv
217.956 243.646 218.211 244.291 218.186 245.046 cv
218.169 245.809 217.863 246.471 217.278 247.057 cv
216.735 247.6 216.141 247.888 215.47 247.914 cv
214.8 247.956 214.197 247.744 213.637 247.286 cv
cp
f
236.845 276.885 mo
229.158 272.422 li
229.981 271.599 li
234.885 274.654 li
235.411 274.976 235.912 275.307 236.396 275.638 cv
235.903 274.84 235.615 274.382 235.547 274.246 cv
232.594 268.986 li
233.562 268.018 li
237.507 270.216 li
238.483 270.767 239.357 271.336 240.129 271.904 cv
239.824 271.446 239.484 270.903 239.111 270.275 cv
236.158 265.422 li
236.973 264.607 li
241.376 272.354 li
240.604 273.126 li
234.699 269.783 li
234.198 269.503 233.901 269.325 233.799 269.257 cv
234.011 269.605 234.189 269.902 234.334 270.148 cv
237.668 276.062 li
236.845 276.885 li
cp
f
242.832 270.899 mo
239.073 262.507 li
239.939 261.641 li
248.5 265.23 li
247.592 266.138 li
245.038 265.01 li
242.501 267.547 li
243.672 270.059 li
242.832 270.899 li
cp
242.077 266.664 mo
244.139 264.603 li
241.822 263.559 li
241.118 263.245 240.549 262.965 240.125 262.727 cv
240.439 263.194 240.719 263.695 240.965 264.212 cv
242.077 266.664 li
cp
f
246.922 262.905 mo
247.609 262.082 li
247.949 262.354 248.288 262.524 248.619 262.583 cv
248.942 262.651 249.298 262.6 249.697 262.439 cv
250.087 262.286 250.46 262.031 250.808 261.684 cv
251.114 261.378 251.334 261.073 251.479 260.742 cv
251.631 260.419 251.674 260.122 251.631 259.842 cv
251.589 259.579 251.47 259.342 251.283 259.155 cv
251.097 258.968 250.868 258.858 250.613 258.824 cv
250.367 258.799 250.07 258.858 249.714 259.011 cv
249.485 259.104 249.035 259.367 248.339 259.791 cv
247.643 260.216 247.126 260.479 246.786 260.58 cv
246.345 260.716 245.938 260.75 245.573 260.674 cv
245.208 260.597 244.886 260.411 244.597 260.122 cv
244.292 259.817 244.096 259.452 244.003 259.002 cv
243.91 258.569 243.961 258.111 244.164 257.636 cv
244.359 257.169 244.656 256.72 245.064 256.312 cv
245.513 255.863 245.989 255.54 246.472 255.345 cv
246.956 255.15 247.44 255.09 247.906 255.184 cv
248.381 255.286 248.789 255.506 249.162 255.846 cv
248.449 256.677 li
248.025 256.338 247.601 256.185 247.16 256.219 cv
246.727 256.261 246.269 256.516 245.802 256.983 cv
245.31 257.475 245.055 257.916 245.013 258.315 cv
244.97 258.714 245.072 259.036 245.327 259.291 cv
245.547 259.511 245.802 259.613 246.09 259.596 cv
246.387 259.588 246.939 259.325 247.745 258.824 cv
248.551 258.323 249.128 258.001 249.476 257.857 cv
249.994 257.678 250.46 257.619 250.876 257.695 cv
251.3 257.78 251.674 257.984 251.996 258.306 cv
252.319 258.629 252.531 259.028 252.633 259.503 cv
252.734 259.978 252.684 260.47 252.497 260.962 cv
252.302 261.463 251.988 261.93 251.555 262.362 cv
251.003 262.914 250.469 263.296 249.943 263.516 cv
249.417 263.737 248.882 263.779 248.348 263.669 cv
247.813 263.559 247.338 263.304 246.922 262.905 cv
cp
f
252.582 257.246 mo
253.269 256.423 li
253.608 256.694 253.948 256.864 254.279 256.923 cv
254.601 256.991 254.958 256.94 255.356 256.779 cv
255.747 256.626 256.12 256.372 256.468 256.024 cv
256.773 255.718 256.994 255.413 257.138 255.082 cv
257.291 254.759 257.334 254.463 257.291 254.183 cv
257.249 253.919 257.13 253.682 256.943 253.495 cv
256.757 253.309 256.527 253.198 256.273 253.164 cv
256.027 253.139 255.73 253.198 255.373 253.351 cv
255.144 253.444 254.695 253.707 253.999 254.132 cv
253.303 254.556 252.785 254.819 252.446 254.921 cv
252.005 255.056 251.597 255.09 251.233 255.014 cv
250.868 254.938 250.545 254.751 250.257 254.463 cv
249.951 254.157 249.756 253.792 249.663 253.342 cv
249.569 252.91 249.62 252.452 249.824 251.976 cv
250.019 251.51 250.316 251.06 250.723 250.653 cv
251.173 250.203 251.648 249.88 252.132 249.685 cv
252.616 249.49 253.099 249.431 253.566 249.524 cv
254.041 249.626 254.449 249.847 254.822 250.186 cv
254.109 251.017 li
253.685 250.678 253.261 250.525 252.819 250.559 cv
252.387 250.602 251.928 250.856 251.462 251.323 cv
250.97 251.815 250.715 252.256 250.673 252.655 cv
250.63 253.054 250.732 253.376 250.987 253.631 cv
251.207 253.852 251.462 253.953 251.75 253.936 cv
252.047 253.928 252.599 253.665 253.405 253.164 cv
254.211 252.664 254.788 252.341 255.136 252.197 cv
255.653 252.019 256.12 251.959 256.536 252.036 cv
256.96 252.121 257.334 252.324 257.656 252.647 cv
257.978 252.969 258.191 253.368 258.292 253.843 cv
258.394 254.318 258.343 254.81 258.157 255.303 cv
257.961 255.803 257.647 256.27 257.215 256.703 cv
256.663 257.254 256.129 257.636 255.603 257.857 cv
255.076 258.077 254.542 258.12 254.007 258.009 cv
253.473 257.899 252.998 257.645 252.582 257.246 cv
cp
f
262.976 250.754 mo
262.23 251.501 li
257.478 246.749 li
257.461 247.106 257.401 247.521 257.283 247.98 cv
257.164 248.438 257.028 248.828 256.884 249.142 cv
256.163 248.421 li
256.383 247.81 256.511 247.208 256.544 246.614 cv
256.578 246.037 256.527 245.544 256.392 245.137 cv
256.875 244.653 li
262.976 250.754 li
cp
f
263.282 247.241 mo
263.927 246.393 li
264.436 246.732 264.885 246.894 265.276 246.877 cv
265.666 246.86 266.014 246.698 266.311 246.401 cv
266.659 246.054 266.837 245.638 266.829 245.154 cv
266.829 244.679 266.65 244.246 266.294 243.89 cv
265.955 243.55 265.547 243.381 265.106 243.381 cv
264.665 243.381 264.258 243.55 263.918 243.89 cv
263.774 244.034 263.63 244.246 263.477 244.501 cv
262.908 243.763 li
263.036 243.652 li
263.35 243.338 263.562 242.973 263.647 242.549 cv
263.731 242.125 263.604 241.743 263.256 241.395 cv
262.985 241.124 262.671 240.996 262.306 241.005 cv
261.941 241.013 261.61 241.158 261.322 241.446 cv
261.033 241.735 260.88 242.074 260.863 242.447 cv
260.855 242.829 261.008 243.219 261.313 243.627 cv
260.439 244.246 li
260.023 243.661 259.845 243.058 259.896 242.464 cv
259.947 241.87 260.202 241.327 260.685 240.844 cv
261.016 240.513 261.398 240.284 261.822 240.148 cv
262.238 240.021 262.645 240.004 263.036 240.088 cv
263.434 240.182 263.774 240.368 264.045 240.64 cv
264.317 240.911 264.478 241.225 264.555 241.573 cv
264.631 241.938 264.588 242.32 264.436 242.71 cv
264.877 242.439 265.327 242.345 265.785 242.396 cv
266.252 242.456 266.684 242.685 267.075 243.075 cv
267.601 243.601 267.855 244.246 267.83 245.001 cv
267.813 245.765 267.507 246.427 266.922 247.012 cv
266.379 247.555 265.785 247.844 265.115 247.869 cv
264.444 247.912 263.842 247.7 263.282 247.241 cv
cp
f
288.929 270.499 mo
289.616 269.676 li
289.956 269.947 290.295 270.117 290.626 270.176 cv
290.948 270.244 291.305 270.193 291.704 270.032 cv
292.094 269.879 292.467 269.625 292.815 269.277 cv
293.121 268.971 293.341 268.666 293.485 268.335 cv
293.638 268.012 293.681 267.715 293.638 267.435 cv
293.596 267.172 293.477 266.935 293.29 266.748 cv
293.104 266.561 292.875 266.451 292.62 266.417 cv
292.374 266.392 292.077 266.451 291.721 266.604 cv
291.491 266.697 291.042 266.96 290.346 267.385 cv
289.65 267.809 289.133 268.072 288.793 268.174 cv
288.352 268.309 287.945 268.343 287.58 268.267 cv
287.215 268.191 286.892 268.004 286.604 267.715 cv
286.298 267.41 286.103 267.045 286.01 266.595 cv
285.917 266.163 285.968 265.704 286.171 265.229 cv
286.366 264.763 286.663 264.313 287.071 263.906 cv
287.52 263.456 287.995 263.133 288.479 262.938 cv
288.963 262.743 289.446 262.684 289.913 262.777 cv
290.388 262.879 290.796 263.099 291.169 263.439 cv
290.456 264.27 li
290.032 263.931 289.608 263.778 289.166 263.812 cv
288.734 263.855 288.275 264.109 287.809 264.576 cv
287.317 265.068 287.062 265.509 287.02 265.908 cv
286.977 266.307 287.079 266.629 287.334 266.884 cv
287.554 267.104 287.809 267.206 288.097 267.189 cv
288.394 267.181 288.946 266.918 289.752 266.417 cv
290.558 265.917 291.135 265.594 291.483 265.45 cv
292.001 265.272 292.467 265.212 292.883 265.289 cv
293.307 265.373 293.681 265.577 294.003 265.9 cv
294.326 266.222 294.538 266.621 294.639 267.096 cv
294.741 267.571 294.69 268.063 294.504 268.555 cv
294.309 269.056 293.995 269.523 293.562 269.956 cv
293.01 270.507 292.476 270.889 291.95 271.11 cv
291.424 271.33 290.889 271.373 290.354 271.262 cv
289.82 271.152 289.345 270.897 288.929 270.499 cv
cp
f
296.812 266.519 mo
290.736 260.443 li
292.832 258.348 li
293.299 257.881 293.689 257.558 293.995 257.355 cv
294.427 257.092 294.877 256.948 295.327 256.905 cv
295.921 256.854 296.506 256.964 297.083 257.219 cv
297.66 257.491 298.22 257.881 298.763 258.424 cv
299.23 258.891 299.578 259.357 299.833 259.816 cv
300.079 260.282 300.24 260.715 300.299 261.114 cv
300.367 261.521 300.359 261.886 300.291 262.225 cv
300.223 262.565 300.087 262.904 299.875 263.252 cv
299.654 263.608 299.366 263.965 299.001 264.33 cv
296.812 266.519 li
cp
296.905 265 mo
298.203 263.702 li
298.602 263.303 298.882 262.955 299.035 262.65 cv
299.179 262.353 299.256 262.056 299.256 261.784 cv
299.256 261.411 299.154 261.003 298.933 260.579 cv
298.712 260.155 298.382 259.705 297.923 259.247 cv
297.287 258.611 296.684 258.229 296.141 258.093 cv
295.598 257.957 295.115 257.983 294.699 258.161 cv
294.402 258.305 294.012 258.611 293.536 259.086 cv
292.264 260.359 li
296.905 265 li
cp
f
302.913 260.418 mo
296.837 254.343 li
298.051 253.129 li
303.787 255.997 li
304.33 256.269 304.72 256.472 304.975 256.608 cv
304.822 256.32 304.61 255.887 304.321 255.31 cv
301.555 249.625 li
302.633 248.547 li
308.708 254.623 li
307.936 255.395 li
302.853 250.312 li
306.171 257.16 li
305.45 257.881 li
298.526 254.47 li
303.693 259.637 li
302.913 260.418 li
cp
f
312.518 250.813 mo
311.771 251.559 li
307.019 246.808 li
307.003 247.164 306.943 247.58 306.824 248.038 cv
306.706 248.496 306.57 248.887 306.426 249.201 cv
305.704 248.479 li
305.925 247.868 306.052 247.266 306.086 246.672 cv
306.12 246.095 306.069 245.603 305.933 245.195 cv
306.417 244.712 li
312.518 250.813 li
cp
f
317.626 244.279 mo
318.339 244.992 li
314.325 249.005 li
314.139 248.836 314.003 248.632 313.901 248.394 cv
313.731 248.021 313.63 247.597 313.579 247.105 cv
313.536 246.621 313.562 245.985 313.63 245.204 cv
313.757 244.008 313.774 243.142 313.689 242.582 cv
313.604 242.039 313.426 241.623 313.137 241.335 cv
312.849 241.046 312.484 240.902 312.068 240.91 cv
311.652 240.919 311.279 241.089 310.94 241.428 cv
310.583 241.784 310.405 242.183 310.405 242.607 cv
310.405 243.049 310.592 243.456 310.974 243.838 cv
310.125 244.517 li
309.607 243.897 309.37 243.269 309.404 242.624 cv
309.446 241.988 309.76 241.369 310.337 240.792 cv
310.914 240.215 311.551 239.918 312.212 239.901 cv
312.874 239.884 313.443 240.113 313.918 240.588 cv
314.164 240.834 314.351 241.123 314.487 241.462 cv
314.622 241.801 314.707 242.209 314.733 242.692 cv
314.767 243.184 314.741 243.923 314.656 244.907 cv
314.58 245.73 314.546 246.273 314.554 246.536 cv
314.563 246.799 314.597 247.037 314.648 247.257 cv
317.626 244.279 li
cp
f
339.332 268.83 mo
338.619 268.117 li
341.19 265.546 li
343.439 267.795 li
343.371 268.508 343.201 269.152 342.93 269.729 cv
342.658 270.306 342.31 270.807 341.869 271.248 cv
341.267 271.851 340.605 272.275 339.867 272.504 cv
339.12 272.742 338.39 272.742 337.66 272.504 cv
336.922 272.275 336.26 271.851 335.666 271.257 cv
335.072 270.663 334.64 269.992 334.385 269.229 cv
334.122 268.474 334.097 267.735 334.309 267.014 cv
334.521 266.31 334.928 265.648 335.539 265.037 cv
335.972 264.604 336.447 264.282 336.939 264.061 cv
337.44 263.849 337.906 263.773 338.365 263.824 cv
338.823 263.875 339.307 264.053 339.824 264.35 cv
339.298 265.283 li
338.899 265.071 338.543 264.935 338.229 264.893 cv
337.923 264.859 337.584 264.91 337.219 265.054 cv
336.863 265.207 336.532 265.419 336.226 265.724 cv
335.853 266.098 335.598 266.471 335.437 266.853 cv
335.284 267.243 335.217 267.6 335.234 267.939 cv
335.251 268.295 335.318 268.618 335.454 268.923 cv
335.675 269.449 336.006 269.933 336.447 270.374 cv
336.99 270.917 337.533 271.274 338.085 271.452 cv
338.636 271.63 339.179 271.63 339.714 271.452 cv
340.248 271.274 340.707 270.985 341.114 270.578 cv
341.453 270.239 341.725 269.831 341.92 269.365 cv
342.115 268.898 342.234 268.508 342.259 268.177 cv
341.122 267.04 li
339.332 268.83 li
cp
f
345.441 267.489 mo
339.366 261.414 li
341.648 259.131 li
342.107 258.673 342.548 258.368 342.947 258.206 cv
343.354 258.054 343.761 258.02 344.177 258.113 cv
344.584 258.215 344.941 258.402 345.212 258.673 cv
345.475 258.936 345.645 259.259 345.738 259.623 cv
345.823 259.997 345.798 260.396 345.653 260.811 cv
346.129 260.557 346.595 260.463 347.054 260.514 cv
347.512 260.582 347.919 260.786 348.267 261.134 cv
348.555 261.422 348.759 261.762 348.878 262.118 cv
349.005 262.483 349.039 262.822 349.005 263.128 cv
348.963 263.442 348.835 263.756 348.64 264.087 cv
348.437 264.426 348.148 264.782 347.758 265.173 cv
345.441 267.489 li
cp
342.726 263.162 mo
344.041 261.847 li
344.398 261.49 344.635 261.219 344.737 261.015 cv
344.881 260.752 344.932 260.497 344.89 260.251 cv
344.856 260.014 344.737 259.776 344.525 259.564 cv
344.321 259.36 344.092 259.233 343.846 259.174 cv
343.592 259.123 343.354 259.157 343.116 259.276 cv
342.879 259.411 342.539 259.683 342.107 260.116 cv
340.893 261.329 li
342.726 263.162 li
cp
345.535 265.97 mo
347.045 264.46 li
347.3 264.205 347.478 264.01 347.563 263.875 cv
347.707 263.662 347.809 263.459 347.86 263.255 cv
347.902 263.06 347.894 262.848 347.826 262.61 cv
347.766 262.381 347.639 262.169 347.435 261.965 cv
347.215 261.745 346.96 261.609 346.672 261.558 cv
346.383 261.507 346.103 261.55 345.832 261.685 cv
345.56 261.821 345.229 262.084 344.839 262.475 cv
343.439 263.875 li
345.535 265.97 li
cp
f
351.11 261.821 mo
345.034 255.746 li
346.248 254.532 li
351.984 257.4 li
352.527 257.672 352.917 257.875 353.171 258.011 cv
353.019 257.723 352.807 257.29 352.518 256.713 cv
349.752 251.028 li
350.83 249.95 li
356.905 256.026 li
356.133 256.798 li
351.05 251.715 li
354.368 258.563 li
353.647 259.284 li
346.723 255.873 li
351.89 261.04 li
351.11 261.821 li
cp
f
358.22 254.71 mo
352.145 248.635 li
354.835 245.945 li
355.378 245.402 355.844 245.054 356.235 244.885 cv
356.625 244.715 357.049 244.681 357.49 244.783 cv
357.932 244.885 358.322 245.105 358.653 245.436 cv
359.094 245.877 359.315 246.386 359.323 246.955 cv
359.34 247.532 359.094 248.151 358.594 248.805 cv
358.907 248.694 359.171 248.635 359.383 248.627 cv
359.841 248.61 360.325 248.652 360.859 248.762 cv
363.566 249.365 li
362.556 250.374 li
360.494 249.908 li
359.9 249.789 359.425 249.704 359.077 249.662 cv
358.729 249.619 358.458 249.619 358.263 249.662 cv
358.067 249.704 357.889 249.781 357.737 249.865 cv
357.626 249.942 357.456 250.078 357.253 250.281 cv
356.319 251.215 li
359.018 253.913 li
358.22 254.71 li
cp
355.624 250.519 mo
357.355 248.788 li
357.72 248.423 357.974 248.1 358.101 247.82 cv
358.229 247.54 358.271 247.26 358.212 246.98 cv
358.144 246.709 358.025 246.471 357.821 246.268 cv
357.541 245.988 357.193 245.86 356.803 245.877 cv
356.404 245.903 355.98 246.14 355.539 246.582 cv
353.613 248.508 li
355.624 250.519 li
cp
f
358.797 243.578 mo
358.076 242.857 li
362.013 238.919 li
362.599 239.505 li
362.624 240.311 362.785 241.253 363.091 242.305 cv
363.388 243.366 363.795 244.367 364.304 245.283 cv
364.661 245.945 365.127 246.599 365.696 247.235 cv
364.924 248.007 li
364.457 247.523 363.973 246.853 363.473 245.996 cv
362.972 245.139 362.573 244.231 362.285 243.264 cv
361.996 242.297 361.826 241.414 361.776 240.599 cv
358.797 243.578 li
cp
f
387.656 274.875 mo
379.968 270.411 li
380.792 269.588 li
385.696 272.643 li
386.222 272.965 386.723 273.296 387.206 273.627 cv
386.714 272.83 386.426 272.371 386.358 272.236 cv
383.405 266.975 li
384.372 266.007 li
388.318 268.205 li
389.294 268.757 390.168 269.325 390.94 269.894 cv
390.634 269.435 390.295 268.892 389.922 268.264 cv
386.969 263.411 li
387.783 262.596 li
392.187 270.343 li
391.415 271.116 li
385.509 267.772 li
385.009 267.492 384.712 267.314 384.61 267.246 cv
384.822 267.594 385 267.891 385.145 268.137 cv
388.479 274.051 li
387.656 274.875 li
cp
f
395.666 266.864 mo
387.979 262.401 li
388.802 261.578 li
393.706 264.633 li
394.232 264.955 394.733 265.286 395.217 265.617 cv
394.724 264.819 394.436 264.361 394.368 264.226 cv
391.415 258.965 li
392.382 257.997 li
396.328 260.195 li
397.304 260.747 398.178 261.315 398.95 261.884 cv
398.645 261.425 398.305 260.882 397.932 260.254 cv
394.979 255.401 li
395.794 254.586 li
400.197 262.333 li
399.425 263.105 li
393.519 259.762 li
393.019 259.482 392.722 259.304 392.62 259.236 cv
392.832 259.584 393.01 259.881 393.155 260.127 cv
396.489 266.041 li
395.666 266.864 li
cp
f
402.59 259.94 mo
396.515 253.865 li
397.728 252.652 li
403.464 255.52 li
404.007 255.791 404.398 255.995 404.652 256.131 cv
404.499 255.842 404.287 255.409 403.999 254.832 cv
401.233 249.147 li
402.31 248.07 li
408.386 254.145 li
407.614 254.917 li
402.531 249.834 li
405.849 256.682 li
405.127 257.403 li
398.203 253.992 li
403.371 259.16 li
402.59 259.94 li
cp
f
407.554 251.532 mo
408.173 250.708 li
408.657 251.158 409.073 251.387 409.395 251.404 cv
409.718 251.421 410.015 251.294 410.295 251.014 cv
410.49 250.819 410.617 250.607 410.677 250.361 cv
410.728 250.123 410.702 249.894 410.6 249.673 cv
410.498 249.47 410.278 249.181 409.921 248.825 cv
405.738 244.642 li
406.536 243.844 li
410.677 247.985 li
411.186 248.494 411.517 248.961 411.669 249.351 cv
411.831 249.75 411.848 250.157 411.729 250.564 cv
411.593 250.972 411.355 251.362 410.999 251.718 cv
410.465 252.253 409.913 252.516 409.327 252.49 cv
408.734 252.473 408.148 252.159 407.554 251.532 cv
cp
f
412.034 247.306 mo
412.756 246.466 li
413.188 246.797 413.613 246.95 414.011 246.924 cv
414.419 246.907 414.767 246.746 415.064 246.449 cv
415.42 246.093 415.59 245.651 415.573 245.125 cv
415.547 244.608 415.318 244.124 414.868 243.674 cv
414.444 243.25 413.986 243.046 413.502 243.038 cv
413.019 243.029 412.577 243.216 412.196 243.598 cv
411.958 243.835 411.797 244.115 411.712 244.421 cv
411.627 244.726 411.61 245.015 411.678 245.286 cv
410.889 245.906 li
408.352 242.198 li
411.372 239.177 li
412.085 239.89 li
409.667 242.308 li
410.965 244.268 li
411.075 243.649 411.33 243.14 411.729 242.741 cv
412.255 242.215 412.891 241.952 413.621 241.952 cv
414.359 241.96 415.013 242.24 415.59 242.817 cv
416.141 243.369 416.455 244.005 416.532 244.726 cv
416.633 245.609 416.345 246.373 415.666 247.051 cv
415.114 247.603 414.512 247.9 413.859 247.942 cv
413.197 247.993 412.594 247.781 412.034 247.306 cv
cp
f
438.532 268.83 mo
437.819 268.117 li
440.39 265.546 li
442.639 267.795 li
442.571 268.508 442.401 269.152 442.13 269.729 cv
441.858 270.306 441.51 270.807 441.069 271.248 cv
440.467 271.851 439.805 272.275 439.067 272.504 cv
438.32 272.742 437.59 272.742 436.86 272.504 cv
436.122 272.275 435.46 271.851 434.866 271.257 cv
434.272 270.663 433.84 269.992 433.585 269.229 cv
433.322 268.474 433.297 267.735 433.509 267.014 cv
433.721 266.31 434.128 265.648 434.739 265.037 cv
435.172 264.604 435.647 264.282 436.139 264.061 cv
436.64 263.849 437.106 263.773 437.565 263.824 cv
438.023 263.875 438.507 264.053 439.024 264.35 cv
438.498 265.283 li
438.099 265.071 437.743 264.935 437.429 264.893 cv
437.123 264.859 436.784 264.91 436.419 265.054 cv
436.063 265.207 435.732 265.419 435.426 265.724 cv
435.053 266.098 434.798 266.471 434.637 266.853 cv
434.484 267.243 434.417 267.6 434.434 267.939 cv
434.451 268.295 434.518 268.618 434.654 268.923 cv
434.875 269.449 435.206 269.933 435.647 270.374 cv
436.19 270.917 436.733 271.274 437.285 271.452 cv
437.836 271.63 438.379 271.63 438.914 271.452 cv
439.448 271.274 439.907 270.985 440.314 270.578 cv
440.653 270.239 440.925 269.831 441.12 269.365 cv
441.315 268.898 441.434 268.508 441.459 268.177 cv
440.322 267.04 li
438.532 268.83 li
cp
f
444.641 267.489 mo
438.566 261.414 li
440.848 259.131 li
441.307 258.673 441.748 258.368 442.147 258.206 cv
442.554 258.054 442.961 258.02 443.377 258.113 cv
443.784 258.215 444.141 258.402 444.412 258.673 cv
444.675 258.936 444.845 259.259 444.938 259.623 cv
445.023 259.997 444.998 260.396 444.854 260.811 cv
445.329 260.557 445.795 260.463 446.254 260.514 cv
446.712 260.582 447.119 260.786 447.467 261.134 cv
447.755 261.422 447.959 261.762 448.078 262.118 cv
448.205 262.483 448.239 262.822 448.205 263.128 cv
448.163 263.442 448.036 263.756 447.84 264.087 cv
447.637 264.426 447.348 264.782 446.958 265.173 cv
444.641 267.489 li
cp
441.926 263.162 mo
443.241 261.847 li
443.598 261.49 443.835 261.219 443.937 261.015 cv
444.081 260.752 444.132 260.497 444.09 260.251 cv
444.056 260.014 443.937 259.776 443.725 259.564 cv
443.521 259.36 443.292 259.233 443.046 259.174 cv
442.792 259.123 442.554 259.157 442.316 259.276 cv
442.079 259.411 441.739 259.683 441.307 260.116 cv
440.093 261.329 li
441.926 263.162 li
cp
444.735 265.97 mo
446.245 264.46 li
446.5 264.205 446.678 264.01 446.763 263.875 cv
446.907 263.662 447.009 263.459 447.06 263.255 cv
447.102 263.06 447.094 262.848 447.026 262.61 cv
446.966 262.381 446.839 262.169 446.635 261.965 cv
446.415 261.745 446.16 261.609 445.872 261.558 cv
445.583 261.507 445.303 261.55 445.032 261.685 cv
444.76 261.821 444.429 262.084 444.039 262.475 cv
442.639 263.875 li
444.735 265.97 li
cp
f
450.31 261.821 mo
444.234 255.746 li
445.448 254.532 li
451.184 257.4 li
451.727 257.672 452.117 257.875 452.372 258.011 cv
452.219 257.723 452.007 257.29 451.718 256.713 cv
448.952 251.028 li
450.03 249.95 li
456.105 256.026 li
455.333 256.798 li
450.25 251.715 li
453.568 258.563 li
452.847 259.284 li
445.923 255.873 li
451.09 261.04 li
450.31 261.821 li
cp
f
457.42 254.71 mo
451.345 248.635 li
454.035 245.945 li
454.578 245.402 455.044 245.054 455.435 244.885 cv
455.825 244.715 456.249 244.681 456.69 244.783 cv
457.132 244.885 457.522 245.105 457.853 245.436 cv
458.294 245.877 458.515 246.386 458.523 246.955 cv
458.54 247.532 458.294 248.151 457.794 248.805 cv
458.107 248.694 458.371 248.635 458.583 248.627 cv
459.041 248.61 459.525 248.652 460.059 248.762 cv
462.766 249.365 li
461.756 250.374 li
459.694 249.908 li
459.1 249.789 458.625 249.704 458.277 249.662 cv
457.929 249.619 457.658 249.619 457.463 249.662 cv
457.267 249.704 457.089 249.781 456.937 249.865 cv
456.826 249.942 456.657 250.078 456.453 250.281 cv
455.519 251.215 li
458.218 253.913 li
457.42 254.71 li
cp
454.824 250.519 mo
456.555 248.788 li
456.92 248.423 457.174 248.1 457.301 247.82 cv
457.429 247.54 457.471 247.26 457.412 246.98 cv
457.344 246.709 457.225 246.471 457.021 246.268 cv
456.741 245.988 456.393 245.86 456.003 245.877 cv
455.604 245.903 455.18 246.14 454.739 246.582 cv
452.813 248.508 li
454.824 250.519 li
cp
f
465.617 246.514 mo
464.166 245.063 li
461.536 247.693 li
460.848 247.006 li
459.677 240.302 li
460.288 239.692 li
464.225 243.629 li
465.048 242.806 li
465.736 243.493 li
464.913 244.316 li
466.364 245.767 li
465.617 246.514 li
cp
463.479 244.375 mo
460.738 241.635 li
461.578 246.276 li
463.479 244.375 li
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 227.485 mo
494.084 227.485 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
29.3166 231.782 mo
28.2606 231.782 li
28.2606 225.062 li
27.9966 225.302 27.6606 225.554 27.2526 225.794 cv
26.8446 226.034 26.4726 226.214 26.1486 226.334 cv
26.1486 225.314 li
26.7366 225.038 27.2526 224.702 27.6966 224.306 cv
28.1286 223.922 28.4406 223.538 28.6326 223.154 cv
29.3166 223.154 li
29.3166 231.782 li
cp
f
32.0166 227.546 mo
32.0166 226.538 32.1126 225.722 32.3286 225.098 cv
32.5326 224.474 32.8446 223.994 33.2526 223.658 cv
33.6606 223.322 34.1886 223.154 34.8126 223.154 cv
35.2686 223.154 35.6766 223.25 36.0246 223.442 cv
36.3606 223.634 36.6486 223.898 36.8766 224.246 cv
37.1046 224.594 37.2846 225.014 37.4166 225.518 cv
37.5366 226.022 37.6086 226.706 37.6086 227.546 cv
37.6086 228.554 37.5006 229.37 37.2966 229.994 cv
37.0926 230.618 36.7806 231.086 36.3726 231.422 cv
35.9646 231.758 35.4366 231.914 34.8126 231.914 cv
33.9726 231.914 33.3246 231.626 32.8566 231.038 cv
32.2926 230.33 32.0166 229.166 32.0166 227.546 cv
cp
33.0966 227.546 mo
33.0966 228.962 33.2526 229.898 33.5886 230.366 cv
33.9126 230.834 34.3206 231.062 34.8006 231.062 cv
35.2806 231.062 35.6886 230.834 36.0246 230.366 cv
36.3606 229.898 36.5286 228.962 36.5286 227.546 cv
36.5286 226.13 36.3606 225.194 36.0246 224.726 cv
35.6886 224.27 35.2806 224.03 34.8006 224.03 cv
34.3086 224.03 33.9246 224.234 33.6366 224.642 cv
33.2766 225.17 33.0966 226.142 33.0966 227.546 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 204.129 mo
494.084 204.129 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
30.8766 207.418 mo
30.8766 208.426 li
25.2006 208.426 li
25.1886 208.174 25.2366 207.934 25.3326 207.694 cv
25.4766 207.31 25.7046 206.938 26.0166 206.554 cv
26.3286 206.182 26.7966 205.75 27.3966 205.246 cv
28.3326 204.49 28.9566 203.89 29.2926 203.434 cv
29.6166 202.99 29.7846 202.57 29.7846 202.162 cv
29.7846 201.754 29.6286 201.394 29.3286 201.106 cv
29.0286 200.818 28.6446 200.674 28.1646 200.674 cv
27.6606 200.674 27.2526 200.83 26.9526 201.13 cv
26.6406 201.442 26.4846 201.862 26.4846 202.402 cv
25.4046 202.282 li
25.4766 201.478 25.7526 200.866 26.2326 200.434 cv
26.7126 200.014 27.3726 199.798 28.1886 199.798 cv
29.0046 199.798 29.6646 200.038 30.1446 200.494 cv
30.6246 200.95 30.8646 201.514 30.8646 202.186 cv
30.8646 202.534 30.7926 202.87 30.6486 203.206 cv
30.5046 203.542 30.2766 203.89 29.9526 204.25 cv
29.6286 204.622 29.0886 205.126 28.3326 205.762 cv
27.6966 206.29 27.2886 206.65 27.1086 206.842 cv
26.9286 207.034 26.7846 207.226 26.6646 207.418 cv
30.8766 207.418 li
cp
f
32.0166 204.19 mo
32.0166 203.182 32.1126 202.366 32.3286 201.742 cv
32.5326 201.118 32.8446 200.638 33.2526 200.302 cv
33.6606 199.966 34.1886 199.798 34.8126 199.798 cv
35.2686 199.798 35.6766 199.894 36.0246 200.086 cv
36.3606 200.278 36.6486 200.542 36.8766 200.89 cv
37.1046 201.238 37.2846 201.658 37.4166 202.162 cv
37.5366 202.666 37.6086 203.35 37.6086 204.19 cv
37.6086 205.198 37.5006 206.014 37.2966 206.638 cv
37.0926 207.262 36.7806 207.73 36.3726 208.066 cv
35.9646 208.402 35.4366 208.558 34.8126 208.558 cv
33.9726 208.558 33.3246 208.27 32.8566 207.682 cv
32.2926 206.974 32.0166 205.81 32.0166 204.19 cv
cp
33.0966 204.19 mo
33.0966 205.606 33.2526 206.542 33.5886 207.01 cv
33.9126 207.478 34.3206 207.706 34.8006 207.706 cv
35.2806 207.706 35.6886 207.478 36.0246 207.01 cv
36.3606 206.542 36.5286 205.606 36.5286 204.19 cv
36.5286 202.774 36.3606 201.838 36.0246 201.37 cv
35.6886 200.914 35.2806 200.674 34.8006 200.674 cv
34.3086 200.674 33.9246 200.878 33.6366 201.286 cv
33.2766 201.814 33.0966 202.786 33.0966 204.19 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 180.773 mo
494.084 180.773 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.3446 182.802 mo
26.4006 182.658 li
26.5206 183.258 26.7246 183.69 27.0126 183.954 cv
27.3006 184.218 27.6606 184.35 28.0806 184.35 cv
28.5726 184.35 28.9926 184.182 29.3286 183.834 cv
29.6646 183.498 29.8446 183.066 29.8446 182.562 cv
29.8446 182.082 29.6766 181.674 29.3646 181.362 cv
29.0526 181.05 28.6446 180.882 28.1646 180.882 cv
27.9606 180.882 27.7086 180.93 27.4206 181.002 cv
27.5406 180.078 li
27.7086 180.09 li
28.1526 180.09 28.5606 179.982 28.9206 179.742 cv
29.2806 179.502 29.4606 179.142 29.4606 178.65 cv
29.4606 178.266 29.3286 177.954 29.0646 177.702 cv
28.8006 177.45 28.4646 177.318 28.0566 177.318 cv
27.6486 177.318 27.3006 177.45 27.0246 177.702 cv
26.7486 177.966 26.5806 178.35 26.5086 178.854 cv
25.4526 178.674 li
25.5726 177.966 25.8726 177.414 26.3286 177.03 cv
26.7846 176.646 27.3486 176.442 28.0326 176.442 cv
28.5006 176.442 28.9326 176.55 29.3286 176.754 cv
29.7126 176.958 30.0126 177.234 30.2286 177.57 cv
30.4446 177.918 30.5526 178.29 30.5526 178.674 cv
30.5526 179.058 30.4446 179.394 30.2526 179.694 cv
30.0486 180.006 29.7486 180.246 29.3646 180.414 cv
29.8686 180.534 30.2526 180.786 30.5406 181.146 cv
30.8286 181.518 30.9726 181.986 30.9726 182.538 cv
30.9726 183.282 30.6966 183.918 30.1446 184.434 cv
29.5926 184.962 28.9086 185.214 28.0806 185.214 cv
27.3126 185.214 26.6886 184.998 26.1966 184.542 cv
25.6926 184.098 25.4166 183.522 25.3446 182.802 cv
cp
f
32.0166 180.834 mo
32.0166 179.826 32.1126 179.01 32.3286 178.386 cv
32.5326 177.762 32.8446 177.282 33.2526 176.946 cv
33.6606 176.61 34.1886 176.442 34.8126 176.442 cv
35.2686 176.442 35.6766 176.538 36.0246 176.73 cv
36.3606 176.922 36.6486 177.186 36.8766 177.534 cv
37.1046 177.882 37.2846 178.302 37.4166 178.806 cv
37.5366 179.31 37.6086 179.994 37.6086 180.834 cv
37.6086 181.842 37.5006 182.658 37.2966 183.282 cv
37.0926 183.906 36.7806 184.374 36.3726 184.71 cv
35.9646 185.046 35.4366 185.202 34.8126 185.202 cv
33.9726 185.202 33.3246 184.914 32.8566 184.326 cv
32.2926 183.618 32.0166 182.454 32.0166 180.834 cv
cp
33.0966 180.834 mo
33.0966 182.25 33.2526 183.186 33.5886 183.654 cv
33.9126 184.122 34.3206 184.35 34.8006 184.35 cv
35.2806 184.35 35.6886 184.122 36.0246 183.654 cv
36.3606 183.186 36.5286 182.25 36.5286 180.834 cv
36.5286 179.418 36.3606 178.482 36.0246 178.014 cv
35.6886 177.558 35.2806 177.318 34.8006 177.318 cv
34.3086 177.318 33.9246 177.522 33.6366 177.93 cv
33.2766 178.458 33.0966 179.43 33.0966 180.834 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 157.417 mo
494.084 157.417 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
28.7166 161.713 mo
28.7166 159.661 li
24.9966 159.661 li
24.9966 158.689 li
28.9086 153.121 li
29.7726 153.121 li
29.7726 158.689 li
30.9366 158.689 li
30.9366 159.661 li
29.7726 159.661 li
29.7726 161.713 li
28.7166 161.713 li
cp
28.7166 158.689 mo
28.7166 154.813 li
26.0286 158.689 li
28.7166 158.689 li
cp
f
32.0166 157.477 mo
32.0166 156.469 32.1126 155.653 32.3286 155.029 cv
32.5326 154.405 32.8446 153.925 33.2526 153.589 cv
33.6606 153.253 34.1886 153.085 34.8126 153.085 cv
35.2686 153.085 35.6766 153.181 36.0246 153.373 cv
36.3606 153.565 36.6486 153.829 36.8766 154.177 cv
37.1046 154.525 37.2846 154.945 37.4166 155.449 cv
37.5366 155.953 37.6086 156.637 37.6086 157.477 cv
37.6086 158.485 37.5006 159.301 37.2966 159.925 cv
37.0926 160.549 36.7806 161.017 36.3726 161.353 cv
35.9646 161.689 35.4366 161.845 34.8126 161.845 cv
33.9726 161.845 33.3246 161.557 32.8566 160.969 cv
32.2926 160.261 32.0166 159.097 32.0166 157.477 cv
cp
33.0966 157.477 mo
33.0966 158.893 33.2526 159.829 33.5886 160.297 cv
33.9126 160.765 34.3206 160.993 34.8006 160.993 cv
35.2806 160.993 35.6886 160.765 36.0246 160.297 cv
36.3606 159.829 36.5286 158.893 36.5286 157.477 cv
36.5286 156.061 36.3606 155.125 36.0246 154.657 cv
35.6886 154.201 35.2806 153.961 34.8006 153.961 cv
34.3086 153.961 33.9246 154.165 33.6366 154.573 cv
33.2766 155.101 33.0966 156.073 33.0966 157.477 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 134.061 mo
494.084 134.061 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.3446 136.101 mo
26.4486 136.017 li
26.5206 136.557 26.7126 136.965 27.0126 137.229 cv
27.3126 137.505 27.6726 137.637 28.0926 137.637 cv
28.5966 137.637 29.0286 137.445 29.3886 137.061 cv
29.7366 136.677 29.9166 136.173 29.9166 135.537 cv
29.9166 134.937 29.7366 134.469 29.4006 134.121 cv
29.0646 133.773 28.6206 133.593 28.0806 133.593 cv
27.7446 133.593 27.4326 133.677 27.1566 133.833 cv
26.8806 133.989 26.6646 134.181 26.5206 134.421 cv
25.5246 134.301 li
26.3526 129.885 li
30.6246 129.885 li
30.6246 130.893 li
27.2046 130.893 li
26.7366 133.197 li
27.2526 132.837 27.7926 132.657 28.3566 132.657 cv
29.1006 132.657 29.7366 132.921 30.2526 133.437 cv
30.7686 133.965 31.0326 134.625 31.0326 135.441 cv
31.0326 136.221 30.8046 136.893 30.3486 137.457 cv
29.7966 138.153 29.0526 138.489 28.0926 138.489 cv
27.3126 138.489 26.6766 138.273 26.1846 137.841 cv
25.6806 137.409 25.4046 136.833 25.3446 136.101 cv
cp
f
32.0166 134.121 mo
32.0166 133.113 32.1126 132.297 32.3286 131.673 cv
32.5326 131.049 32.8446 130.569 33.2526 130.233 cv
33.6606 129.897 34.1886 129.729 34.8126 129.729 cv
35.2686 129.729 35.6766 129.825 36.0246 130.017 cv
36.3606 130.209 36.6486 130.473 36.8766 130.821 cv
37.1046 131.169 37.2846 131.589 37.4166 132.093 cv
37.5366 132.597 37.6086 133.281 37.6086 134.121 cv
37.6086 135.129 37.5006 135.945 37.2966 136.569 cv
37.0926 137.193 36.7806 137.661 36.3726 137.997 cv
35.9646 138.333 35.4366 138.489 34.8126 138.489 cv
33.9726 138.489 33.3246 138.201 32.8566 137.613 cv
32.2926 136.905 32.0166 135.741 32.0166 134.121 cv
cp
33.0966 134.121 mo
33.0966 135.537 33.2526 136.473 33.5886 136.941 cv
33.9126 137.409 34.3206 137.637 34.8006 137.637 cv
35.2806 137.637 35.6886 137.409 36.0246 136.941 cv
36.3606 136.473 36.5286 135.537 36.5286 134.121 cv
36.5286 132.705 36.3606 131.769 36.0246 131.301 cv
35.6886 130.845 35.2806 130.605 34.8006 130.605 cv
34.3086 130.605 33.9246 130.809 33.6366 131.217 cv
33.2766 131.745 33.0966 132.717 33.0966 134.121 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 110.704 mo
494.084 110.704 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
30.8166 108.509 mo
29.7606 108.593 li
29.6646 108.185 29.5326 107.885 29.3646 107.693 cv
29.0766 107.405 28.7166 107.249 28.3086 107.249 cv
27.9726 107.249 27.6726 107.345 27.4206 107.525 cv
27.0846 107.765 26.8326 108.125 26.6406 108.581 cv
26.4486 109.049 26.3406 109.709 26.3406 110.573 cv
26.5926 110.189 26.9046 109.913 27.2766 109.721 cv
27.6366 109.529 28.0206 109.433 28.4286 109.433 cv
29.1246 109.433 29.7246 109.697 30.2166 110.213 cv
30.7086 110.729 30.9606 111.401 30.9606 112.217 cv
30.9606 112.757 30.8406 113.261 30.6126 113.717 cv
30.3726 114.185 30.0606 114.533 29.6526 114.773 cv
29.2446 115.013 28.7886 115.133 28.2726 115.133 cv
27.3846 115.133 26.6766 114.821 26.1246 114.173 cv
25.5726 113.537 25.2966 112.469 25.2966 110.981 cv
25.2966 109.325 25.5966 108.125 26.2086 107.357 cv
26.7366 106.709 27.4566 106.373 28.3686 106.373 cv
29.0406 106.373 29.6046 106.565 30.0366 106.949 cv
30.4686 107.333 30.7206 107.849 30.8166 108.509 cv
cp
26.5086 112.217 mo
26.5086 112.577 26.5806 112.925 26.7366 113.261 cv
26.8806 113.597 27.0966 113.849 27.3846 114.017 cv
27.6606 114.197 27.9486 114.281 28.2606 114.281 cv
28.6926 114.281 29.0766 114.101 29.4006 113.741 cv
29.7126 113.381 29.8806 112.901 29.8806 112.277 cv
29.8806 111.689 29.7126 111.221 29.4006 110.873 cv
29.0886 110.537 28.6926 110.357 28.2126 110.357 cv
27.7326 110.357 27.3366 110.537 27.0006 110.873 cv
26.6646 111.221 26.5086 111.665 26.5086 112.217 cv
cp
f
32.0166 110.765 mo
32.0166 109.757 32.1126 108.941 32.3286 108.317 cv
32.5326 107.693 32.8446 107.213 33.2526 106.877 cv
33.6606 106.541 34.1886 106.373 34.8126 106.373 cv
35.2686 106.373 35.6766 106.469 36.0246 106.661 cv
36.3606 106.853 36.6486 107.117 36.8766 107.465 cv
37.1046 107.813 37.2846 108.233 37.4166 108.737 cv
37.5366 109.241 37.6086 109.925 37.6086 110.765 cv
37.6086 111.773 37.5006 112.589 37.2966 113.213 cv
37.0926 113.837 36.7806 114.305 36.3726 114.641 cv
35.9646 114.977 35.4366 115.133 34.8126 115.133 cv
33.9726 115.133 33.3246 114.845 32.8566 114.257 cv
32.2926 113.549 32.0166 112.385 32.0166 110.765 cv
cp
33.0966 110.765 mo
33.0966 112.181 33.2526 113.117 33.5886 113.585 cv
33.9126 114.053 34.3206 114.281 34.8006 114.281 cv
35.2806 114.281 35.6886 114.053 36.0246 113.585 cv
36.3606 113.117 36.5286 112.181 36.5286 110.765 cv
36.5286 109.349 36.3606 108.413 36.0246 107.945 cv
35.6886 107.489 35.2806 107.249 34.8006 107.249 cv
34.3086 107.249 33.9246 107.453 33.6366 107.861 cv
33.2766 108.389 33.0966 109.361 33.0966 110.765 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 87.3483 mo
494.084 87.3483 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.4046 84.1812 mo
25.4046 83.1612 li
30.9726 83.1612 li
30.9726 83.9892 li
30.4206 84.5772 29.8686 85.3572 29.3406 86.3172 cv
28.8006 87.2772 28.3806 88.2732 28.0926 89.2812 cv
27.8766 90.0012 27.7446 90.7932 27.6966 91.6452 cv
26.6046 91.6452 li
26.6166 90.9732 26.7486 90.1572 27.0006 89.1972 cv
27.2526 88.2372 27.6126 87.3132 28.0926 86.4252 cv
28.5726 85.5372 29.0766 84.7932 29.6166 84.1812 cv
25.4046 84.1812 li
cp
f
32.0166 87.4092 mo
32.0166 86.4012 32.1126 85.5852 32.3286 84.9612 cv
32.5326 84.3372 32.8446 83.8572 33.2526 83.5212 cv
33.6606 83.1852 34.1886 83.0172 34.8126 83.0172 cv
35.2686 83.0172 35.6766 83.1132 36.0246 83.3052 cv
36.3606 83.4972 36.6486 83.7612 36.8766 84.1092 cv
37.1046 84.4572 37.2846 84.8772 37.4166 85.3812 cv
37.5366 85.8852 37.6086 86.5692 37.6086 87.4092 cv
37.6086 88.4172 37.5006 89.2332 37.2966 89.8572 cv
37.0926 90.4812 36.7806 90.9492 36.3726 91.2852 cv
35.9646 91.6212 35.4366 91.7772 34.8126 91.7772 cv
33.9726 91.7772 33.3246 91.4892 32.8566 90.9012 cv
32.2926 90.1932 32.0166 89.0292 32.0166 87.4092 cv
cp
33.0966 87.4092 mo
33.0966 88.8252 33.2526 89.7612 33.5886 90.2292 cv
33.9126 90.6972 34.3206 90.9252 34.8006 90.9252 cv
35.2806 90.9252 35.6886 90.6972 36.0246 90.2292 cv
36.3606 89.7612 36.5286 88.8252 36.5286 87.4092 cv
36.5286 85.9932 36.3606 85.0572 36.0246 84.5892 cv
35.6886 84.1332 35.2806 83.8932 34.8006 83.8932 cv
34.3086 83.8932 33.9246 84.0972 33.6366 84.5052 cv
33.2766 85.0332 33.0966 86.0052 33.0966 87.4092 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 63.9922 mo
494.084 63.9922 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
26.9646 63.6331 mo
26.5206 63.4771 26.1966 63.2491 25.9806 62.9491 cv
25.7646 62.6611 25.6686 62.3011 25.6686 61.8811 cv
25.6686 61.2571 25.8846 60.7411 26.3406 60.3091 cv
26.7966 59.8771 27.3966 59.6611 28.1406 59.6611 cv
28.8846 59.6611 29.4966 59.8891 29.9526 60.3211 cv
30.4086 60.7531 30.6366 61.2811 30.6366 61.9051 cv
30.6366 62.3131 30.5286 62.6611 30.3246 62.9491 cv
30.1086 63.2491 29.7966 63.4771 29.3646 63.6331 cv
29.8926 63.8011 30.2886 64.0771 30.5646 64.4611 cv
30.8406 64.8451 30.9846 65.3011 30.9846 65.8291 cv
30.9846 66.5731 30.7206 67.1851 30.2046 67.6771 cv
29.6766 68.1811 28.9926 68.4211 28.1526 68.4211 cv
27.3006 68.4211 26.6166 68.1811 26.1006 67.6771 cv
25.5846 67.1851 25.3326 66.5611 25.3326 65.8051 cv
25.3326 65.2531 25.4646 64.7851 25.7526 64.4011 cv
26.0286 64.0291 26.4366 63.7771 26.9646 63.6331 cv
cp
26.7486 61.8451 mo
26.7486 62.2531 26.8806 62.5891 27.1446 62.8411 cv
27.4086 63.1051 27.7446 63.2251 28.1646 63.2251 cv
28.5726 63.2251 28.8966 63.1051 29.1606 62.8411 cv
29.4246 62.5891 29.5566 62.2771 29.5566 61.9051 cv
29.5566 61.5211 29.4126 61.1971 29.1486 60.9331 cv
28.8846 60.6691 28.5486 60.5371 28.1526 60.5371 cv
27.7446 60.5371 27.4086 60.6691 27.1446 60.9211 cv
26.8806 61.1851 26.7486 61.4851 26.7486 61.8451 cv
cp
26.4126 65.8051 mo
26.4126 66.1171 26.4846 66.4051 26.6286 66.6811 cv
26.7726 66.9691 26.9766 67.1851 27.2646 67.3411 cv
27.5406 67.4971 27.8406 67.5691 28.1646 67.5691 cv
28.6686 67.5691 29.0766 67.4131 29.4126 67.0891 cv
29.7366 66.7651 29.9046 66.3451 29.9046 65.8411 cv
29.9046 65.3371 29.7366 64.9291 29.4006 64.5931 cv
29.0646 64.2571 28.6326 64.0891 28.1286 64.0891 cv
27.6246 64.0891 27.2166 64.2571 26.8926 64.5811 cv
26.5686 64.9171 26.4126 65.3251 26.4126 65.8051 cv
cp
f
32.0166 64.0531 mo
32.0166 63.0451 32.1126 62.2291 32.3286 61.6051 cv
32.5326 60.9811 32.8446 60.5011 33.2526 60.1651 cv
33.6606 59.8291 34.1886 59.6611 34.8126 59.6611 cv
35.2686 59.6611 35.6766 59.7571 36.0246 59.9491 cv
36.3606 60.1411 36.6486 60.4051 36.8766 60.7531 cv
37.1046 61.1011 37.2846 61.5211 37.4166 62.0251 cv
37.5366 62.5291 37.6086 63.2131 37.6086 64.0531 cv
37.6086 65.0611 37.5006 65.8771 37.2966 66.5011 cv
37.0926 67.1251 36.7806 67.5931 36.3726 67.9291 cv
35.9646 68.2651 35.4366 68.4211 34.8126 68.4211 cv
33.9726 68.4211 33.3246 68.1331 32.8566 67.5451 cv
32.2926 66.8371 32.0166 65.6731 32.0166 64.0531 cv
cp
33.0966 64.0531 mo
33.0966 65.4691 33.2526 66.4051 33.5886 66.8731 cv
33.9126 67.3411 34.3206 67.5691 34.8006 67.5691 cv
35.2806 67.5691 35.6886 67.3411 36.0246 66.8731 cv
36.3606 66.4051 36.5286 65.4691 36.5286 64.0531 cv
36.5286 62.6371 36.3606 61.7011 36.0246 61.2331 cv
35.6886 60.7771 35.2806 60.5371 34.8006 60.5371 cv
34.3086 60.5371 33.9246 60.7411 33.6366 61.1491 cv
33.2766 61.6771 33.0966 62.6491 33.0966 64.0531 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 40.6361 mo
494.084 40.6361 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
25.5006 42.941 mo
26.5086 42.857 li
26.5926 43.337 26.7606 43.673 27.0006 43.889 cv
27.2406 44.105 27.5526 44.213 27.9366 44.213 cv
28.2486 44.213 28.5366 44.141 28.7766 43.997 cv
29.0166 43.853 29.2206 43.649 29.3766 43.397 cv
29.5326 43.157 29.6646 42.821 29.7726 42.389 cv
29.8806 41.969 29.9406 41.537 29.9406 41.105 cv
29.9406 41.057 29.9286 40.985 29.9286 40.889 cv
29.7126 41.225 29.4246 41.501 29.0646 41.705 cv
28.7046 41.921 28.3086 42.017 27.8766 42.017 cv
27.1686 42.017 26.5686 41.765 26.0766 41.249 cv
25.5846 40.733 25.3446 40.049 25.3446 39.209 cv
25.3446 38.345 25.5966 37.637 26.1126 37.109 cv
26.6166 36.581 27.2646 36.305 28.0446 36.305 cv
28.5966 36.305 29.1006 36.461 29.5686 36.761 cv
30.0246 37.061 30.3846 37.493 30.6246 38.045 cv
30.8646 38.609 30.9846 39.413 30.9846 40.457 cv
30.9846 41.561 30.8646 42.437 30.6246 43.085 cv
30.3846 43.733 30.0366 44.225 29.5686 44.561 cv
29.0886 44.897 28.5366 45.065 27.9126 45.065 cv
27.2406 45.065 26.6886 44.885 26.2566 44.513 cv
25.8246 44.153 25.5726 43.625 25.5006 42.941 cv
cp
29.8206 39.161 mo
29.8206 38.561 29.6526 38.081 29.3286 37.721 cv
29.0046 37.361 28.6206 37.181 28.1646 37.181 cv
27.6966 37.181 27.2886 37.373 26.9406 37.757 cv
26.5926 38.141 26.4246 38.645 26.4246 39.245 cv
26.4246 39.797 26.5806 40.241 26.9166 40.577 cv
27.2406 40.925 27.6486 41.093 28.1406 41.093 cv
28.6206 41.093 29.0286 40.925 29.3406 40.577 cv
29.6526 40.241 29.8206 39.761 29.8206 39.161 cv
cp
f
32.0166 40.697 mo
32.0166 39.689 32.1126 38.873 32.3286 38.249 cv
32.5326 37.625 32.8446 37.145 33.2526 36.809 cv
33.6606 36.473 34.1886 36.305 34.8126 36.305 cv
35.2686 36.305 35.6766 36.401 36.0246 36.593 cv
36.3606 36.785 36.6486 37.049 36.8766 37.397 cv
37.1046 37.745 37.2846 38.165 37.4166 38.669 cv
37.5366 39.173 37.6086 39.857 37.6086 40.697 cv
37.6086 41.705 37.5006 42.521 37.2966 43.145 cv
37.0926 43.769 36.7806 44.237 36.3726 44.573 cv
35.9646 44.909 35.4366 45.065 34.8126 45.065 cv
33.9726 45.065 33.3246 44.777 32.8566 44.189 cv
32.2926 43.481 32.0166 42.317 32.0166 40.697 cv
cp
33.0966 40.697 mo
33.0966 42.113 33.2526 43.049 33.5886 43.517 cv
33.9126 43.985 34.3206 44.213 34.8006 44.213 cv
35.2806 44.213 35.6886 43.985 36.0246 43.517 cv
36.3606 43.049 36.5286 42.113 36.5286 40.697 cv
36.5286 39.281 36.3606 38.345 36.0246 37.877 cv
35.6886 37.421 35.2806 37.181 34.8006 37.181 cv
34.3086 37.181 33.9246 37.385 33.6366 37.793 cv
33.2766 38.321 33.0966 39.293 33.0966 40.697 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.6844 17.28 mo
494.084 17.28 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
22.6448 21.5769 mo
21.5888 21.5769 li
21.5888 14.8569 li
21.3248 15.0969 20.9888 15.3489 20.5808 15.5889 cv
20.1728 15.8289 19.8008 16.0089 19.4768 16.1289 cv
19.4768 15.1089 li
20.0648 14.8329 20.5808 14.4969 21.0248 14.1009 cv
21.4568 13.7169 21.7688 13.3329 21.9608 12.9489 cv
22.6448 12.9489 li
22.6448 21.5769 li
cp
f
25.3447 17.3409 mo
25.3447 16.3329 25.4407 15.5169 25.6567 14.8929 cv
25.8607 14.2689 26.1727 13.7889 26.5807 13.4529 cv
26.9888 13.1169 27.5167 12.9489 28.1407 12.9489 cv
28.5967 12.9489 29.0047 13.0449 29.3528 13.2369 cv
29.6887 13.4289 29.9767 13.6929 30.2047 14.0409 cv
30.4327 14.3889 30.6127 14.8089 30.7447 15.3129 cv
30.8647 15.8169 30.9368 16.5009 30.9368 17.3409 cv
30.9368 18.3489 30.8287 19.1649 30.6247 19.7889 cv
30.4207 20.4129 30.1087 20.8809 29.7008 21.2169 cv
29.2927 21.5529 28.7647 21.7089 28.1407 21.7089 cv
27.3007 21.7089 26.6527 21.4209 26.1847 20.8329 cv
25.6207 20.1249 25.3447 18.9609 25.3447 17.3409 cv
cp
26.4247 17.3409 mo
26.4247 18.7569 26.5807 19.6929 26.9167 20.1609 cv
27.2407 20.6289 27.6487 20.8569 28.1287 20.8569 cv
28.6087 20.8569 29.0167 20.6289 29.3528 20.1609 cv
29.6887 19.6929 29.8568 18.7569 29.8568 17.3409 cv
29.8568 15.9249 29.6887 14.9889 29.3528 14.5209 cv
29.0167 14.0649 28.6087 13.8249 28.1287 13.8249 cv
27.6367 13.8249 27.2528 14.0289 26.9647 14.4369 cv
26.6047 14.9649 26.4247 15.9369 26.4247 17.3409 cv
cp
f
32.0167 17.3409 mo
32.0167 16.3329 32.1127 15.5169 32.3287 14.8929 cv
32.5327 14.2689 32.8447 13.7889 33.2527 13.4529 cv
33.6607 13.1169 34.1887 12.9489 34.8127 12.9489 cv
35.2687 12.9489 35.6767 13.0449 36.0247 13.2369 cv
36.3607 13.4289 36.6487 13.6929 36.8767 14.0409 cv
37.1047 14.3889 37.2847 14.8089 37.4167 15.3129 cv
37.5367 15.8169 37.6087 16.5009 37.6087 17.3409 cv
37.6087 18.3489 37.5007 19.1649 37.2967 19.7889 cv
37.0927 20.4129 36.7807 20.8809 36.3727 21.2169 cv
35.9647 21.5529 35.4367 21.7089 34.8127 21.7089 cv
33.9727 21.7089 33.3247 21.4209 32.8567 20.8329 cv
32.2927 20.1249 32.0167 18.9609 32.0167 17.3409 cv
cp
33.0967 17.3409 mo
33.0967 18.7569 33.2527 19.6929 33.5887 20.1609 cv
33.9127 20.6289 34.3207 20.8569 34.8007 20.8569 cv
35.2807 20.8569 35.6887 20.6289 36.0247 20.1609 cv
36.3607 19.6929 36.5287 18.7569 36.5287 17.3409 cv
36.5287 15.9249 36.3607 14.9889 36.0247 14.5209 cv
35.6887 14.0649 35.2807 13.8249 34.8007 13.8249 cv
34.3087 13.8249 33.9247 14.0289 33.6367 14.4369 cv
33.2767 14.9649 33.0967 15.9369 33.0967 17.3409 cv
cp
f
17.2156 139.341 mo
7.19163 139.341 li
7.19163 138.011 li
17.2156 138.011 li
17.2156 139.341 li
cp
f
17.2156 131.123 mo
16.3056 131.123 li
17.0196 131.585 17.3696 132.257 17.3696 133.153 cv
17.3696 133.741 17.2156 134.273 16.8936 134.749 cv
16.5856 135.239 16.1376 135.617 15.5636 135.883 cv
15.0036 136.149 14.3456 136.275 13.5896 136.275 cv
12.8756 136.275 12.2176 136.163 11.6296 135.911 cv
11.0416 135.673 10.5796 135.309 10.2716 134.833 cv
9.96363 134.357 9.79563 133.811 9.79563 133.209 cv
9.79563 132.775 9.89363 132.383 10.0756 132.033 cv
10.2576 131.697 10.4956 131.417 10.7896 131.207 cv
7.19163 131.207 li
7.19163 129.975 li
17.2156 129.975 li
17.2156 131.123 li
cp
13.5896 135.001 mo
14.5276 135.001 15.2276 134.819 15.6756 134.427 cv
16.1376 134.035 16.3616 133.573 16.3616 133.041 cv
16.3616 132.509 16.1516 132.047 15.7036 131.669 cv
15.2696 131.291 14.5976 131.095 13.7016 131.095 cv
12.7076 131.095 11.9796 131.291 11.5036 131.669 cv
11.0416 132.061 10.8036 132.523 10.8036 133.083 cv
10.8036 133.643 11.0276 134.091 11.4756 134.455 cv
11.9236 134.819 12.6376 135.001 13.5896 135.001 cv
cp
f
14.8776 123.073 mo
15.0316 121.799 li
15.7876 122.009 16.3616 122.387 16.7676 122.919 cv
17.1736 123.465 17.3696 124.151 17.3696 124.991 cv
17.3696 126.055 17.0476 126.909 16.4036 127.525 cv
15.7596 128.141 14.8356 128.449 13.6456 128.449 cv
12.4276 128.449 11.4756 128.141 10.8036 127.511 cv
10.1316 126.895 9.79563 126.069 9.79563 125.061 cv
9.79563 124.095 10.1316 123.297 10.7896 122.681 cv
11.4476 122.065 12.3716 121.757 13.5756 121.757 cv
13.6596 121.757 13.7576 121.771 13.8976 121.771 cv
13.8976 127.189 li
14.7096 127.147 15.3116 126.923 15.7316 126.517 cv
16.1516 126.111 16.3616 125.607 16.3616 124.991 cv
16.3616 124.543 16.2496 124.151 16.0116 123.829 cv
15.7876 123.521 15.4096 123.269 14.8776 123.073 cv
cp
12.8896 127.119 mo
12.8896 123.059 li
12.2736 123.115 11.8256 123.269 11.5176 123.521 cv
11.0416 123.913 10.8036 124.431 10.8036 125.047 cv
10.8036 125.621 10.9996 126.097 11.3776 126.475 cv
11.7556 126.867 12.2596 127.077 12.8896 127.119 cv
cp
f
17.2156 120.259 mo
9.94963 120.259 li
9.94963 119.153 li
10.9856 119.153 li
10.2016 118.621 9.79563 117.851 9.79563 116.843 cv
9.79563 116.409 9.87963 116.003 10.0336 115.639 cv
10.1876 115.275 10.3976 114.995 10.6496 114.813 cv
10.9016 114.631 11.2096 114.505 11.5596 114.435 cv
11.7836 114.393 12.1896 114.365 12.7496 114.365 cv
17.2156 114.365 li
17.2156 115.597 li
12.8056 115.597 li
12.3016 115.597 11.9376 115.653 11.6856 115.737 cv
11.4336 115.835 11.2376 116.003 11.0836 116.241 cv
10.9436 116.493 10.8596 116.773 10.8596 117.095 cv
10.8596 117.627 11.0276 118.089 11.3636 118.467 cv
11.6996 118.845 12.3296 119.027 13.2536 119.027 cv
17.2156 119.027 li
17.2156 120.259 li
cp
f
16.1096 109.787 mo
17.2016 109.605 li
17.2576 109.969 17.2996 110.277 17.2996 110.543 cv
17.2996 110.991 17.2296 111.341 17.1036 111.579 cv
16.9636 111.831 16.7816 111.999 16.5436 112.097 cv
16.3196 112.209 15.8296 112.251 15.0876 112.251 cv
10.9156 112.251 li
10.9156 113.147 li
9.94963 113.147 li
9.94963 112.251 li
8.15763 112.251 li
7.41563 111.033 li
9.94963 111.033 li
9.94963 109.787 li
10.9156 109.787 li
10.9156 111.033 li
15.1576 111.033 li
15.5216 111.033 15.7456 111.019 15.8436 110.963 cv
15.9416 110.921 16.0256 110.851 16.0816 110.753 cv
16.1376 110.655 16.1656 110.515 16.1656 110.333 cv
16.1656 110.193 16.1516 110.011 16.1096 109.787 cv
cp
f
8.60563 108.583 mo
7.19163 108.583 li
7.19163 107.351 li
8.60563 107.351 li
8.60563 108.583 li
cp
17.2156 108.583 mo
9.94963 108.583 li
9.94963 107.351 li
17.2156 107.351 li
17.2156 108.583 li
cp
f
16.1096 102.787 mo
17.2016 102.605 li
17.2576 102.969 17.2996 103.277 17.2996 103.543 cv
17.2996 103.991 17.2296 104.341 17.1036 104.579 cv
16.9636 104.831 16.7816 104.999 16.5436 105.097 cv
16.3196 105.209 15.8296 105.251 15.0876 105.251 cv
10.9156 105.251 li
10.9156 106.147 li
9.94963 106.147 li
9.94963 105.251 li
8.15763 105.251 li
7.41563 104.033 li
9.94963 104.033 li
9.94963 102.787 li
10.9156 102.787 li
10.9156 104.033 li
15.1576 104.033 li
15.5216 104.033 15.7456 104.019 15.8436 103.963 cv
15.9416 103.921 16.0256 103.851 16.0816 103.753 cv
16.1376 103.655 16.1656 103.515 16.1656 103.333 cv
16.1656 103.193 16.1516 103.011 16.1096 102.787 cv
cp
f
20.0016 101.639 mo
18.8396 101.779 li
18.9096 101.513 18.9516 101.275 18.9516 101.065 cv
18.9516 100.799 18.8956 100.589 18.8116 100.421 cv
18.7136 100.253 18.5876 100.127 18.4336 100.015 cv
18.3076 99.9305 17.9996 99.8045 17.5096 99.6365 cv
17.4396 99.6085 17.3416 99.5805 17.2156 99.5245 cv
9.94963 102.283 li
9.94963 100.953 li
14.1636 99.4405 li
14.6956 99.2445 15.2556 99.0765 15.8436 98.9225 cv
15.2836 98.7825 14.7236 98.6145 14.1916 98.4185 cv
9.94963 96.8645 li
9.94963 95.6325 li
17.3276 98.3905 li
18.1116 98.6985 18.6576 98.9225 18.9656 99.0765 cv
19.3716 99.3005 19.6656 99.5525 19.8616 99.8325 cv
20.0436 100.113 20.1416 100.449 20.1416 100.841 cv
20.1416 101.093 20.0856 101.359 20.0016 101.639 cv
cp
f
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
52.6444 17.28 mo
92.3244 17.28 li
52.6444 17.28 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.719814 .521752 .154269 .00848402 cmyk
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.6444 17.28 mo
92.3244 17.28 li
52.6444 17.28 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
grestore
102.244 53.0519 mo
141.924 53.0519 li
141.924 41.5367 li
102.244 41.5367 li
102.244 53.0519 li
cp
.185275 .508537 .65127 .0171817 cmyk
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
102.244 53.0519 mo
141.924 53.0519 li
141.924 41.5367 li
102.244 41.5367 li
102.244 53.0519 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
151.844 66.511 mo
191.524 66.511 li
191.524 57.0689 li
151.844 57.0689 li
151.844 66.511 li
cp
.66775 .185733 .711757 .0232242 cmyk
f
151.844 66.511 mo
191.524 66.511 li
191.524 57.0689 li
151.844 57.0689 li
151.844 66.511 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
201.444 117.051 mo
241.124 117.051 li
241.124 103.574 li
201.444 103.574 li
201.444 117.051 li
cp
.243503 .734279 .551598 .0673228 cmyk
f
201.444 117.051 mo
241.124 117.051 li
241.124 103.574 li
201.444 103.574 li
201.444 117.051 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
251.044 84.8785 mo
290.724 84.8785 li
290.724 74.7557 li
251.044 74.7557 li
251.044 84.8785 li
cp
.526665 .539269 .101045 0 cmyk
f
251.044 84.8785 mo
290.724 84.8785 li
290.724 74.7557 li
251.044 74.7557 li
251.044 84.8785 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
300.644 118.142 mo
340.324 118.142 li
340.324 106.623 li
300.644 106.623 li
300.644 118.142 li
cp
.429511 .473579 .580407 .124544 cmyk
f
300.644 118.142 mo
340.324 118.142 li
340.324 106.623 li
300.644 106.623 li
300.644 118.142 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
350.244 172.911 mo
389.924 172.911 li
389.924 153.55 li
350.244 153.55 li
350.244 172.911 li
cp
.159854 .476875 .0191348 0 cmyk
f
350.244 172.911 mo
389.924 172.911 li
389.924 153.55 li
350.244 153.55 li
350.244 172.911 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
399.844 193.942 mo
439.524 193.942 li
439.524 179.564 li
399.844 179.564 li
399.844 193.942 li
cp
1 /0 /CSD get_res sepcs
.45098 sep
f
399.844 193.942 mo
439.524 193.942 li
439.524 179.564 li
399.844 179.564 li
399.844 193.942 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
gsave
47.6844 228.96 mo
494.084 228.96 li
494.084 7.20001 li
47.6844 7.20001 li
cp
clp
449.444 210.32 mo
489.124 210.32 li
489.124 189.267 li
449.444 189.267 li
449.444 210.32 li
cp
.261265 .243992 .579156 .00234989 cmyk
f
449.444 210.32 mo
489.124 210.32 li
489.124 189.267 li
449.444 189.267 li
449.444 210.32 li
cp
1 /0 /CSD get_res sepcs
.713725 sep
@
grestore
1 lc
1 lj
72.4844 17.28 mo
72.4844 17.28 li
@
72.4844 17.28 mo
72.4844 17.28 li
@
62.5644 17.28 mo
82.4044 17.28 li
@
62.5644 17.28 mo
82.4044 17.28 li
@
122.084 53.0519 mo
122.084 66.8966 li
@
122.084 41.5367 mo
122.084 29.9049 li
@
112.164 66.8966 mo
132.004 66.8966 li
@
112.164 29.9049 mo
132.004 29.9049 li
@
171.684 66.511 mo
171.684 76.6828 li
@
171.684 57.0689 mo
171.684 46.052 li
@
161.764 76.6828 mo
181.604 76.6828 li
@
161.764 46.052 mo
181.604 46.052 li
@
221.284 117.051 mo
221.284 135.02 li
@
221.284 103.574 mo
221.284 88.1825 li
@
211.364 135.02 mo
231.204 135.02 li
@
211.364 88.1825 mo
231.204 88.1825 li
@
270.884 84.8785 mo
270.884 99.342 li
@
270.884 74.7557 mo
270.884 62.3735 li
@
260.964 99.342 mo
280.804 99.342 li
@
260.964 62.3735 mo
280.804 62.3735 li
@
270.884 104.658 mo
273.006 101.122 li
270.884 97.5869 li
268.763 101.122 li
cp
f
1 lw
0 lc
0 lj
270.884 104.658 mo
273.006 101.122 li
270.884 97.5869 li
268.763 101.122 li
cp
@
1.5 lw
1 lc
1 lj
320.484 118.142 mo
320.484 127.271 li
@
320.484 106.623 mo
320.484 93.878 li
@
310.564 127.271 mo
330.404 127.271 li
@
310.564 93.878 mo
330.404 93.878 li
@
gsave
313.363 145.971 mo
327.606 145.971 li
327.606 128.9 li
313.363 128.9 li
cp
clp
320.484 140.971 mo
322.606 137.436 li
320.484 133.9 li
318.363 137.436 li
cp
f
1 lw
0 lc
0 lj
320.484 140.971 mo
322.606 137.436 li
320.484 133.9 li
318.363 137.436 li
cp
@
grestore
gsave
313.363 158.377 mo
327.606 158.377 li
327.606 141.306 li
313.363 141.306 li
cp
clp
320.484 153.377 mo
322.606 149.842 li
320.484 146.306 li
318.363 149.842 li
cp
f
1 lw
0 lc
0 lj
320.484 153.377 mo
322.606 149.842 li
320.484 146.306 li
318.363 149.842 li
cp
@
grestore
gsave
313.363 97.3138 mo
327.606 97.3138 li
327.606 80.2427 li
313.363 80.2427 li
cp
clp
320.484 92.3138 mo
322.606 88.7783 li
320.484 85.2427 li
318.363 88.7783 li
cp
f
1 lw
0 lc
0 lj
320.484 92.3138 mo
322.606 88.7783 li
320.484 85.2427 li
318.363 88.7783 li
cp
@
grestore
gsave
313.363 96.8993 mo
327.606 96.8993 li
327.606 79.8282 li
313.363 79.8282 li
cp
clp
320.484 91.8993 mo
322.606 88.3638 li
320.484 84.8282 li
318.363 88.3638 li
cp
f
1 lw
0 lc
0 lj
320.484 91.8993 mo
322.606 88.3638 li
320.484 84.8282 li
318.363 88.3638 li
cp
@
grestore
370.084 172.911 mo
370.084 191.363 li
@
370.084 153.55 mo
370.084 128.983 li
@
360.164 191.363 mo
380.004 191.363 li
@
360.164 128.983 mo
380.004 128.983 li
@
370.084 127.97 mo
372.206 124.434 li
370.084 120.899 li
367.963 124.434 li
cp
f
1 lw
0 lc
0 lj
370.084 127.97 mo
372.206 124.434 li
370.084 120.899 li
367.963 124.434 li
cp
@
1.5 lw
1 lc
1 lj
419.684 193.942 mo
419.684 210.222 li
@
419.684 179.564 mo
419.684 159.334 li
@
409.764 210.222 mo
429.604 210.222 li
@
409.764 159.334 mo
429.604 159.334 li
@
469.284 210.32 mo
469.284 218.88 li
@
469.284 189.267 mo
469.284 174.257 li
@
459.364 218.88 mo
479.204 218.88 li
@
459.364 174.257 mo
479.204 174.257 li
@
52.6444 17.28 mo
92.3244 17.28 li
@
102.244 46.4751 mo
141.924 46.4751 li
@
151.844 60.8611 mo
191.524 60.8611 li
@
201.444 110.897 mo
241.124 110.897 li
@
251.044 80.2084 mo
290.724 80.2084 li
@
300.644 112.678 mo
340.324 112.678 li
@
350.244 164.101 mo
389.924 164.101 li
@
399.844 189.181 mo
439.524 189.181 li
@
449.444 201.199 mo
489.124 201.199 li
@
1.25 lw
2 lc
0 lj
47.6844 228.96 mo
47.6844 7.20001 li
1 /0 /CSD get_res sepcs
.2 sep
@
494.084 228.96 mo
494.084 7.20001 li
@
47.6844 228.96 mo
494.084 228.96 li
@
47.6844 7.20001 mo
494.084 7.20001 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
