%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: esm-lddt-CASP14-alphabets-select-aa-from-cluster=first-difference-to-uniprot21.pdf
%%Creator: (Adobe Acrobat 23.1.0)
%%For: ioan
%%CreationDate: 15/08/2023, 13:42
%%BoundingBox: 0 0 502 294
%%HiResBoundingBox: 0 0 501.6438 293.4486
%%CropBox: 0 0 501.6438 293.4486
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 575 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.2a0d8d9, 2023/03/14-11:19:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-08-15T13:41:29+01:00"
   xmp:CreatorTool="Matplotlib v3.5.2, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -293.449 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 293.449 li
501.644 293.449 li
501.644 0 li
cp
clp
0 293.449 mo
501.644 293.449 li
501.644 0 li
0 0 li
0 293.449 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
f
49.2983 266.392 mo
43.9441 261.037 li
41.9416 263.04 li
41.2203 262.319 li
46.04 257.499 li
46.7612 258.22 li
44.7502 260.231 li
50.1044 265.586 li
49.2983 266.392 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
55.4501 260.24 mo
54.7034 260.987 li
49.9516 256.235 li
49.9347 256.591 49.8753 257.007 49.7565 257.465 cv
49.6377 257.923 49.5019 258.314 49.3577 258.628 cv
48.6364 257.906 li
48.857 257.296 48.9843 256.693 49.0183 256.099 cv
49.0522 255.522 49.0013 255.03 48.8655 254.623 cv
49.3492 254.139 li
55.4501 260.24 li
cp
f
54.364 255.335 mo
53.6512 254.623 53.1421 253.978 52.8536 253.384 cv
52.5566 252.798 52.4378 252.238 52.4887 251.712 cv
52.5396 251.186 52.7942 250.694 53.2354 250.253 cv
53.5579 249.93 53.9143 249.71 54.2961 249.599 cv
54.6695 249.498 55.0598 249.481 55.4671 249.565 cv
55.8744 249.65 56.2986 249.82 56.7483 250.083 cv
57.1896 250.355 57.7242 250.787 58.3181 251.381 cv
59.0309 252.094 59.5315 252.747 59.8285 253.333 cv
60.1255 253.918 60.2358 254.47 60.1849 254.996 cv
60.134 255.522 59.8709 256.006 59.4297 256.447 cv
58.8357 257.041 58.1739 257.296 57.4272 257.211 cv
56.5277 257.109 55.5095 256.481 54.364 255.335 cv
cp
55.1277 254.572 mo
56.1289 255.573 56.9011 256.125 57.4696 256.218 cv
58.0296 256.32 58.4793 256.192 58.8188 255.853 cv
59.1582 255.514 59.2854 255.064 59.1921 254.495 cv
59.0988 253.927 58.5557 253.146 57.5544 252.145 cv
56.5532 251.144 55.7725 250.601 55.204 250.507 cv
54.644 250.422 54.1858 250.541 53.8464 250.881 cv
53.4985 251.229 53.3712 251.644 53.4561 252.136 cv
53.5748 252.764 54.1349 253.579 55.1277 254.572 cv
cp
f
65.276 248.988 mo
65.9888 249.701 li
61.9753 253.715 li
61.7886 253.545 61.6528 253.341 61.551 253.104 cv
61.3813 252.73 61.2795 252.306 61.2286 251.814 cv
61.1861 251.33 61.2116 250.694 61.2795 249.913 cv
61.4068 248.717 61.4237 247.851 61.3389 247.291 cv
61.254 246.748 61.0758 246.333 60.7873 246.044 cv
60.4988 245.756 60.134 245.611 59.7182 245.62 cv
59.3024 245.628 58.9291 245.798 58.5896 246.137 cv
58.2333 246.494 58.0551 246.893 58.0551 247.317 cv
58.0551 247.758 58.2418 248.165 58.6236 248.547 cv
57.7751 249.226 li
57.2575 248.607 57.0199 247.979 57.0538 247.334 cv
57.0962 246.697 57.4102 246.078 57.9872 245.501 cv
58.5642 244.924 59.2006 244.627 59.8624 244.61 cv
60.5243 244.593 61.0928 244.822 61.568 245.297 cv
61.8141 245.543 62.0007 245.832 62.1365 246.171 cv
62.2723 246.511 62.3571 246.918 62.3826 247.402 cv
62.4165 247.894 62.3911 248.632 62.3062 249.616 cv
62.2298 250.439 62.1959 250.982 62.2044 251.246 cv
62.2129 251.509 62.2468 251.746 62.2977 251.967 cv
65.276 248.988 li
cp
f
65.4967 247.376 mo
66.15 246.604 li
66.5488 246.884 66.9052 247.003 67.2277 246.986 cv
67.5501 246.969 67.8471 246.825 68.1186 246.553 cv
68.3392 246.333 68.492 246.078 68.5599 245.806 cv
68.6277 245.535 68.6277 245.246 68.5599 244.958 cv
68.5005 244.678 68.3562 244.347 68.1271 243.965 cv
67.9065 243.592 67.6434 243.244 67.338 242.938 cv
67.1768 242.794 li
67.2616 243.185 67.2531 243.583 67.1428 243.982 cv
67.041 244.389 66.8289 244.737 66.5234 245.043 cv
66.0228 245.543 65.4203 245.789 64.7075 245.773 cv
63.9948 245.756 63.3414 245.442 62.7474 244.848 cv
62.1365 244.237 61.8141 243.558 61.8056 242.82 cv
61.7886 242.09 62.0516 241.437 62.6032 240.885 cv
62.9935 240.495 63.4602 240.249 64.0033 240.13 cv
64.5378 240.019 65.0979 240.07 65.6579 240.291 cv
66.2264 240.52 66.8798 241.004 67.618 241.742 cv
68.3986 242.523 68.9332 243.227 69.2217 243.855 cv
69.5102 244.483 69.612 245.077 69.5187 245.645 cv
69.4169 246.222 69.1453 246.731 68.7041 247.173 cv
68.2289 247.648 67.7113 247.911 67.1428 247.953 cv
66.5828 248.004 66.0312 247.809 65.4967 247.376 cv
cp
65.8785 241.649 mo
65.4542 241.224 64.996 241.004 64.5124 240.978 cv
64.0287 240.953 63.6299 241.097 63.3075 241.42 cv
62.9765 241.75 62.8238 242.175 62.8493 242.692 cv
62.8747 243.21 63.1123 243.685 63.5366 244.109 cv
63.9269 244.5 64.3512 244.703 64.8263 244.703 cv
65.3015 244.72 65.7088 244.551 66.0567 244.203 cv
66.3961 243.863 66.5658 243.456 66.5404 242.989 cv
66.5234 242.531 66.3028 242.073 65.8785 241.649 cv
cp
f
82.365 266.392 mo
77.0108 261.037 li
75.0083 263.04 li
74.287 262.319 li
79.1067 257.499 li
79.8279 258.22 li
77.8169 260.231 li
83.1711 265.586 li
82.365 266.392 li
cp
f
88.5168 260.24 mo
87.7701 260.987 li
83.0183 256.235 li
83.0013 256.591 82.9419 257.007 82.8231 257.465 cv
82.7043 257.923 82.5686 258.314 82.4243 258.628 cv
81.7031 257.906 li
81.9237 257.296 82.051 256.693 82.0849 256.099 cv
82.1189 255.522 82.068 255.03 81.9322 254.623 cv
82.4159 254.139 li
88.5168 260.24 li
cp
f
87.4307 255.335 mo
86.7179 254.623 86.2088 253.978 85.9203 253.384 cv
85.6233 252.798 85.5045 252.238 85.5554 251.712 cv
85.6063 251.186 85.8609 250.694 86.3021 250.253 cv
86.6246 249.93 86.9809 249.71 87.3628 249.599 cv
87.7361 249.498 88.1264 249.481 88.5337 249.565 cv
88.941 249.65 89.3653 249.82 89.815 250.083 cv
90.2563 250.355 90.7908 250.787 91.3848 251.381 cv
92.0976 252.094 92.5982 252.747 92.8952 253.333 cv
93.1922 253.918 93.3025 254.47 93.2516 254.996 cv
93.2006 255.522 92.9376 256.006 92.4964 256.447 cv
91.9024 257.041 91.2405 257.296 90.4938 257.211 cv
89.5944 257.109 88.5762 256.481 87.4307 255.335 cv
cp
88.1943 254.572 mo
89.1956 255.573 89.9678 256.125 90.5363 256.218 cv
91.0963 256.32 91.546 256.192 91.8854 255.853 cv
92.2248 255.514 92.3521 255.064 92.2588 254.495 cv
92.1654 253.927 91.6224 253.146 90.6211 252.145 cv
89.6199 251.144 88.8392 250.601 88.2707 250.507 cv
87.7107 250.422 87.2525 250.541 86.9131 250.881 cv
86.5652 251.229 86.4379 251.644 86.5227 252.136 cv
86.6415 252.764 87.2015 253.579 88.1943 254.572 cv
cp
f
93.54 252.009 mo
94.1849 251.161 li
94.694 251.5 95.1438 251.661 95.5341 251.644 cv
95.9244 251.627 96.2723 251.466 96.5693 251.169 cv
96.9172 250.821 97.0954 250.405 97.0869 249.922 cv
97.0869 249.447 96.9087 249.014 96.5523 248.658 cv
96.2129 248.318 95.8056 248.148 95.3644 248.148 cv
94.9232 248.148 94.5159 248.318 94.1764 248.658 cv
94.0322 248.802 93.888 249.014 93.7352 249.268 cv
93.1667 248.53 li
93.294 248.42 li
93.6079 248.106 93.8201 247.741 93.9049 247.317 cv
93.9898 246.893 93.8625 246.511 93.5146 246.163 cv
93.2431 245.891 92.9291 245.764 92.5642 245.773 cv
92.1994 245.781 91.8684 245.925 91.58 246.214 cv
91.2915 246.502 91.1387 246.842 91.1217 247.215 cv
91.1133 247.597 91.266 247.987 91.5715 248.394 cv
90.6975 249.014 li
90.2817 248.428 90.1035 247.826 90.1544 247.232 cv
90.2053 246.638 90.4599 246.095 90.9436 245.611 cv
91.2745 245.28 91.6563 245.051 92.0806 244.916 cv
92.4964 244.788 92.9037 244.771 93.294 244.856 cv
93.6928 244.949 94.0322 245.136 94.3037 245.408 cv
94.5753 245.679 94.7365 245.993 94.8128 246.341 cv
94.8892 246.706 94.8468 247.088 94.694 247.478 cv
95.1353 247.207 95.585 247.113 96.0432 247.164 cv
96.5099 247.223 96.9426 247.453 97.333 247.843 cv
97.8591 248.369 98.1136 249.014 98.0882 249.769 cv
98.0712 250.533 97.7657 251.195 97.1802 251.78 cv
96.6372 252.323 96.0432 252.612 95.3729 252.637 cv
94.7025 252.68 94.1001 252.467 93.54 252.009 cv
cp
f
103.061 244.271 mo
103.773 244.983 li
99.7598 248.997 li
99.5731 248.827 99.4373 248.624 99.3355 248.386 cv
99.1658 248.013 99.064 247.588 99.013 247.096 cv
98.9706 246.613 98.9961 245.976 99.064 245.196 cv
99.1912 243.999 99.2082 243.134 99.1234 242.574 cv
99.0385 242.03 98.8603 241.615 98.5718 241.326 cv
98.2833 241.038 97.9185 240.893 97.5027 240.902 cv
97.0869 240.91 96.7135 241.08 96.3741 241.42 cv
96.0177 241.776 95.8396 242.175 95.8396 242.599 cv
95.8396 243.04 96.0262 243.448 96.4081 243.829 cv
95.5595 244.508 li
95.0419 243.889 94.8044 243.261 94.8383 242.616 cv
94.8807 241.98 95.1947 241.36 95.7717 240.783 cv
96.3487 240.206 96.9851 239.909 97.6469 239.892 cv
98.3088 239.875 98.8773 240.104 99.3525 240.58 cv
99.5985 240.826 99.7852 241.114 99.921 241.453 cv
100.057 241.793 100.142 242.2 100.167 242.684 cv
100.201 243.176 100.176 243.914 100.091 244.899 cv
100.014 245.722 99.9804 246.265 99.9889 246.528 cv
99.9973 246.791 100.031 247.028 100.082 247.249 cv
103.061 244.271 li
cp
f
115.432 266.392 mo
110.077 261.037 li
108.075 263.04 li
107.354 262.319 li
112.173 257.499 li
112.895 258.22 li
110.884 260.231 li
116.238 265.586 li
115.432 266.392 li
cp
f
121.583 260.24 mo
120.837 260.987 li
116.085 256.235 li
116.068 256.591 116.009 257.007 115.89 257.465 cv
115.771 257.923 115.635 258.314 115.491 258.628 cv
114.77 257.906 li
114.99 257.296 115.118 256.693 115.152 256.099 cv
115.186 255.522 115.135 255.03 114.999 254.623 cv
115.483 254.139 li
121.583 260.24 li
cp
f
120.497 255.335 mo
119.785 254.623 119.275 253.978 118.987 253.384 cv
118.69 252.798 118.571 252.238 118.622 251.712 cv
118.673 251.186 118.928 250.694 119.369 250.253 cv
119.691 249.93 120.048 249.71 120.429 249.599 cv
120.803 249.498 121.193 249.481 121.6 249.565 cv
122.008 249.65 122.432 249.82 122.882 250.083 cv
123.323 250.355 123.857 250.787 124.451 251.381 cv
125.164 252.094 125.665 252.747 125.962 253.333 cv
126.259 253.918 126.369 254.47 126.318 254.996 cv
126.267 255.522 126.004 256.006 125.563 256.447 cv
124.969 257.041 124.307 257.296 123.561 257.211 cv
122.661 257.109 121.643 256.481 120.497 255.335 cv
cp
121.261 254.572 mo
122.262 255.573 123.034 256.125 123.603 256.218 cv
124.163 256.32 124.613 256.192 124.952 255.853 cv
125.292 255.514 125.419 255.064 125.325 254.495 cv
125.232 253.927 124.689 253.146 123.688 252.145 cv
122.687 251.144 121.906 250.601 121.337 250.507 cv
120.777 250.422 120.319 250.541 119.98 250.881 cv
119.632 251.229 119.505 251.644 119.589 252.136 cv
119.708 252.764 120.268 253.579 121.261 254.572 cv
cp
f
126.607 252.009 mo
127.252 251.161 li
127.761 251.5 128.21 251.661 128.601 251.644 cv
128.991 251.627 129.339 251.466 129.636 251.169 cv
129.984 250.821 130.162 250.405 130.154 249.922 cv
130.154 249.447 129.975 249.014 129.619 248.658 cv
129.28 248.318 128.872 248.148 128.431 248.148 cv
127.99 248.148 127.583 248.318 127.243 248.658 cv
127.099 248.802 126.955 249.014 126.802 249.268 cv
126.233 248.53 li
126.361 248.42 li
126.675 248.106 126.887 247.741 126.972 247.317 cv
127.056 246.893 126.929 246.511 126.581 246.163 cv
126.31 245.891 125.996 245.764 125.631 245.773 cv
125.266 245.781 124.935 245.925 124.647 246.214 cv
124.358 246.502 124.205 246.842 124.188 247.215 cv
124.18 247.597 124.333 247.987 124.638 248.394 cv
123.764 249.014 li
123.348 248.428 123.17 247.826 123.221 247.232 cv
123.272 246.638 123.527 246.095 124.01 245.611 cv
124.341 245.28 124.723 245.051 125.147 244.916 cv
125.563 244.788 125.97 244.771 126.361 244.856 cv
126.759 244.949 127.099 245.136 127.37 245.408 cv
127.642 245.679 127.803 245.993 127.88 246.341 cv
127.956 246.706 127.913 247.088 127.761 247.478 cv
128.202 247.207 128.652 247.113 129.11 247.164 cv
129.577 247.223 130.009 247.453 130.4 247.843 cv
130.926 248.369 131.18 249.014 131.155 249.769 cv
131.138 250.533 130.832 251.195 130.247 251.78 cv
129.704 252.323 129.11 252.612 128.44 252.637 cv
127.769 252.68 127.167 252.467 126.607 252.009 cv
cp
f
131.325 247.291 mo
131.969 246.443 li
132.479 246.782 132.928 246.943 133.319 246.927 cv
133.709 246.91 134.057 246.748 134.354 246.451 cv
134.702 246.103 134.88 245.688 134.871 245.204 cv
134.871 244.729 134.693 244.296 134.337 243.94 cv
133.997 243.6 133.59 243.431 133.149 243.431 cv
132.708 243.431 132.3 243.6 131.961 243.94 cv
131.817 244.084 131.672 244.296 131.52 244.551 cv
130.951 243.812 li
131.078 243.702 li
131.392 243.388 131.605 243.023 131.689 242.599 cv
131.774 242.175 131.647 241.793 131.299 241.445 cv
131.028 241.173 130.714 241.046 130.349 241.055 cv
129.984 241.063 129.653 241.207 129.364 241.496 cv
129.076 241.784 128.923 242.124 128.906 242.497 cv
128.898 242.879 129.05 243.269 129.356 243.677 cv
128.482 244.296 li
128.066 243.711 127.888 243.108 127.939 242.514 cv
127.99 241.92 128.244 241.377 128.728 240.893 cv
129.059 240.563 129.441 240.333 129.865 240.198 cv
130.281 240.07 130.688 240.053 131.078 240.138 cv
131.477 240.232 131.817 240.418 132.088 240.69 cv
132.36 240.961 132.521 241.275 132.597 241.623 cv
132.674 241.988 132.631 242.37 132.479 242.76 cv
132.92 242.489 133.369 242.395 133.828 242.446 cv
134.294 242.506 134.727 242.735 135.117 243.125 cv
135.644 243.651 135.898 244.296 135.873 245.051 cv
135.856 245.815 135.55 246.477 134.965 247.062 cv
134.422 247.605 133.828 247.894 133.157 247.919 cv
132.487 247.962 131.885 247.75 131.325 247.291 cv
cp
f
148.498 266.392 mo
143.144 261.037 li
141.142 263.04 li
140.42 262.319 li
145.24 257.499 li
145.961 258.22 li
143.95 260.231 li
149.304 265.586 li
148.498 266.392 li
cp
f
154.65 260.24 mo
153.903 260.987 li
149.152 256.235 li
149.135 256.591 149.075 257.007 148.956 257.465 cv
148.838 257.923 148.702 258.314 148.558 258.628 cv
147.836 257.906 li
148.057 257.296 148.184 256.693 148.218 256.099 cv
148.252 255.522 148.201 255.03 148.066 254.623 cv
148.549 254.139 li
154.65 260.24 li
cp
f
153.564 255.335 mo
152.851 254.623 152.342 253.978 152.054 253.384 cv
151.757 252.798 151.638 252.238 151.689 251.712 cv
151.74 251.186 151.994 250.694 152.435 250.253 cv
152.758 249.93 153.114 249.71 153.496 249.599 cv
153.869 249.498 154.26 249.481 154.667 249.565 cv
155.074 249.65 155.499 249.82 155.948 250.083 cv
156.39 250.355 156.924 250.787 157.518 251.381 cv
158.231 252.094 158.732 252.747 159.028 253.333 cv
159.325 253.918 159.436 254.47 159.385 254.996 cv
159.334 255.522 159.071 256.006 158.63 256.447 cv
158.036 257.041 157.374 257.296 156.627 257.211 cv
155.728 257.109 154.709 256.481 153.564 255.335 cv
cp
154.328 254.572 mo
155.329 255.573 156.101 256.125 156.67 256.218 cv
157.23 256.32 157.679 256.192 158.019 255.853 cv
158.358 255.514 158.485 255.064 158.392 254.495 cv
158.299 253.927 157.756 253.146 156.754 252.145 cv
155.753 251.144 154.973 250.601 154.404 250.507 cv
153.844 250.422 153.386 250.541 153.046 250.881 cv
152.698 251.229 152.571 251.644 152.656 252.136 cv
152.775 252.764 153.335 253.579 154.328 254.572 cv
cp
f
159.673 252.009 mo
160.318 251.161 li
160.827 251.5 161.277 251.661 161.667 251.644 cv
162.058 251.627 162.406 251.466 162.703 251.169 cv
163.051 250.821 163.229 250.405 163.22 249.922 cv
163.22 249.447 163.042 249.014 162.686 248.658 cv
162.346 248.318 161.939 248.148 161.498 248.148 cv
161.056 248.148 160.649 248.318 160.31 248.658 cv
160.166 248.802 160.021 249.014 159.869 249.268 cv
159.3 248.53 li
159.427 248.42 li
159.741 248.106 159.953 247.741 160.038 247.317 cv
160.123 246.893 159.996 246.511 159.648 246.163 cv
159.376 245.891 159.062 245.764 158.698 245.773 cv
158.333 245.781 158.002 245.925 157.713 246.214 cv
157.425 246.502 157.272 246.842 157.255 247.215 cv
157.247 247.597 157.399 247.987 157.705 248.394 cv
156.831 249.014 li
156.415 248.428 156.237 247.826 156.288 247.232 cv
156.339 246.638 156.593 246.095 157.077 245.611 cv
157.408 245.28 157.79 245.051 158.214 244.916 cv
158.63 244.788 159.037 244.771 159.427 244.856 cv
159.826 244.949 160.166 245.136 160.437 245.408 cv
160.709 245.679 160.87 245.993 160.946 246.341 cv
161.023 246.706 160.98 247.088 160.827 247.478 cv
161.269 247.207 161.718 247.113 162.177 247.164 cv
162.643 247.223 163.076 247.453 163.466 247.843 cv
163.992 248.369 164.247 249.014 164.222 249.769 cv
164.205 250.533 163.899 251.195 163.314 251.78 cv
162.771 252.323 162.177 252.612 161.506 252.637 cv
160.836 252.68 160.233 252.467 159.673 252.009 cv
cp
f
164.4 247.3 mo
165.121 246.46 li
165.554 246.791 165.978 246.943 166.377 246.918 cv
166.784 246.901 167.132 246.74 167.429 246.443 cv
167.785 246.086 167.955 245.645 167.938 245.119 cv
167.913 244.602 167.683 244.118 167.234 243.668 cv
166.81 243.244 166.351 243.04 165.868 243.032 cv
165.384 243.023 164.943 243.21 164.561 243.592 cv
164.323 243.829 164.162 244.109 164.077 244.415 cv
163.992 244.72 163.975 245.009 164.043 245.28 cv
163.254 245.9 li
160.717 242.192 li
163.738 239.171 li
164.451 239.884 li
162.032 242.302 li
163.331 244.262 li
163.441 243.643 163.695 243.134 164.094 242.735 cv
164.62 242.209 165.257 241.946 165.986 241.946 cv
166.725 241.954 167.378 242.234 167.955 242.811 cv
168.507 243.363 168.821 243.999 168.897 244.72 cv
168.999 245.603 168.71 246.366 168.031 247.045 cv
167.48 247.597 166.877 247.894 166.224 247.936 cv
165.562 247.987 164.96 247.775 164.4 247.3 cv
cp
f
181.565 266.392 mo
176.211 261.037 li
174.208 263.04 li
173.487 262.319 li
178.307 257.499 li
179.028 258.22 li
177.017 260.231 li
182.371 265.586 li
181.565 266.392 li
cp
f
187.717 260.24 mo
186.97 260.987 li
182.218 256.235 li
182.201 256.591 182.142 257.007 182.023 257.465 cv
181.904 257.923 181.769 258.314 181.624 258.628 cv
180.903 257.906 li
181.124 257.296 181.251 256.693 181.285 256.099 cv
181.319 255.522 181.268 255.03 181.132 254.623 cv
181.616 254.139 li
187.717 260.24 li
cp
f
186.631 255.335 mo
185.918 254.623 185.409 253.978 185.12 253.384 cv
184.823 252.798 184.704 252.238 184.755 251.712 cv
184.806 251.186 185.061 250.694 185.502 250.253 cv
185.825 249.93 186.181 249.71 186.563 249.599 cv
186.936 249.498 187.326 249.481 187.734 249.565 cv
188.141 249.65 188.565 249.82 189.015 250.083 cv
189.456 250.355 189.991 250.787 190.585 251.381 cv
191.298 252.094 191.798 252.747 192.095 253.333 cv
192.392 253.918 192.502 254.47 192.452 254.996 cv
192.401 255.522 192.138 256.006 191.696 256.447 cv
191.102 257.041 190.441 257.296 189.694 257.211 cv
188.794 257.109 187.776 256.481 186.631 255.335 cv
cp
187.394 254.572 mo
188.396 255.573 189.168 256.125 189.736 256.218 cv
190.296 256.32 190.746 256.192 191.085 255.853 cv
191.425 255.514 191.552 255.064 191.459 254.495 cv
191.365 253.927 190.822 253.146 189.821 252.145 cv
188.82 251.144 188.039 250.601 187.471 250.507 cv
186.911 250.422 186.452 250.541 186.113 250.881 cv
185.765 251.229 185.638 251.644 185.723 252.136 cv
185.842 252.764 186.402 253.579 187.394 254.572 cv
cp
f
192.74 252.009 mo
193.385 251.161 li
193.894 251.5 194.344 251.661 194.734 251.644 cv
195.124 251.627 195.472 251.466 195.769 251.169 cv
196.117 250.821 196.295 250.405 196.287 249.922 cv
196.287 249.447 196.109 249.014 195.752 248.658 cv
195.413 248.318 195.006 248.148 194.564 248.148 cv
194.123 248.148 193.716 248.318 193.376 248.658 cv
193.232 248.802 193.088 249.014 192.935 249.268 cv
192.367 248.53 li
192.494 248.42 li
192.808 248.106 193.02 247.741 193.105 247.317 cv
193.19 246.893 193.062 246.511 192.715 246.163 cv
192.443 245.891 192.129 245.764 191.764 245.773 cv
191.399 245.781 191.068 245.925 190.78 246.214 cv
190.491 246.502 190.339 246.842 190.322 247.215 cv
190.313 247.597 190.466 247.987 190.771 248.394 cv
189.897 249.014 li
189.482 248.428 189.304 247.826 189.354 247.232 cv
189.405 246.638 189.66 246.095 190.144 245.611 cv
190.474 245.28 190.856 245.051 191.281 244.916 cv
191.696 244.788 192.104 244.771 192.494 244.856 cv
192.893 244.949 193.232 245.136 193.504 245.408 cv
193.775 245.679 193.936 245.993 194.013 246.341 cv
194.089 246.706 194.047 247.088 193.894 247.478 cv
194.335 247.207 194.785 247.113 195.243 247.164 cv
195.71 247.223 196.143 247.453 196.533 247.843 cv
197.059 248.369 197.314 249.014 197.288 249.769 cv
197.271 250.533 196.966 251.195 196.38 251.78 cv
195.837 252.323 195.243 252.612 194.573 252.637 cv
193.903 252.68 193.3 252.467 192.74 252.009 cv
cp
f
197.763 247.376 mo
198.417 246.604 li
198.816 246.884 199.172 247.003 199.494 246.986 cv
199.817 246.969 200.114 246.825 200.385 246.553 cv
200.606 246.333 200.759 246.078 200.827 245.806 cv
200.894 245.535 200.894 245.246 200.827 244.958 cv
200.767 244.678 200.623 244.347 200.394 243.965 cv
200.173 243.592 199.91 243.244 199.605 242.938 cv
199.443 242.794 li
199.528 243.185 199.52 243.583 199.409 243.982 cv
199.308 244.389 199.096 244.737 198.79 245.043 cv
198.289 245.543 197.687 245.789 196.974 245.773 cv
196.261 245.756 195.608 245.442 195.014 244.848 cv
194.403 244.237 194.081 243.558 194.072 242.82 cv
194.055 242.09 194.318 241.437 194.87 240.885 cv
195.26 240.495 195.727 240.249 196.27 240.13 cv
196.805 240.019 197.365 240.07 197.925 240.291 cv
198.493 240.52 199.146 241.004 199.885 241.742 cv
200.665 242.523 201.2 243.227 201.488 243.855 cv
201.777 244.483 201.879 245.077 201.785 245.645 cv
201.684 246.222 201.412 246.731 200.971 247.173 cv
200.496 247.648 199.978 247.911 199.409 247.953 cv
198.849 248.004 198.298 247.809 197.763 247.376 cv
cp
198.145 241.649 mo
197.721 241.224 197.263 241.004 196.779 240.978 cv
196.295 240.953 195.897 241.097 195.574 241.42 cv
195.243 241.75 195.09 242.175 195.116 242.692 cv
195.141 243.21 195.379 243.685 195.803 244.109 cv
196.194 244.5 196.618 244.703 197.093 244.703 cv
197.568 244.72 197.975 244.551 198.323 244.203 cv
198.663 243.863 198.832 243.456 198.807 242.989 cv
198.79 242.531 198.569 242.073 198.145 241.649 cv
cp
f
214.632 266.392 mo
209.277 261.037 li
207.275 263.04 li
206.554 262.319 li
211.373 257.499 li
212.095 258.22 li
210.084 260.231 li
215.438 265.586 li
214.632 266.392 li
cp
f
220.783 260.24 mo
220.037 260.987 li
215.285 256.235 li
215.268 256.591 215.209 257.007 215.09 257.465 cv
214.971 257.923 214.835 258.314 214.691 258.628 cv
213.97 257.906 li
214.19 257.296 214.318 256.693 214.352 256.099 cv
214.386 255.522 214.335 255.03 214.199 254.623 cv
214.683 254.139 li
220.783 260.24 li
cp
f
219.697 255.335 mo
218.985 254.623 218.475 253.978 218.187 253.384 cv
217.89 252.798 217.771 252.238 217.822 251.712 cv
217.873 251.186 218.128 250.694 218.569 250.253 cv
218.891 249.93 219.248 249.71 219.629 249.599 cv
220.003 249.498 220.393 249.481 220.8 249.565 cv
221.208 249.65 221.632 249.82 222.082 250.083 cv
222.523 250.355 223.057 250.787 223.651 251.381 cv
224.364 252.094 224.865 252.747 225.162 253.333 cv
225.459 253.918 225.569 254.47 225.518 254.996 cv
225.467 255.522 225.204 256.006 224.763 256.447 cv
224.169 257.041 223.507 257.296 222.761 257.211 cv
221.861 257.109 220.843 256.481 219.697 255.335 cv
cp
220.461 254.572 mo
221.462 255.573 222.234 256.125 222.803 256.218 cv
223.363 256.32 223.813 256.192 224.152 255.853 cv
224.491 255.514 224.619 255.064 224.525 254.495 cv
224.432 253.927 223.889 253.146 222.888 252.145 cv
221.887 251.144 221.106 250.601 220.537 250.507 cv
219.977 250.422 219.519 250.541 219.18 250.881 cv
218.832 251.229 218.705 251.644 218.789 252.136 cv
218.908 252.764 219.468 253.579 220.461 254.572 cv
cp
f
229.795 251.229 mo
228.344 249.778 li
225.713 252.408 li
225.026 251.721 li
223.855 245.017 li
224.466 244.406 li
228.403 248.344 li
229.226 247.52 li
229.914 248.208 li
229.091 249.031 li
230.542 250.482 li
229.795 251.229 li
cp
227.657 249.09 mo
224.916 246.35 li
225.756 250.991 li
227.657 249.09 li
cp
f
235.327 244.271 mo
236.04 244.983 li
232.026 248.997 li
231.84 248.827 231.704 248.624 231.602 248.386 cv
231.432 248.013 231.331 247.588 231.28 247.096 cv
231.237 246.613 231.263 245.976 231.331 245.196 cv
231.458 243.999 231.475 243.134 231.39 242.574 cv
231.305 242.03 231.127 241.615 230.838 241.326 cv
230.55 241.038 230.185 240.893 229.769 240.902 cv
229.354 240.91 228.98 241.08 228.641 241.42 cv
228.284 241.776 228.106 242.175 228.106 242.599 cv
228.106 243.04 228.293 243.448 228.675 243.829 cv
227.826 244.508 li
227.309 243.889 227.071 243.261 227.105 242.616 cv
227.147 241.98 227.461 241.36 228.038 240.783 cv
228.615 240.206 229.252 239.909 229.914 239.892 cv
230.575 239.875 231.144 240.104 231.619 240.58 cv
231.865 240.826 232.052 241.114 232.188 241.453 cv
232.323 241.793 232.408 242.2 232.434 242.684 cv
232.468 243.176 232.442 243.914 232.357 244.899 cv
232.281 245.722 232.247 246.265 232.256 246.528 cv
232.264 246.791 232.298 247.028 232.349 247.249 cv
235.327 244.271 li
cp
f
247.698 266.392 mo
242.344 261.037 li
240.342 263.04 li
239.62 262.319 li
244.44 257.499 li
245.161 258.22 li
243.15 260.231 li
248.504 265.586 li
247.698 266.392 li
cp
f
253.85 260.24 mo
253.103 260.987 li
248.352 256.235 li
248.335 256.591 248.275 257.007 248.156 257.465 cv
248.038 257.923 247.902 258.314 247.758 258.628 cv
247.036 257.906 li
247.257 257.296 247.384 256.693 247.418 256.099 cv
247.452 255.522 247.401 255.03 247.266 254.623 cv
247.749 254.139 li
253.85 260.24 li
cp
f
252.764 255.335 mo
252.051 254.623 251.542 253.978 251.254 253.384 cv
250.957 252.798 250.838 252.238 250.889 251.712 cv
250.94 251.186 251.194 250.694 251.635 250.253 cv
251.958 249.93 252.314 249.71 252.696 249.599 cv
253.069 249.498 253.46 249.481 253.867 249.565 cv
254.274 249.65 254.699 249.82 255.148 250.083 cv
255.59 250.355 256.124 250.787 256.718 251.381 cv
257.431 252.094 257.932 252.747 258.228 253.333 cv
258.525 253.918 258.636 254.47 258.585 254.996 cv
258.534 255.522 258.271 256.006 257.83 256.447 cv
257.236 257.041 256.574 257.296 255.827 257.211 cv
254.928 257.109 253.909 256.481 252.764 255.335 cv
cp
253.528 254.572 mo
254.529 255.573 255.301 256.125 255.87 256.218 cv
256.43 256.32 256.879 256.192 257.219 255.853 cv
257.558 255.514 257.685 255.064 257.592 254.495 cv
257.499 253.927 256.956 253.146 255.954 252.145 cv
254.953 251.144 254.173 250.601 253.604 250.507 cv
253.044 250.422 252.586 250.541 252.246 250.881 cv
251.898 251.229 251.771 251.644 251.856 252.136 cv
251.975 252.764 252.535 253.579 253.528 254.572 cv
cp
f
262.861 251.229 mo
261.41 249.778 li
258.78 252.408 li
258.093 251.721 li
256.922 245.017 li
257.533 244.406 li
261.47 248.344 li
262.293 247.52 li
262.98 248.208 li
262.157 249.031 li
263.608 250.482 li
262.861 251.229 li
cp
260.723 249.09 mo
257.982 246.35 li
258.822 250.991 li
260.723 249.09 li
cp
f
263.591 247.291 mo
264.236 246.443 li
264.745 246.782 265.195 246.943 265.585 246.927 cv
265.976 246.91 266.323 246.748 266.62 246.451 cv
266.968 246.103 267.147 245.688 267.138 245.204 cv
267.138 244.729 266.96 244.296 266.603 243.94 cv
266.264 243.6 265.857 243.431 265.416 243.431 cv
264.974 243.431 264.567 243.6 264.228 243.94 cv
264.083 244.084 263.939 244.296 263.786 244.551 cv
263.218 243.812 li
263.345 243.702 li
263.659 243.388 263.871 243.023 263.956 242.599 cv
264.041 242.175 263.914 241.793 263.566 241.445 cv
263.294 241.173 262.98 241.046 262.615 241.055 cv
262.251 241.063 261.92 241.207 261.631 241.496 cv
261.343 241.784 261.19 242.124 261.173 242.497 cv
261.164 242.879 261.317 243.269 261.623 243.677 cv
260.749 244.296 li
260.333 243.711 260.155 243.108 260.206 242.514 cv
260.256 241.92 260.511 241.377 260.995 240.893 cv
261.326 240.563 261.707 240.333 262.132 240.198 cv
262.548 240.07 262.955 240.053 263.345 240.138 cv
263.744 240.232 264.083 240.418 264.355 240.69 cv
264.626 240.961 264.788 241.275 264.864 241.623 cv
264.94 241.988 264.898 242.37 264.745 242.76 cv
265.186 242.489 265.636 242.395 266.094 242.446 cv
266.561 242.506 266.994 242.735 267.384 243.125 cv
267.91 243.651 268.165 244.296 268.139 245.051 cv
268.122 245.815 267.817 246.477 267.231 247.062 cv
266.688 247.605 266.094 247.894 265.424 247.919 cv
264.754 247.962 264.151 247.75 263.591 247.291 cv
cp
f
280.765 266.392 mo
275.411 261.037 li
273.408 263.04 li
272.687 262.319 li
277.507 257.499 li
278.228 258.22 li
276.217 260.231 li
281.571 265.586 li
280.765 266.392 li
cp
f
286.917 260.24 mo
286.17 260.987 li
281.418 256.235 li
281.401 256.591 281.342 257.007 281.223 257.465 cv
281.104 257.923 280.969 258.314 280.824 258.628 cv
280.103 257.906 li
280.324 257.296 280.451 256.693 280.485 256.099 cv
280.519 255.522 280.468 255.03 280.332 254.623 cv
280.816 254.139 li
286.917 260.24 li
cp
f
285.831 255.335 mo
285.118 254.623 284.609 253.978 284.32 253.384 cv
284.023 252.798 283.904 252.238 283.955 251.712 cv
284.006 251.186 284.261 250.694 284.702 250.253 cv
285.025 249.93 285.381 249.71 285.763 249.599 cv
286.136 249.498 286.526 249.481 286.934 249.565 cv
287.341 249.65 287.765 249.82 288.215 250.083 cv
288.656 250.355 289.191 250.787 289.785 251.381 cv
290.498 252.094 290.998 252.747 291.295 253.333 cv
291.592 253.918 291.702 254.47 291.652 254.996 cv
291.601 255.522 291.338 256.006 290.896 256.447 cv
290.302 257.041 289.641 257.296 288.894 257.211 cv
287.994 257.109 286.976 256.481 285.831 255.335 cv
cp
286.594 254.572 mo
287.596 255.573 288.368 256.125 288.936 256.218 cv
289.496 256.32 289.946 256.192 290.285 255.853 cv
290.625 255.514 290.752 255.064 290.659 254.495 cv
290.565 253.927 290.022 253.146 289.021 252.145 cv
288.02 251.144 287.239 250.601 286.671 250.507 cv
286.111 250.422 285.652 250.541 285.313 250.881 cv
284.965 251.229 284.838 251.644 284.923 252.136 cv
285.042 252.764 285.602 253.579 286.594 254.572 cv
cp
f
292.823 245.153 mo
292.135 245.959 li
291.779 245.739 291.473 245.62 291.219 245.603 cv
290.812 245.603 290.447 245.747 290.158 246.036 cv
289.921 246.273 289.776 246.553 289.725 246.859 cv
289.658 247.266 289.734 247.699 289.921 248.157 cv
290.116 248.624 290.506 249.167 291.117 249.778 cv
291.024 249.328 291.049 248.912 291.176 248.513 cv
291.295 248.123 291.499 247.784 291.787 247.495 cv
292.279 247.003 292.89 246.765 293.603 246.782 cv
294.316 246.799 294.969 247.096 295.546 247.673 cv
295.928 248.055 296.2 248.496 296.361 248.98 cv
296.522 249.481 296.548 249.947 296.429 250.405 cv
296.31 250.864 296.072 251.271 295.708 251.636 cv
295.08 252.264 294.358 252.544 293.51 252.476 cv
292.67 252.416 291.719 251.856 290.667 250.804 cv
289.496 249.633 288.86 248.573 288.75 247.597 cv
288.665 246.765 288.936 246.019 289.581 245.374 cv
290.056 244.899 290.591 244.635 291.168 244.602 cv
291.745 244.568 292.288 244.754 292.823 245.153 cv
cp
292.398 250.821 mo
292.653 251.076 292.95 251.271 293.298 251.398 cv
293.637 251.534 293.968 251.559 294.29 251.475 cv
294.613 251.407 294.876 251.262 295.097 251.042 cv
295.402 250.736 295.546 250.338 295.521 249.854 cv
295.487 249.379 295.266 248.921 294.825 248.479 cv
294.409 248.064 293.96 247.851 293.493 247.826 cv
293.035 247.809 292.627 247.962 292.288 248.301 cv
291.949 248.641 291.796 249.048 291.796 249.523 cv
291.804 250.007 292.008 250.431 292.398 250.821 cv
cp
f
300.646 246.511 mo
299.195 245.06 li
296.565 247.69 li
295.877 247.003 li
294.706 240.3 li
295.317 239.689 li
299.254 243.626 li
300.077 242.803 li
300.765 243.49 li
299.942 244.313 li
301.393 245.764 li
300.646 246.511 li
cp
298.508 244.372 mo
295.767 241.632 li
296.607 246.273 li
298.508 244.372 li
cp
f
313.832 266.392 mo
308.477 261.037 li
306.475 263.04 li
305.754 262.319 li
310.573 257.499 li
311.295 258.22 li
309.284 260.231 li
314.638 265.586 li
313.832 266.392 li
cp
f
319.983 260.24 mo
319.237 260.987 li
314.485 256.235 li
314.468 256.591 314.409 257.007 314.29 257.465 cv
314.171 257.923 314.035 258.314 313.891 258.628 cv
313.17 257.906 li
313.39 257.296 313.518 256.693 313.552 256.099 cv
313.586 255.522 313.535 255.03 313.399 254.623 cv
313.883 254.139 li
319.983 260.24 li
cp
f
318.897 255.335 mo
318.185 254.623 317.675 253.978 317.387 253.384 cv
317.09 252.798 316.971 252.238 317.022 251.712 cv
317.073 251.186 317.328 250.694 317.769 250.253 cv
318.091 249.93 318.448 249.71 318.829 249.599 cv
319.203 249.498 319.593 249.481 320 249.565 cv
320.408 249.65 320.832 249.82 321.282 250.083 cv
321.723 250.355 322.257 250.787 322.851 251.381 cv
323.564 252.094 324.065 252.747 324.362 253.333 cv
324.659 253.918 324.769 254.47 324.718 254.996 cv
324.667 255.522 324.404 256.006 323.963 256.447 cv
323.369 257.041 322.707 257.296 321.96 257.211 cv
321.061 257.109 320.043 256.481 318.897 255.335 cv
cp
319.661 254.572 mo
320.662 255.573 321.434 256.125 322.003 256.218 cv
322.563 256.32 323.013 256.192 323.352 255.853 cv
323.692 255.514 323.819 255.064 323.725 254.495 cv
323.632 253.927 323.089 253.146 322.088 252.145 cv
321.087 251.144 320.306 250.601 319.737 250.507 cv
319.177 250.422 318.719 250.541 318.38 250.881 cv
318.032 251.229 317.905 251.644 317.989 252.136 cv
318.108 252.764 318.668 253.579 319.661 254.572 cv
cp
f
321.375 248.293 mo
320.654 247.571 li
324.591 243.634 li
325.176 244.22 li
325.202 245.026 325.363 245.968 325.669 247.02 cv
325.966 248.081 326.373 249.082 326.882 249.998 cv
327.238 250.66 327.705 251.313 328.274 251.95 cv
327.501 252.722 li
327.035 252.238 326.551 251.568 326.05 250.711 cv
325.55 249.854 325.151 248.946 324.862 247.979 cv
324.574 247.011 324.404 246.129 324.353 245.314 cv
321.375 248.293 li
cp
f
329.725 247.291 mo
330.369 246.443 li
330.879 246.782 331.328 246.943 331.719 246.927 cv
332.109 246.91 332.457 246.748 332.754 246.451 cv
333.102 246.103 333.28 245.688 333.271 245.204 cv
333.271 244.729 333.093 244.296 332.737 243.94 cv
332.397 243.6 331.99 243.431 331.549 243.431 cv
331.108 243.431 330.7 243.6 330.361 243.94 cv
330.217 244.084 330.072 244.296 329.92 244.551 cv
329.351 243.812 li
329.478 243.702 li
329.792 243.388 330.005 243.023 330.089 242.599 cv
330.174 242.175 330.047 241.793 329.699 241.445 cv
329.428 241.173 329.114 241.046 328.749 241.055 cv
328.384 241.063 328.053 241.207 327.764 241.496 cv
327.476 241.784 327.323 242.124 327.306 242.497 cv
327.298 242.879 327.45 243.269 327.756 243.677 cv
326.882 244.296 li
326.466 243.711 326.288 243.108 326.339 242.514 cv
326.39 241.92 326.644 241.377 327.128 240.893 cv
327.459 240.563 327.841 240.333 328.265 240.198 cv
328.681 240.07 329.088 240.053 329.478 240.138 cv
329.877 240.232 330.217 240.418 330.488 240.69 cv
330.76 240.961 330.921 241.275 330.997 241.623 cv
331.074 241.988 331.031 242.37 330.879 242.76 cv
331.32 242.489 331.769 242.395 332.228 242.446 cv
332.694 242.506 333.127 242.735 333.517 243.125 cv
334.044 243.651 334.298 244.296 334.273 245.051 cv
334.256 245.815 333.95 246.477 333.365 247.062 cv
332.822 247.605 332.228 247.894 331.557 247.919 cv
330.887 247.962 330.285 247.75 329.725 247.291 cv
cp
f
346.898 266.392 mo
341.544 261.037 li
339.542 263.04 li
338.82 262.319 li
343.64 257.499 li
344.361 258.22 li
342.35 260.231 li
347.704 265.586 li
346.898 266.392 li
cp
f
353.05 260.24 mo
352.303 260.987 li
347.552 256.235 li
347.535 256.591 347.475 257.007 347.356 257.465 cv
347.238 257.923 347.102 258.314 346.958 258.628 cv
346.236 257.906 li
346.457 257.296 346.584 256.693 346.618 256.099 cv
346.652 255.522 346.601 255.03 346.466 254.623 cv
346.949 254.139 li
353.05 260.24 li
cp
f
351.964 255.335 mo
351.251 254.623 350.742 253.978 350.454 253.384 cv
350.157 252.798 350.038 252.238 350.089 251.712 cv
350.14 251.186 350.394 250.694 350.835 250.253 cv
351.158 249.93 351.514 249.71 351.896 249.599 cv
352.269 249.498 352.66 249.481 353.067 249.565 cv
353.474 249.65 353.899 249.82 354.348 250.083 cv
354.79 250.355 355.324 250.787 355.918 251.381 cv
356.631 252.094 357.132 252.747 357.429 253.333 cv
357.726 253.918 357.836 254.47 357.785 254.996 cv
357.734 255.522 357.471 256.006 357.03 256.447 cv
356.436 257.041 355.774 257.296 355.027 257.211 cv
354.128 257.109 353.11 256.481 351.964 255.335 cv
cp
352.728 254.572 mo
353.729 255.573 354.501 256.125 355.07 256.218 cv
355.63 256.32 356.079 256.192 356.419 255.853 cv
356.758 255.514 356.885 255.064 356.792 254.495 cv
356.699 253.927 356.156 253.146 355.154 252.145 cv
354.153 251.144 353.373 250.601 352.804 250.507 cv
352.244 250.422 351.786 250.541 351.446 250.881 cv
351.098 251.229 350.971 251.644 351.056 252.136 cv
351.175 252.764 351.735 253.579 352.728 254.572 cv
cp
f
354.442 248.293 mo
353.72 247.571 li
357.658 243.634 li
358.243 244.22 li
358.269 245.026 358.43 245.968 358.735 247.02 cv
359.032 248.081 359.44 249.082 359.949 249.998 cv
360.305 250.66 360.772 251.313 361.34 251.95 cv
360.568 252.722 li
360.101 252.238 359.618 251.568 359.117 250.711 cv
358.616 249.854 358.218 248.946 357.929 247.979 cv
357.641 247.011 357.471 246.129 357.42 245.314 cv
354.442 248.293 li
cp
f
366.779 246.511 mo
365.328 245.06 li
362.698 247.69 li
362.011 247.003 li
360.84 240.3 li
361.451 239.689 li
365.388 243.626 li
366.211 242.803 li
366.898 243.49 li
366.075 244.313 li
367.526 245.764 li
366.779 246.511 li
cp
364.641 244.372 mo
361.9 241.632 li
362.74 246.273 li
364.641 244.372 li
cp
f
379.965 266.392 mo
374.611 261.037 li
372.608 263.04 li
371.887 262.319 li
376.707 257.499 li
377.428 258.22 li
375.417 260.231 li
380.771 265.586 li
379.965 266.392 li
cp
f
386.117 260.24 mo
385.37 260.987 li
380.618 256.235 li
380.601 256.591 380.542 257.007 380.423 257.465 cv
380.304 257.923 380.169 258.314 380.024 258.628 cv
379.303 257.906 li
379.524 257.296 379.651 256.693 379.685 256.099 cv
379.719 255.522 379.668 255.03 379.532 254.623 cv
380.016 254.139 li
386.117 260.24 li
cp
f
385.031 255.335 mo
384.318 254.623 383.809 253.978 383.52 253.384 cv
383.223 252.798 383.104 252.238 383.155 251.712 cv
383.206 251.186 383.461 250.694 383.902 250.253 cv
384.225 249.93 384.581 249.71 384.963 249.599 cv
385.336 249.498 385.726 249.481 386.134 249.565 cv
386.541 249.65 386.965 249.82 387.415 250.083 cv
387.856 250.355 388.391 250.787 388.985 251.381 cv
389.698 252.094 390.198 252.747 390.495 253.333 cv
390.792 253.918 390.902 254.47 390.852 254.996 cv
390.801 255.522 390.538 256.006 390.096 256.447 cv
389.502 257.041 388.841 257.296 388.094 257.211 cv
387.194 257.109 386.176 256.481 385.031 255.335 cv
cp
385.794 254.572 mo
386.796 255.573 387.568 256.125 388.136 256.218 cv
388.696 256.32 389.146 256.192 389.485 255.853 cv
389.825 255.514 389.952 255.064 389.859 254.495 cv
389.765 253.927 389.222 253.146 388.221 252.145 cv
387.22 251.144 386.439 250.601 385.871 250.507 cv
385.311 250.422 384.852 250.541 384.513 250.881 cv
384.165 251.229 384.038 251.644 384.123 252.136 cv
384.242 252.764 384.802 253.579 385.794 254.572 cv
cp
f
390.597 249.175 mo
390.173 249.379 389.782 249.447 389.418 249.387 cv
389.061 249.336 388.739 249.15 388.442 248.853 cv
388.001 248.411 387.788 247.894 387.805 247.266 cv
387.822 246.638 388.094 246.061 388.62 245.535 cv
389.146 245.009 389.74 244.737 390.368 244.72 cv
390.996 244.703 391.53 244.916 391.972 245.357 cv
392.26 245.645 392.43 245.968 392.489 246.316 cv
392.549 246.68 392.489 247.062 392.294 247.478 cv
392.786 247.223 393.261 247.139 393.728 247.215 cv
394.195 247.291 394.619 247.512 394.992 247.885 cv
395.518 248.411 395.765 249.031 395.748 249.744 cv
395.731 250.473 395.417 251.127 394.823 251.721 cv
394.22 252.323 393.567 252.637 392.846 252.646 cv
392.133 252.663 391.513 252.4 390.979 251.865 cv
390.589 251.475 390.351 251.05 390.283 250.575 cv
390.215 250.117 390.325 249.65 390.597 249.175 cv
cp
389.18 248.064 mo
389.468 248.352 389.799 248.496 390.164 248.488 cv
390.538 248.488 390.86 248.335 391.157 248.038 cv
391.446 247.75 391.59 247.436 391.59 247.062 cv
391.598 246.697 391.471 246.383 391.208 246.12 cv
390.936 245.849 390.605 245.722 390.232 245.722 cv
389.859 245.722 389.528 245.866 389.248 246.146 cv
388.959 246.434 388.815 246.765 388.807 247.13 cv
388.807 247.504 388.925 247.809 389.18 248.064 cv
cp
391.743 251.101 mo
391.963 251.322 392.218 251.475 392.515 251.568 cv
392.82 251.67 393.117 251.678 393.431 251.585 cv
393.737 251.5 394 251.339 394.229 251.11 cv
394.585 250.753 394.763 250.355 394.772 249.888 cv
394.772 249.43 394.594 249.014 394.237 248.658 cv
393.881 248.301 393.474 248.131 392.998 248.131 cv
392.523 248.131 392.099 248.318 391.743 248.674 cv
391.386 249.031 391.216 249.438 391.216 249.896 cv
391.225 250.363 391.403 250.762 391.743 251.101 cv
cp
f
394.466 245.9 mo
393.754 245.187 393.244 244.542 392.956 243.948 cv
392.659 243.363 392.54 242.803 392.591 242.277 cv
392.642 241.75 392.897 241.258 393.338 240.817 cv
393.66 240.495 394.017 240.274 394.398 240.164 cv
394.772 240.062 395.162 240.045 395.569 240.13 cv
395.977 240.215 396.401 240.384 396.851 240.647 cv
397.292 240.919 397.826 241.352 398.42 241.946 cv
399.133 242.658 399.634 243.312 399.931 243.897 cv
400.228 244.483 400.338 245.034 400.287 245.56 cv
400.236 246.086 399.973 246.57 399.532 247.011 cv
398.938 247.605 398.276 247.86 397.529 247.775 cv
396.63 247.673 395.612 247.045 394.466 245.9 cv
cp
395.23 245.136 mo
396.231 246.137 397.003 246.689 397.572 246.782 cv
398.132 246.884 398.582 246.757 398.921 246.417 cv
399.26 246.078 399.388 245.628 399.294 245.06 cv
399.201 244.491 398.658 243.711 397.657 242.709 cv
396.656 241.708 395.875 241.165 395.306 241.072 cv
394.746 240.987 394.288 241.106 393.949 241.445 cv
393.601 241.793 393.473 242.209 393.558 242.701 cv
393.677 243.329 394.237 244.143 395.23 245.136 cv
cp
f
413.032 266.392 mo
407.677 261.037 li
405.675 263.04 li
404.954 262.319 li
409.773 257.499 li
410.495 258.22 li
408.484 260.231 li
413.838 265.586 li
413.032 266.392 li
cp
f
419.183 260.24 mo
418.437 260.987 li
413.685 256.235 li
413.668 256.591 413.609 257.007 413.49 257.465 cv
413.371 257.923 413.235 258.314 413.091 258.628 cv
412.37 257.906 li
412.59 257.296 412.718 256.693 412.752 256.099 cv
412.786 255.522 412.735 255.03 412.599 254.623 cv
413.083 254.139 li
419.183 260.24 li
cp
f
418.097 255.335 mo
417.385 254.623 416.875 253.978 416.587 253.384 cv
416.29 252.798 416.171 252.238 416.222 251.712 cv
416.273 251.186 416.528 250.694 416.969 250.253 cv
417.291 249.93 417.648 249.71 418.029 249.599 cv
418.403 249.498 418.793 249.481 419.2 249.565 cv
419.608 249.65 420.032 249.82 420.482 250.083 cv
420.923 250.355 421.458 250.787 422.051 251.381 cv
422.764 252.094 423.265 252.747 423.562 253.333 cv
423.859 253.918 423.969 254.47 423.918 254.996 cv
423.867 255.522 423.604 256.006 423.163 256.447 cv
422.569 257.041 421.907 257.296 421.161 257.211 cv
420.261 257.109 419.243 256.481 418.097 255.335 cv
cp
418.861 254.572 mo
419.862 255.573 420.634 256.125 421.203 256.218 cv
421.763 256.32 422.213 256.192 422.552 255.853 cv
422.892 255.514 423.019 255.064 422.925 254.495 cv
422.832 253.927 422.289 253.146 421.288 252.145 cv
420.287 251.144 419.506 250.601 418.937 250.507 cv
418.377 250.422 417.919 250.541 417.58 250.881 cv
417.232 251.229 417.105 251.644 417.189 252.136 cv
417.308 252.764 417.868 253.579 418.861 254.572 cv
cp
f
424.512 252.094 mo
425.166 251.322 li
425.564 251.602 425.921 251.721 426.243 251.704 cv
426.566 251.687 426.863 251.543 427.134 251.271 cv
427.355 251.05 427.507 250.796 427.575 250.524 cv
427.643 250.253 427.643 249.964 427.575 249.676 cv
427.516 249.396 427.372 249.065 427.143 248.683 cv
426.922 248.31 426.659 247.962 426.354 247.656 cv
426.192 247.512 li
426.277 247.902 426.269 248.301 426.158 248.7 cv
426.057 249.107 425.844 249.455 425.539 249.761 cv
425.038 250.261 424.436 250.507 423.723 250.49 cv
423.01 250.473 422.357 250.159 421.763 249.565 cv
421.152 248.954 420.83 248.276 420.821 247.537 cv
420.804 246.808 421.067 246.154 421.619 245.603 cv
422.009 245.212 422.476 244.966 423.019 244.848 cv
423.553 244.737 424.113 244.788 424.673 245.009 cv
425.242 245.238 425.895 245.722 426.633 246.46 cv
427.414 247.24 427.949 247.945 428.237 248.573 cv
428.526 249.201 428.628 249.795 428.534 250.363 cv
428.432 250.94 428.161 251.449 427.72 251.89 cv
427.244 252.366 426.727 252.629 426.158 252.671 cv
425.598 252.722 425.047 252.527 424.512 252.094 cv
cp
424.894 246.366 mo
424.47 245.942 424.012 245.722 423.528 245.696 cv
423.044 245.671 422.645 245.815 422.323 246.137 cv
421.992 246.468 421.839 246.893 421.865 247.41 cv
421.89 247.928 422.128 248.403 422.552 248.827 cv
422.942 249.218 423.367 249.421 423.842 249.421 cv
424.317 249.438 424.724 249.268 425.072 248.921 cv
425.412 248.581 425.581 248.174 425.556 247.707 cv
425.539 247.249 425.318 246.791 424.894 246.366 cv
cp
f
427.533 245.9 mo
426.82 245.187 426.311 244.542 426.023 243.948 cv
425.726 243.363 425.607 242.803 425.658 242.277 cv
425.709 241.75 425.963 241.258 426.404 240.817 cv
426.727 240.495 427.083 240.274 427.465 240.164 cv
427.838 240.062 428.229 240.045 428.636 240.13 cv
429.043 240.215 429.468 240.384 429.917 240.647 cv
430.359 240.919 430.893 241.352 431.487 241.946 cv
432.2 242.658 432.701 243.312 432.997 243.897 cv
433.294 244.483 433.405 245.034 433.354 245.56 cv
433.303 246.086 433.04 246.57 432.599 247.011 cv
432.005 247.605 431.343 247.86 430.596 247.775 cv
429.697 247.673 428.678 247.045 427.533 245.9 cv
cp
428.297 245.136 mo
429.298 246.137 430.07 246.689 430.639 246.782 cv
431.199 246.884 431.648 246.757 431.988 246.417 cv
432.327 246.078 432.454 245.628 432.361 245.06 cv
432.268 244.491 431.725 243.711 430.723 242.709 cv
429.722 241.708 428.942 241.165 428.373 241.072 cv
427.813 240.987 427.355 241.106 427.015 241.445 cv
426.667 241.793 426.54 242.209 426.625 242.701 cv
426.744 243.329 427.304 244.143 428.297 245.136 cv
cp
f
446.098 266.392 mo
440.744 261.037 li
438.742 263.04 li
438.02 262.319 li
442.84 257.499 li
443.561 258.22 li
441.55 260.231 li
446.904 265.586 li
446.098 266.392 li
cp
f
452.25 260.24 mo
451.503 260.987 li
446.752 256.235 li
446.735 256.591 446.675 257.007 446.556 257.465 cv
446.438 257.923 446.302 258.314 446.158 258.628 cv
445.436 257.906 li
445.657 257.296 445.784 256.693 445.818 256.099 cv
445.852 255.522 445.801 255.03 445.666 254.623 cv
446.149 254.139 li
452.25 260.24 li
cp
f
451.164 255.335 mo
450.451 254.623 449.942 253.978 449.654 253.384 cv
449.357 252.798 449.238 252.238 449.289 251.712 cv
449.34 251.186 449.594 250.694 450.035 250.253 cv
450.358 249.93 450.714 249.71 451.096 249.599 cv
451.469 249.498 451.86 249.481 452.267 249.565 cv
452.674 249.65 453.099 249.82 453.548 250.083 cv
453.99 250.355 454.524 250.787 455.118 251.381 cv
455.831 252.094 456.332 252.747 456.628 253.333 cv
456.925 253.918 457.036 254.47 456.985 254.996 cv
456.934 255.522 456.671 256.006 456.23 256.447 cv
455.636 257.041 454.974 257.296 454.227 257.211 cv
453.328 257.109 452.309 256.481 451.164 255.335 cv
cp
451.928 254.572 mo
452.929 255.573 453.701 256.125 454.27 256.218 cv
454.83 256.32 455.279 256.192 455.619 255.853 cv
455.958 255.514 456.085 255.064 455.992 254.495 cv
455.899 253.927 455.356 253.146 454.354 252.145 cv
453.353 251.144 452.573 250.601 452.004 250.507 cv
451.444 250.422 450.986 250.541 450.646 250.881 cv
450.298 251.229 450.171 251.644 450.256 252.136 cv
450.375 252.764 450.935 253.579 451.928 254.572 cv
cp
f
457.579 252.094 mo
458.232 251.322 li
458.631 251.602 458.987 251.721 459.31 251.704 cv
459.632 251.687 459.929 251.543 460.201 251.271 cv
460.421 251.05 460.574 250.796 460.642 250.524 cv
460.71 250.253 460.71 249.964 460.642 249.676 cv
460.583 249.396 460.438 249.065 460.209 248.683 cv
459.989 248.31 459.726 247.962 459.42 247.656 cv
459.259 247.512 li
459.344 247.902 459.335 248.301 459.225 248.7 cv
459.123 249.107 458.911 249.455 458.606 249.761 cv
458.105 250.261 457.502 250.507 456.79 250.49 cv
456.077 250.473 455.424 250.159 454.83 249.565 cv
454.219 248.954 453.896 248.276 453.888 247.537 cv
453.871 246.808 454.134 246.154 454.685 245.603 cv
455.076 245.212 455.542 244.966 456.085 244.848 cv
456.62 244.737 457.18 244.788 457.74 245.009 cv
458.309 245.238 458.962 245.722 459.7 246.46 cv
460.481 247.24 461.015 247.945 461.304 248.573 cv
461.592 249.201 461.694 249.795 461.601 250.363 cv
461.499 250.94 461.228 251.449 460.786 251.89 cv
460.311 252.366 459.794 252.629 459.225 252.671 cv
458.665 252.722 458.113 252.527 457.579 252.094 cv
cp
457.961 246.366 mo
457.536 245.942 457.078 245.722 456.595 245.696 cv
456.111 245.671 455.712 245.815 455.39 246.137 cv
455.059 246.468 454.906 246.893 454.931 247.41 cv
454.957 247.928 455.194 248.403 455.619 248.827 cv
456.009 249.218 456.433 249.421 456.908 249.421 cv
457.384 249.438 457.791 249.268 458.139 248.921 cv
458.478 248.581 458.648 248.174 458.623 247.707 cv
458.606 247.249 458.385 246.791 457.961 246.366 cv
cp
f
462.297 247.376 mo
462.95 246.604 li
463.349 246.884 463.705 247.003 464.028 246.986 cv
464.35 246.969 464.647 246.825 464.919 246.553 cv
465.139 246.333 465.292 246.078 465.36 245.806 cv
465.428 245.535 465.428 245.246 465.36 244.958 cv
465.3 244.678 465.156 244.347 464.927 243.965 cv
464.706 243.592 464.443 243.244 464.138 242.938 cv
463.977 242.794 li
464.062 243.185 464.053 243.583 463.943 243.982 cv
463.841 244.389 463.629 244.737 463.323 245.043 cv
462.823 245.543 462.22 245.789 461.508 245.773 cv
460.795 245.756 460.141 245.442 459.547 244.848 cv
458.937 244.237 458.614 243.558 458.606 242.82 cv
458.589 242.09 458.852 241.437 459.403 240.885 cv
459.794 240.495 460.26 240.249 460.803 240.13 cv
461.338 240.019 461.898 240.07 462.458 240.291 cv
463.026 240.52 463.68 241.004 464.418 241.742 cv
465.199 242.523 465.733 243.227 466.022 243.855 cv
466.31 244.483 466.412 245.077 466.319 245.645 cv
466.217 246.222 465.945 246.731 465.504 247.173 cv
465.029 247.648 464.511 247.911 463.943 247.953 cv
463.383 248.004 462.831 247.809 462.297 247.376 cv
cp
462.679 241.649 mo
462.254 241.224 461.796 241.004 461.312 240.978 cv
460.829 240.953 460.43 241.097 460.107 241.42 cv
459.777 241.75 459.624 242.175 459.649 242.692 cv
459.675 243.21 459.912 243.685 460.337 244.109 cv
460.727 244.5 461.151 244.703 461.626 244.703 cv
462.102 244.72 462.509 244.551 462.857 244.203 cv
463.196 243.863 463.366 243.456 463.34 242.989 cv
463.323 242.531 463.103 242.073 462.679 241.649 cv
cp
f
235.956 283.295 mo
235.956 274.461 li
232.652 274.461 li
232.652 273.271 li
240.604 273.271 li
240.604 274.461 li
237.286 274.461 li
237.286 283.295 li
235.956 283.295 li
cp
f
244.993 282.399 mo
244.531 282.791 244.097 283.071 243.677 283.225 cv
243.257 283.365 242.795 283.449 242.319 283.449 cv
241.521 283.449 240.905 283.267 240.485 282.875 cv
240.051 282.483 239.841 281.993 239.841 281.377 cv
239.841 281.027 239.911 280.705 240.079 280.411 cv
240.247 280.117 240.457 279.879 240.723 279.697 cv
240.975 279.529 241.269 279.389 241.605 279.291 cv
241.843 279.235 242.207 279.179 242.697 279.109 cv
243.691 278.997 244.419 278.857 244.895 278.689 cv
244.895 278.521 244.895 278.423 244.895 278.367 cv
244.895 277.863 244.783 277.513 244.559 277.303 cv
244.237 277.023 243.761 276.883 243.145 276.883 cv
242.557 276.883 242.137 276.995 241.857 277.191 cv
241.577 277.401 241.381 277.765 241.255 278.269 cv
240.051 278.101 li
240.163 277.597 240.345 277.177 240.597 276.855 cv
240.849 276.547 241.199 276.295 241.675 276.127 cv
242.151 275.959 242.697 275.875 243.327 275.875 cv
243.943 275.875 244.447 275.959 244.839 276.099 cv
245.231 276.239 245.511 276.421 245.693 276.645 cv
245.875 276.869 246.001 277.135 246.071 277.471 cv
246.113 277.695 246.141 278.073 246.141 278.619 cv
246.141 280.257 li
246.141 281.405 246.155 282.119 246.211 282.427 cv
246.267 282.735 246.365 283.015 246.533 283.295 cv
245.245 283.295 li
245.105 283.043 245.021 282.749 244.993 282.399 cv
cp
244.895 279.655 mo
244.447 279.837 243.775 279.991 242.879 280.117 cv
242.375 280.201 242.011 280.285 241.801 280.369 cv
241.591 280.453 241.437 280.593 241.325 280.761 cv
241.213 280.943 241.157 281.139 241.157 281.349 cv
241.157 281.685 241.269 281.951 241.521 282.175 cv
241.773 282.399 242.137 282.497 242.613 282.497 cv
243.089 282.497 243.509 282.399 243.873 282.189 cv
244.237 281.979 244.517 281.699 244.699 281.335 cv
244.825 281.055 244.895 280.649 244.895 280.103 cv
244.895 279.655 li
cp
f
248.031 283.295 mo
248.031 276.029 li
249.137 276.029 li
249.137 277.135 li
249.417 276.631 249.669 276.295 249.921 276.127 cv
250.159 275.959 250.425 275.875 250.705 275.875 cv
251.125 275.875 251.545 276.015 251.979 276.267 cv
251.545 277.415 li
251.237 277.247 250.943 277.149 250.649 277.149 cv
250.369 277.149 250.131 277.233 249.921 277.387 cv
249.697 277.555 249.543 277.779 249.459 278.059 cv
249.319 278.507 249.263 278.983 249.263 279.501 cv
249.263 283.295 li
248.031 283.295 li
cp
f
252.483 283.883 mo
253.673 284.065 li
253.729 284.429 253.869 284.695 254.093 284.863 cv
254.401 285.087 254.807 285.213 255.339 285.213 cv
255.899 285.213 256.347 285.087 256.655 284.863 cv
256.963 284.639 257.187 284.317 257.299 283.911 cv
257.355 283.659 257.383 283.141 257.383 282.343 cv
256.837 282.987 256.165 283.295 255.367 283.295 cv
254.359 283.295 253.589 282.945 253.043 282.217 cv
252.497 281.503 252.231 280.635 252.231 279.627 cv
252.231 278.941 252.357 278.297 252.609 277.709 cv
252.861 277.121 253.225 276.673 253.701 276.351 cv
254.177 276.043 254.737 275.875 255.381 275.875 cv
256.235 275.875 256.935 276.225 257.495 276.911 cv
257.495 276.029 li
258.629 276.029 li
258.629 282.315 li
258.629 283.435 258.503 284.219 258.279 284.695 cv
258.055 285.171 257.691 285.535 257.187 285.815 cv
256.683 286.081 256.081 286.221 255.353 286.221 cv
254.485 286.221 253.785 286.025 253.253 285.633 cv
252.721 285.241 252.455 284.667 252.483 283.883 cv
cp
253.505 279.529 mo
253.505 280.481 253.687 281.181 254.065 281.615 cv
254.443 282.063 254.919 282.273 255.493 282.273 cv
256.053 282.273 256.515 282.063 256.907 281.629 cv
257.285 281.195 257.481 280.509 257.481 279.571 cv
257.481 278.689 257.285 278.017 256.893 277.569 cv
256.501 277.121 256.025 276.883 255.465 276.883 cv
254.919 276.883 254.457 277.107 254.079 277.555 cv
253.687 278.003 253.505 278.661 253.505 279.529 cv
cp
f
265.461 280.957 mo
266.735 281.111 li
266.525 281.867 266.147 282.441 265.615 282.847 cv
265.069 283.253 264.383 283.449 263.543 283.449 cv
262.479 283.449 261.625 283.127 261.009 282.483 cv
260.393 281.839 260.085 280.915 260.085 279.725 cv
260.085 278.507 260.393 277.555 261.023 276.883 cv
261.639 276.211 262.465 275.875 263.473 275.875 cv
264.439 275.875 265.237 276.211 265.853 276.869 cv
266.469 277.527 266.777 278.451 266.777 279.655 cv
266.777 279.739 266.763 279.837 266.763 279.977 cv
261.345 279.977 li
261.387 280.789 261.611 281.391 262.017 281.811 cv
262.423 282.231 262.927 282.441 263.543 282.441 cv
263.991 282.441 264.383 282.329 264.705 282.091 cv
265.013 281.867 265.265 281.489 265.461 280.957 cv
cp
261.415 278.969 mo
265.475 278.969 li
265.419 278.353 265.265 277.905 265.013 277.597 cv
264.621 277.121 264.103 276.883 263.487 276.883 cv
262.913 276.883 262.437 277.079 262.059 277.457 cv
261.667 277.835 261.457 278.339 261.415 278.969 cv
cp
f
270.963 282.189 mo
271.145 283.281 li
270.781 283.337 270.473 283.379 270.207 283.379 cv
269.759 283.379 269.409 283.309 269.171 283.183 cv
268.919 283.043 268.751 282.861 268.653 282.623 cv
268.541 282.399 268.499 281.909 268.499 281.167 cv
268.499 276.995 li
267.603 276.995 li
267.603 276.029 li
268.499 276.029 li
268.499 274.237 li
269.717 273.495 li
269.717 276.029 li
270.963 276.029 li
270.963 276.995 li
269.717 276.995 li
269.717 281.237 li
269.717 281.601 269.731 281.825 269.787 281.923 cv
269.829 282.021 269.899 282.105 269.997 282.161 cv
270.095 282.217 270.235 282.245 270.417 282.245 cv
270.557 282.245 270.739 282.231 270.963 282.189 cv
cp
f
276.059 283.295 mo
276.059 276.029 li
277.165 276.029 li
277.165 277.065 li
277.697 276.281 278.467 275.875 279.475 275.875 cv
279.909 275.875 280.315 275.959 280.679 276.113 cv
281.043 276.267 281.323 276.477 281.505 276.729 cv
281.687 276.981 281.813 277.289 281.883 277.639 cv
281.925 277.863 281.953 278.269 281.953 278.829 cv
281.953 283.295 li
280.721 283.295 li
280.721 278.885 li
280.721 278.381 280.665 278.017 280.581 277.765 cv
280.483 277.513 280.315 277.317 280.077 277.163 cv
279.825 277.023 279.545 276.939 279.223 276.939 cv
278.691 276.939 278.229 277.107 277.851 277.443 cv
277.473 277.779 277.291 278.409 277.291 279.333 cv
277.291 283.295 li
276.059 283.295 li
cp
f
288.575 282.399 mo
288.113 282.791 287.679 283.071 287.259 283.225 cv
286.839 283.365 286.377 283.449 285.901 283.449 cv
285.103 283.449 284.487 283.267 284.067 282.875 cv
283.633 282.483 283.423 281.993 283.423 281.377 cv
283.423 281.027 283.493 280.705 283.661 280.411 cv
283.829 280.117 284.039 279.879 284.305 279.697 cv
284.557 279.529 284.851 279.389 285.187 279.291 cv
285.425 279.235 285.789 279.179 286.279 279.109 cv
287.273 278.997 288.001 278.857 288.477 278.689 cv
288.477 278.521 288.477 278.423 288.477 278.367 cv
288.477 277.863 288.365 277.513 288.141 277.303 cv
287.819 277.023 287.343 276.883 286.727 276.883 cv
286.139 276.883 285.719 276.995 285.439 277.191 cv
285.159 277.401 284.963 277.765 284.837 278.269 cv
283.633 278.101 li
283.745 277.597 283.927 277.177 284.179 276.855 cv
284.431 276.547 284.781 276.295 285.257 276.127 cv
285.733 275.959 286.279 275.875 286.909 275.875 cv
287.525 275.875 288.029 275.959 288.421 276.099 cv
288.813 276.239 289.093 276.421 289.275 276.645 cv
289.457 276.869 289.583 277.135 289.653 277.471 cv
289.695 277.695 289.723 278.073 289.723 278.619 cv
289.723 280.257 li
289.723 281.405 289.737 282.119 289.793 282.427 cv
289.849 282.735 289.947 283.015 290.115 283.295 cv
288.827 283.295 li
288.687 283.043 288.603 282.749 288.575 282.399 cv
cp
288.477 279.655 mo
288.029 279.837 287.357 279.991 286.461 280.117 cv
285.957 280.201 285.593 280.285 285.383 280.369 cv
285.173 280.453 285.019 280.593 284.907 280.761 cv
284.795 280.943 284.739 281.139 284.739 281.349 cv
284.739 281.685 284.851 281.951 285.103 282.175 cv
285.355 282.399 285.719 282.497 286.195 282.497 cv
286.671 282.497 287.091 282.399 287.455 282.189 cv
287.819 281.979 288.099 281.699 288.281 281.335 cv
288.407 281.055 288.477 280.649 288.477 280.103 cv
288.477 279.655 li
cp
f
291.627 283.295 mo
291.627 276.029 li
292.733 276.029 li
292.733 277.051 li
292.957 276.701 293.251 276.421 293.629 276.197 cv
294.007 275.987 294.441 275.875 294.931 275.875 cv
295.463 275.875 295.897 275.987 296.247 276.211 cv
296.583 276.435 296.835 276.757 296.975 277.149 cv
297.549 276.309 298.291 275.875 299.215 275.875 cv
299.943 275.875 300.489 276.085 300.881 276.477 cv
301.273 276.869 301.469 277.485 301.469 278.311 cv
301.469 283.295 li
300.237 283.295 li
300.237 278.717 li
300.237 278.241 300.195 277.891 300.111 277.667 cv
300.027 277.443 299.887 277.275 299.677 277.135 cv
299.467 277.009 299.229 276.939 298.949 276.939 cv
298.431 276.939 298.011 277.121 297.675 277.457 cv
297.339 277.793 297.171 278.339 297.171 279.081 cv
297.171 283.295 li
295.939 283.295 li
295.939 278.577 li
295.939 278.031 295.827 277.625 295.631 277.345 cv
295.435 277.079 295.099 276.939 294.651 276.939 cv
294.301 276.939 293.979 277.037 293.685 277.219 cv
293.391 277.401 293.181 277.667 293.055 278.017 cv
292.915 278.367 292.859 278.871 292.859 279.529 cv
292.859 283.295 li
291.627 283.295 li
cp
f
308.258 280.957 mo
309.532 281.111 li
309.322 281.867 308.944 282.441 308.412 282.847 cv
307.867 283.253 307.18 283.449 306.341 283.449 cv
305.276 283.449 304.423 283.127 303.806 282.483 cv
303.19 281.839 302.882 280.915 302.882 279.725 cv
302.882 278.507 303.19 277.555 303.82 276.883 cv
304.436 276.211 305.262 275.875 306.27 275.875 cv
307.236 275.875 308.035 276.211 308.65 276.869 cv
309.266 277.527 309.574 278.451 309.574 279.655 cv
309.574 279.739 309.561 279.837 309.561 279.977 cv
304.143 279.977 li
304.184 280.789 304.408 281.391 304.814 281.811 cv
305.22 282.231 305.724 282.441 306.341 282.441 cv
306.788 282.441 307.18 282.329 307.502 282.091 cv
307.811 281.867 308.062 281.489 308.258 280.957 cv
cp
304.212 278.969 mo
308.272 278.969 li
308.216 278.353 308.062 277.905 307.811 277.597 cv
307.418 277.121 306.9 276.883 306.285 276.883 cv
305.71 276.883 305.234 277.079 304.856 277.457 cv
304.464 277.835 304.255 278.339 304.212 278.969 cv
cp
f
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
48.0438 228.96 mo
494.444 228.96 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
32.3759 229.021 mo
32.3759 228.013 32.4719 227.197 32.6879 226.573 cv
32.8919 225.949 33.2039 225.469 33.6119 225.133 cv
34.0199 224.797 34.5479 224.629 35.1719 224.629 cv
35.6279 224.629 36.0359 224.725 36.3839 224.917 cv
36.7199 225.109 37.0079 225.373 37.2359 225.721 cv
37.4639 226.069 37.6439 226.489 37.7759 226.993 cv
37.8959 227.497 37.9679 228.181 37.9679 229.021 cv
37.9679 230.029 37.8599 230.845 37.6559 231.469 cv
37.4519 232.093 37.1399 232.561 36.7319 232.897 cv
36.3239 233.233 35.7959 233.389 35.1719 233.389 cv
34.3319 233.389 33.6839 233.101 33.2159 232.513 cv
32.6519 231.805 32.3759 230.641 32.3759 229.021 cv
cp
33.4559 229.021 mo
33.4559 230.437 33.6119 231.373 33.9479 231.841 cv
34.2719 232.309 34.6799 232.537 35.1599 232.537 cv
35.6399 232.537 36.0479 232.309 36.3839 231.841 cv
36.7199 231.373 36.8879 230.437 36.8879 229.021 cv
36.8879 227.605 36.7199 226.669 36.3839 226.201 cv
36.0479 225.745 35.6399 225.505 35.1599 225.505 cv
34.6679 225.505 34.2839 225.709 33.9959 226.117 cv
33.6359 226.645 33.4559 227.617 33.4559 229.021 cv
cp
f
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
48.0438 182.406 mo
494.444 182.406 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
32.3759 184.447 mo
33.4799 184.363 li
33.5519 184.903 33.7439 185.311 34.0439 185.575 cv
34.3439 185.851 34.7039 185.983 35.1239 185.983 cv
35.6279 185.983 36.0599 185.791 36.4199 185.407 cv
36.7679 185.023 36.9479 184.519 36.9479 183.883 cv
36.9479 183.283 36.7679 182.815 36.4319 182.467 cv
36.0959 182.119 35.6519 181.939 35.1119 181.939 cv
34.7759 181.939 34.4639 182.023 34.1879 182.179 cv
33.9119 182.335 33.6959 182.527 33.5519 182.767 cv
32.5559 182.647 li
33.3839 178.231 li
37.6559 178.231 li
37.6559 179.239 li
34.2359 179.239 li
33.7679 181.543 li
34.2839 181.183 34.8239 181.003 35.3879 181.003 cv
36.1319 181.003 36.7679 181.267 37.2839 181.783 cv
37.7999 182.311 38.0639 182.971 38.0639 183.787 cv
38.0639 184.567 37.8359 185.239 37.3799 185.803 cv
36.8279 186.499 36.0839 186.835 35.1239 186.835 cv
34.3439 186.835 33.7079 186.619 33.2159 186.187 cv
32.7119 185.755 32.4359 185.179 32.3759 184.447 cv
cp
f
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
48.0438 135.853 mo
494.444 135.853 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
29.676 140.15 mo
28.62 140.15 li
28.62 133.43 li
28.356 133.67 28.02 133.922 27.612 134.162 cv
27.204 134.402 26.832 134.582 26.508 134.702 cv
26.508 133.682 li
27.096 133.406 27.612 133.07 28.056 132.674 cv
28.488 132.29 28.8 131.906 28.992 131.522 cv
29.676 131.522 li
29.676 140.15 li
cp
f
32.376 135.914 mo
32.376 134.906 32.472 134.09 32.688 133.466 cv
32.892 132.842 33.204 132.362 33.612 132.026 cv
34.02 131.69 34.548 131.522 35.172 131.522 cv
35.628 131.522 36.036 131.618 36.384 131.81 cv
36.72 132.002 37.008 132.266 37.236 132.614 cv
37.464 132.962 37.644 133.382 37.776 133.886 cv
37.896 134.39 37.968 135.074 37.968 135.914 cv
37.968 136.922 37.86 137.738 37.656 138.362 cv
37.452 138.986 37.14 139.454 36.732 139.79 cv
36.324 140.126 35.796 140.282 35.172 140.282 cv
34.332 140.282 33.684 139.994 33.216 139.406 cv
32.652 138.698 32.376 137.534 32.376 135.914 cv
cp
33.456 135.914 mo
33.456 137.33 33.612 138.266 33.948 138.734 cv
34.272 139.202 34.68 139.43 35.16 139.43 cv
35.64 139.43 36.048 139.202 36.384 138.734 cv
36.72 138.266 36.888 137.33 36.888 135.914 cv
36.888 134.498 36.72 133.562 36.384 133.094 cv
36.048 132.638 35.64 132.398 35.16 132.398 cv
34.668 132.398 34.284 132.602 33.996 133.01 cv
33.636 133.538 33.456 134.51 33.456 135.914 cv
cp
f
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
48.0438 89.299 mo
494.444 89.299 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
29.676 93.5959 mo
28.62 93.5959 li
28.62 86.8759 li
28.356 87.1159 28.02 87.3679 27.612 87.6079 cv
27.204 87.8479 26.832 88.0279 26.508 88.1479 cv
26.508 87.1279 li
27.096 86.8519 27.612 86.5159 28.056 86.1199 cv
28.488 85.7359 28.8 85.3519 28.992 84.9679 cv
29.676 84.9679 li
29.676 93.5959 li
cp
f
32.376 91.3399 mo
33.48 91.2559 li
33.552 91.7959 33.744 92.2039 34.044 92.4679 cv
34.344 92.7439 34.704 92.8759 35.124 92.8759 cv
35.628 92.8759 36.06 92.6839 36.42 92.2999 cv
36.768 91.9159 36.948 91.4119 36.948 90.7759 cv
36.948 90.1759 36.768 89.7079 36.432 89.3599 cv
36.096 89.0119 35.652 88.8319 35.112 88.8319 cv
34.776 88.8319 34.464 88.9159 34.188 89.0719 cv
33.912 89.2279 33.696 89.4199 33.552 89.6599 cv
32.556 89.5399 li
33.384 85.1239 li
37.656 85.1239 li
37.656 86.1319 li
34.236 86.1319 li
33.768 88.4359 li
34.284 88.0759 34.824 87.8959 35.388 87.8959 cv
36.132 87.8959 36.768 88.1599 37.284 88.6759 cv
37.8 89.2039 38.064 89.8639 38.064 90.6799 cv
38.064 91.4599 37.836 92.1319 37.38 92.6959 cv
36.828 93.3919 36.084 93.7279 35.124 93.7279 cv
34.344 93.7279 33.708 93.5119 33.216 93.0799 cv
32.712 92.6479 32.436 92.0719 32.376 91.3399 cv
cp
f
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
48.0438 42.7454 mo
494.444 42.7454 li
1 /0 /CSD get_res sepcs
.2 sep
@
grestore
31.236 46.0343 mo
31.236 47.0423 li
25.56 47.0423 li
25.548 46.7903 25.596 46.5503 25.692 46.3103 cv
25.836 45.9263 26.064 45.5543 26.376 45.1703 cv
26.688 44.7983 27.156 44.3663 27.756 43.8623 cv
28.692 43.1063 29.316 42.5063 29.652 42.0503 cv
29.976 41.6063 30.144 41.1863 30.144 40.7783 cv
30.144 40.3703 29.988 40.0103 29.688 39.7223 cv
29.388 39.4343 29.004 39.2903 28.524 39.2903 cv
28.02 39.2903 27.612 39.4463 27.312 39.7463 cv
27 40.0583 26.844 40.4783 26.844 41.0183 cv
25.764 40.8983 li
25.836 40.0943 26.112 39.4823 26.592 39.0503 cv
27.072 38.6303 27.732 38.4143 28.548 38.4143 cv
29.364 38.4143 30.024 38.6543 30.504 39.1103 cv
30.984 39.5663 31.224 40.1303 31.224 40.8023 cv
31.224 41.1503 31.152 41.4863 31.008 41.8223 cv
30.864 42.1583 30.636 42.5063 30.312 42.8663 cv
29.988 43.2383 29.448 43.7423 28.692 44.3783 cv
28.056 44.9063 27.648 45.2663 27.468 45.4583 cv
27.288 45.6503 27.144 45.8423 27.024 46.0343 cv
31.236 46.0343 li
cp
f
32.376 42.8063 mo
32.376 41.7983 32.472 40.9823 32.688 40.3583 cv
32.892 39.7343 33.204 39.2543 33.612 38.9183 cv
34.02 38.5823 34.548 38.4143 35.172 38.4143 cv
35.628 38.4143 36.036 38.5103 36.384 38.7023 cv
36.72 38.8943 37.008 39.1583 37.236 39.5063 cv
37.464 39.8543 37.644 40.2743 37.776 40.7783 cv
37.896 41.2823 37.968 41.9663 37.968 42.8063 cv
37.968 43.8143 37.86 44.6303 37.656 45.2543 cv
37.452 45.8783 37.14 46.3463 36.732 46.6823 cv
36.324 47.0183 35.796 47.1743 35.172 47.1743 cv
34.332 47.1743 33.684 46.8863 33.216 46.2983 cv
32.652 45.5903 32.376 44.4263 32.376 42.8063 cv
cp
33.456 42.8063 mo
33.456 44.2223 33.612 45.1583 33.948 45.6263 cv
34.272 46.0943 34.68 46.3223 35.16 46.3223 cv
35.64 46.3223 36.048 46.0943 36.384 45.6263 cv
36.72 45.1583 36.888 44.2223 36.888 42.8063 cv
36.888 41.3903 36.72 40.4543 36.384 39.9863 cv
36.048 39.5303 35.64 39.2903 35.16 39.2903 cv
34.668 39.2903 34.284 39.4943 33.996 39.9023 cv
33.636 40.4303 33.456 41.4023 33.456 42.8063 cv
cp
f
13.8735 174.348 mo
14.2095 173.018 li
15.3015 173.298 16.1415 173.802 16.7015 174.53 cv
17.2615 175.258 17.5415 176.14 17.5415 177.176 cv
17.5415 178.254 17.3315 179.136 16.8975 179.808 cv
16.4635 180.494 15.8335 181.012 14.9935 181.362 cv
14.1535 181.712 13.2575 181.88 12.3055 181.88 cv
11.2695 181.88 10.3595 181.684 9.5755 181.292 cv
8.7915 180.9 8.2035 180.326 7.7975 179.584 cv
7.4055 178.856 7.1955 178.044 7.1955 177.148 cv
7.1955 176.154 7.4615 175.314 7.9655 174.628 cv
8.4695 173.942 9.1835 173.466 10.1075 173.2 cv
10.4155 174.502 li
9.6875 174.74 9.1695 175.076 8.8335 175.51 cv
8.4975 175.958 8.3295 176.504 8.3295 177.176 cv
8.3295 177.96 8.5255 178.604 8.8895 179.122 cv
9.2535 179.64 9.7575 180.004 10.3735 180.214 cv
10.9895 180.424 11.6335 180.522 12.2915 180.522 cv
13.1595 180.522 13.9015 180.396 14.5315 180.144 cv
15.1755 179.892 15.6515 179.514 15.9595 178.982 cv
16.2675 178.464 16.4215 177.904 16.4215 177.288 cv
16.4215 176.546 16.2115 175.916 15.7775 175.398 cv
15.3575 174.894 14.7135 174.544 13.8735 174.348 cv
cp
f
17.3875 171.546 mo
7.3635 171.546 li
7.3635 170.314 li
10.9615 170.314 li
10.3035 169.754 9.9675 169.026 9.9675 168.144 cv
9.9675 167.612 10.0795 167.136 10.2895 166.744 cv
10.4995 166.352 10.7935 166.058 11.1575 165.89 cv
11.5355 165.722 12.0815 165.638 12.7815 165.638 cv
17.3875 165.638 li
17.3875 166.87 li
12.7815 166.87 li
12.1655 166.87 11.7175 167.01 11.4375 167.276 cv
11.1575 167.542 11.0175 167.92 11.0175 168.396 cv
11.0175 168.76 11.1155 169.11 11.3115 169.432 cv
11.5075 169.754 11.7595 169.978 12.0815 170.118 cv
12.4035 170.258 12.8515 170.314 13.4115 170.314 cv
17.3875 170.314 li
17.3875 171.546 li
cp
f
16.4915 159.028 mo
16.8835 159.49 17.1635 159.924 17.3175 160.344 cv
17.4575 160.764 17.5415 161.226 17.5415 161.702 cv
17.5415 162.5 17.3595 163.116 16.9675 163.536 cv
16.5755 163.97 16.0855 164.18 15.4695 164.18 cv
15.1195 164.18 14.7975 164.11 14.5035 163.942 cv
14.2095 163.774 13.9715 163.564 13.7895 163.298 cv
13.6215 163.046 13.4815 162.752 13.3835 162.416 cv
13.3275 162.178 13.2715 161.814 13.2015 161.324 cv
13.0895 160.33 12.9495 159.602 12.7815 159.126 cv
12.6135 159.126 12.5155 159.126 12.4595 159.126 cv
11.9555 159.126 11.6055 159.238 11.3955 159.462 cv
11.1155 159.784 10.9755 160.26 10.9755 160.876 cv
10.9755 161.464 11.0875 161.884 11.2835 162.164 cv
11.4935 162.444 11.8575 162.64 12.3615 162.766 cv
12.1935 163.97 li
11.6895 163.858 11.2695 163.676 10.9475 163.424 cv
10.6395 163.172 10.3875 162.822 10.2195 162.346 cv
10.0515 161.87 9.9675 161.324 9.9675 160.694 cv
9.9675 160.078 10.0515 159.574 10.1915 159.182 cv
10.3315 158.79 10.5135 158.51 10.7375 158.328 cv
10.9615 158.146 11.2275 158.02 11.5635 157.95 cv
11.7875 157.908 12.1655 157.88 12.7115 157.88 cv
14.3495 157.88 li
15.4975 157.88 16.2115 157.866 16.5195 157.81 cv
16.8275 157.754 17.1075 157.656 17.3875 157.488 cv
17.3875 158.776 li
17.1355 158.916 16.8415 159 16.4915 159.028 cv
cp
13.7475 159.126 mo
13.9295 159.574 14.0835 160.246 14.2095 161.142 cv
14.2935 161.646 14.3775 162.01 14.4615 162.22 cv
14.5455 162.43 14.6855 162.584 14.8535 162.696 cv
15.0355 162.808 15.2315 162.864 15.4415 162.864 cv
15.7775 162.864 16.0435 162.752 16.2675 162.5 cv
16.4915 162.248 16.5895 161.884 16.5895 161.408 cv
16.5895 160.932 16.4915 160.512 16.2815 160.148 cv
16.0715 159.784 15.7915 159.504 15.4275 159.322 cv
15.1475 159.196 14.7415 159.126 14.1955 159.126 cv
13.7475 159.126 li
cp
f
17.3875 155.973 mo
10.1215 155.973 li
10.1215 154.867 li
11.1575 154.867 li
10.3735 154.335 9.9675 153.565 9.9675 152.557 cv
9.9675 152.123 10.0515 151.717 10.2055 151.353 cv
10.3595 150.989 10.5695 150.709 10.8215 150.527 cv
11.0735 150.345 11.3815 150.219 11.7315 150.149 cv
11.9555 150.107 12.3615 150.079 12.9215 150.079 cv
17.3875 150.079 li
17.3875 151.311 li
12.9775 151.311 li
12.4735 151.311 12.1095 151.367 11.8575 151.451 cv
11.6055 151.549 11.4095 151.717 11.2555 151.955 cv
11.1155 152.207 11.0315 152.487 11.0315 152.809 cv
11.0315 153.341 11.1995 153.803 11.5355 154.181 cv
11.8715 154.559 12.5015 154.741 13.4255 154.741 cv
17.3875 154.741 li
17.3875 155.973 li
cp
f
17.9755 148.411 mo
18.1575 147.221 li
18.5215 147.165 18.7875 147.025 18.9555 146.801 cv
19.1795 146.493 19.3055 146.087 19.3055 145.555 cv
19.3055 144.995 19.1795 144.547 18.9555 144.239 cv
18.7315 143.931 18.4095 143.707 18.0035 143.595 cv
17.7515 143.539 17.2335 143.511 16.4355 143.511 cv
17.0795 144.057 17.3875 144.729 17.3875 145.527 cv
17.3875 146.535 17.0375 147.305 16.3095 147.851 cv
15.5955 148.397 14.7275 148.663 13.7195 148.663 cv
13.0335 148.663 12.3895 148.537 11.8015 148.285 cv
11.2135 148.033 10.7655 147.669 10.4435 147.193 cv
10.1355 146.717 9.9675 146.157 9.9675 145.513 cv
9.9675 144.659 10.3175 143.959 11.0035 143.399 cv
10.1215 143.399 li
10.1215 142.265 li
16.4075 142.265 li
17.5275 142.265 18.3115 142.391 18.7875 142.615 cv
19.2635 142.839 19.6275 143.203 19.9075 143.707 cv
20.1735 144.211 20.3135 144.813 20.3135 145.541 cv
20.3135 146.409 20.1175 147.109 19.7255 147.641 cv
19.3335 148.173 18.7595 148.439 17.9755 148.411 cv
cp
13.6215 147.389 mo
14.5735 147.389 15.2735 147.207 15.7075 146.829 cv
16.1555 146.451 16.3655 145.975 16.3655 145.401 cv
16.3655 144.841 16.1555 144.379 15.7215 143.987 cv
15.2875 143.609 14.6015 143.413 13.6635 143.413 cv
12.7815 143.413 12.1095 143.609 11.6615 144.001 cv
11.2135 144.393 10.9755 144.869 10.9755 145.429 cv
10.9755 145.975 11.1995 146.437 11.6475 146.815 cv
12.0955 147.207 12.7535 147.389 13.6215 147.389 cv
cp
f
15.0495 135.431 mo
15.2035 134.157 li
15.9595 134.367 16.5335 134.745 16.9395 135.277 cv
17.3455 135.823 17.5415 136.509 17.5415 137.349 cv
17.5415 138.413 17.2195 139.267 16.5755 139.883 cv
15.9315 140.499 15.0075 140.807 13.8175 140.807 cv
12.5995 140.807 11.6475 140.499 10.9755 139.869 cv
10.3035 139.253 9.9675 138.427 9.9675 137.419 cv
9.9675 136.453 10.3035 135.655 10.9615 135.039 cv
11.6195 134.423 12.5435 134.115 13.7475 134.115 cv
13.8315 134.115 13.9295 134.129 14.0695 134.129 cv
14.0695 139.547 li
14.8815 139.505 15.4835 139.281 15.9035 138.875 cv
16.3235 138.469 16.5335 137.965 16.5335 137.349 cv
16.5335 136.901 16.4215 136.509 16.1835 136.187 cv
15.9595 135.879 15.5815 135.627 15.0495 135.431 cv
cp
13.0615 139.477 mo
13.0615 135.417 li
12.4455 135.473 11.9975 135.627 11.6895 135.879 cv
11.2135 136.271 10.9755 136.789 10.9755 137.405 cv
10.9755 137.979 11.1715 138.455 11.5495 138.833 cv
11.9275 139.225 12.4315 139.435 13.0615 139.477 cv
cp
f
8.7775 128.725 mo
7.3635 128.725 li
7.3635 127.493 li
8.7775 127.493 li
8.7775 128.725 li
cp
17.3875 128.725 mo
10.1215 128.725 li
10.1215 127.493 li
17.3875 127.493 li
17.3875 128.725 li
cp
f
17.3875 125.615 mo
10.1215 125.615 li
10.1215 124.509 li
11.1575 124.509 li
10.3735 123.977 9.9675 123.207 9.9675 122.199 cv
9.9675 121.765 10.0515 121.359 10.2055 120.995 cv
10.3595 120.631 10.5695 120.351 10.8215 120.169 cv
11.0735 119.987 11.3815 119.861 11.7315 119.791 cv
11.9555 119.749 12.3615 119.721 12.9215 119.721 cv
17.3875 119.721 li
17.3875 120.953 li
12.9775 120.953 li
12.4735 120.953 12.1095 121.009 11.8575 121.093 cv
11.6055 121.191 11.4095 121.359 11.2555 121.597 cv
11.1155 121.849 11.0315 122.129 11.0315 122.451 cv
11.0315 122.983 11.1995 123.445 11.5355 123.823 cv
11.8715 124.201 12.5015 124.383 13.4255 124.383 cv
17.3875 124.383 li
17.3875 125.615 li
cp
f
17.3875 113.841 mo
7.3635 113.841 li
7.3635 112.511 li
16.2115 112.511 li
16.2115 107.569 li
17.3875 107.569 li
17.3875 113.841 li
cp
f
17.3875 105.999 mo
7.3635 105.999 li
7.3635 102.541 li
7.3635 101.771 7.4195 101.183 7.5035 100.763 cv
7.6435 100.189 7.8955 99.6991 8.2315 99.2931 cv
8.6795 98.7611 9.2535 98.3691 9.9395 98.1031 cv
10.6395 97.8511 11.4235 97.7111 12.3195 97.7111 cv
13.0895 97.7111 13.7615 97.8091 14.3495 97.9771 cv
14.9375 98.1591 15.4275 98.3831 15.8055 98.6631 cv
16.1975 98.9431 16.4915 99.2511 16.7155 99.5871 cv
16.9395 99.9231 17.1075 100.315 17.2195 100.777 cv
17.3315 101.253 17.3875 101.785 17.3875 102.387 cv
17.3875 105.999 li
cp
16.2115 104.669 mo
16.2115 102.527 li
16.2115 101.869 16.1555 101.351 16.0295 100.973 cv
15.9035 100.609 15.7215 100.301 15.4975 100.077 cv
15.1895 99.7691 14.7695 99.5171 14.2375 99.3491 cv
13.7055 99.1811 13.0615 99.0831 12.3055 99.0831 cv
11.2555 99.0831 10.4435 99.2651 9.8835 99.6011 cv
9.3235 99.9371 8.9455 100.357 8.7495 100.847 cv
8.6235 101.211 8.5535 101.785 8.5535 102.569 cv
8.5535 104.669 li
16.2115 104.669 li
cp
f
17.3875 95.8887 mo
7.3635 95.8887 li
7.3635 92.4307 li
7.3635 91.6607 7.4195 91.0727 7.5035 90.6527 cv
7.6435 90.0787 7.8955 89.5887 8.2315 89.1827 cv
8.6795 88.6507 9.2535 88.2587 9.9395 87.9927 cv
10.6395 87.7407 11.4235 87.6007 12.3195 87.6007 cv
13.0895 87.6007 13.7615 87.6987 14.3495 87.8667 cv
14.9375 88.0487 15.4275 88.2727 15.8055 88.5527 cv
16.1975 88.8327 16.4915 89.1407 16.7155 89.4767 cv
16.9395 89.8127 17.1075 90.2047 17.2195 90.6667 cv
17.3315 91.1427 17.3875 91.6747 17.3875 92.2767 cv
17.3875 95.8887 li
cp
16.2115 94.5587 mo
16.2115 92.4167 li
16.2115 91.7587 16.1555 91.2407 16.0295 90.8627 cv
15.9035 90.4987 15.7215 90.1907 15.4975 89.9667 cv
15.1895 89.6587 14.7695 89.4067 14.2375 89.2387 cv
13.7055 89.0707 13.0615 88.9727 12.3055 88.9727 cv
11.2555 88.9727 10.4435 89.1547 9.8835 89.4907 cv
9.3235 89.8267 8.9455 90.2467 8.7495 90.7367 cv
8.6235 91.1007 8.5535 91.6747 8.5535 92.4587 cv
8.5535 94.5587 li
16.2115 94.5587 li
cp
f
17.3875 83.2304 mo
8.5535 83.2304 li
8.5535 86.5344 li
7.3635 86.5344 li
7.3635 78.5824 li
8.5535 78.5824 li
8.5535 81.9004 li
17.3875 81.9004 li
17.3875 83.2304 li
cp
f
14.3775 77.8566 mo
13.1455 77.8566 li
13.1455 74.0766 li
14.3775 74.0766 li
14.3775 77.8566 li
cp
f
13.8735 65.4105 mo
14.2095 64.0805 li
15.3015 64.3605 16.1415 64.8645 16.7015 65.5925 cv
17.2615 66.3205 17.5415 67.2025 17.5415 68.2385 cv
17.5415 69.3165 17.3315 70.1985 16.8975 70.8705 cv
16.4635 71.5565 15.8335 72.0745 14.9935 72.4245 cv
14.1535 72.7745 13.2575 72.9425 12.3055 72.9425 cv
11.2695 72.9425 10.3595 72.7465 9.5755 72.3545 cv
8.7915 71.9625 8.2035 71.3885 7.7975 70.6465 cv
7.4055 69.9185 7.1955 69.1065 7.1955 68.2105 cv
7.1955 67.2165 7.4615 66.3765 7.9655 65.6905 cv
8.4695 65.0045 9.1835 64.5285 10.1075 64.2625 cv
10.4155 65.5645 li
9.6875 65.8025 9.1695 66.1385 8.8335 66.5725 cv
8.4975 67.0205 8.3295 67.5665 8.3295 68.2385 cv
8.3295 69.0225 8.5255 69.6665 8.8895 70.1845 cv
9.2535 70.7025 9.7575 71.0665 10.3735 71.2765 cv
10.9895 71.4865 11.6335 71.5845 12.2915 71.5845 cv
13.1595 71.5845 13.9015 71.4585 14.5315 71.2065 cv
15.1755 70.9545 15.6515 70.5765 15.9595 70.0445 cv
16.2675 69.5265 16.4215 68.9665 16.4215 68.3505 cv
16.4215 67.6085 16.2115 66.9785 15.7775 66.4605 cv
15.3575 65.9565 14.7135 65.6065 13.8735 65.4105 cv
cp
f
13.8315 57.8061 mo
12.2495 57.7921 li
11.1855 57.7921 10.6395 58.1981 10.6255 59.0101 cv
10.6255 59.6261 10.8775 60.1161 11.3815 60.4801 cv
12.0115 60.9561 12.7395 61.2781 13.5655 61.4321 cv
14.5735 61.6281 15.3155 61.6141 15.7915 61.3621 cv
16.2815 61.1101 16.5195 60.7041 16.5195 60.1441 cv
16.5195 59.5421 16.0435 58.9821 15.0635 58.4641 cv
13.8315 57.8061 li
cp
9.5615 58.8001 mo
9.5335 57.3721 10.2615 56.6721 11.7315 56.6861 cv
11.7315 56.6861 11.0735 56.3361 9.7295 55.6221 cv
9.7295 54.5021 li
13.8875 56.7141 li
15.3715 56.7281 li
15.5955 56.7281 15.8055 56.6721 15.9875 56.5461 cv
16.2115 56.4061 16.3235 56.2661 16.3235 56.1121 cv
16.3235 55.5101 li
17.3875 55.7061 li
17.3875 56.4761 li
17.3875 56.9101 17.2055 57.2741 16.8135 57.5821 cv
16.6175 57.7221 16.3235 57.8061 15.9315 57.8061 cv
16.4215 58.1141 16.8695 58.5061 17.2755 59.0101 cv
17.4575 59.2621 17.5415 59.7101 17.5415 60.3541 cv
17.5275 61.4181 17.1915 62.1461 16.5195 62.5381 cv
15.8195 62.9301 14.8255 63.0141 13.5655 62.7621 cv
12.2215 62.5101 11.2275 62.0201 10.6115 61.3201 cv
9.9255 60.5501 9.5755 59.7101 9.5615 58.8001 cv
cp
f
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
56.3104 228.96 mo
61.0342 228.96 li
56.3104 228.96 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
56.3104 228.96 mo
61.0342 228.96 li
56.3104 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
89.3771 228.96 mo
94.1009 228.96 li
89.3771 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
89.3771 228.96 mo
94.1009 228.96 li
89.3771 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
122.444 228.96 mo
127.168 228.96 li
127.168 76.7754 li
122.444 76.7754 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
122.444 228.96 mo
127.168 228.96 li
127.168 76.7754 li
122.444 76.7754 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
155.51 228.96 mo
160.234 228.96 li
155.51 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
155.51 228.96 mo
160.234 228.96 li
155.51 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
188.577 228.96 mo
193.301 228.96 li
188.577 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
188.577 228.96 mo
193.301 228.96 li
188.577 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
221.644 228.96 mo
226.368 228.96 li
221.644 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
221.644 228.96 mo
226.368 228.96 li
221.644 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
254.71 228.96 mo
259.434 228.96 li
254.71 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
254.71 228.96 mo
259.434 228.96 li
254.71 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
287.777 228.96 mo
292.501 228.96 li
287.777 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
287.777 228.96 mo
292.501 228.96 li
287.777 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
320.844 228.96 mo
325.568 228.96 li
325.568 130.618 li
320.844 130.618 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
320.844 228.96 mo
325.568 228.96 li
325.568 130.618 li
320.844 130.618 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
353.91 228.96 mo
358.634 228.96 li
353.91 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
353.91 228.96 mo
358.634 228.96 li
353.91 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
386.977 228.96 mo
391.701 228.96 li
391.701 227.261 li
386.977 227.261 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
386.977 228.96 mo
391.701 228.96 li
391.701 227.261 li
386.977 227.261 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
420.044 228.96 mo
424.768 228.96 li
420.044 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
420.044 228.96 mo
424.768 228.96 li
420.044 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
453.11 228.96 mo
457.834 228.96 li
453.11 228.96 li
cp
.106783 .565698 .748501 .00555428 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
453.11 228.96 mo
457.834 228.96 li
453.11 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
61.0342 228.96 mo
65.758 228.96 li
65.758 222.474 li
61.0342 222.474 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
61.0342 228.96 mo
65.758 228.96 li
65.758 222.474 li
61.0342 222.474 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
94.1009 228.96 mo
98.8247 228.96 li
94.1009 228.96 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
94.1009 228.96 mo
98.8247 228.96 li
94.1009 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
127.168 228.96 mo
131.891 228.96 li
131.891 126.375 li
127.168 126.375 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
127.168 228.96 mo
131.891 228.96 li
131.891 126.375 li
127.168 126.375 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
160.234 228.96 mo
164.958 228.96 li
164.958 217.302 li
160.234 217.302 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
160.234 228.96 mo
164.958 228.96 li
164.958 217.302 li
160.234 217.302 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
193.301 228.96 mo
198.025 228.96 li
198.025 17.76 li
193.301 17.76 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
193.301 228.96 mo
198.025 228.96 li
198.025 17.76 li
193.301 17.76 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
226.368 228.96 mo
231.091 228.96 li
226.368 228.96 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
226.368 228.96 mo
231.091 228.96 li
226.368 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
259.434 228.96 mo
264.158 228.96 li
259.434 228.96 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
259.434 228.96 mo
264.158 228.96 li
259.434 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
292.501 228.96 mo
297.225 228.96 li
292.501 228.96 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
292.501 228.96 mo
297.225 228.96 li
292.501 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
325.568 228.96 mo
330.291 228.96 li
325.568 228.96 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
325.568 228.96 mo
330.291 228.96 li
325.568 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
358.634 228.96 mo
363.358 228.96 li
363.358 178.132 li
358.634 178.132 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
358.634 228.96 mo
363.358 228.96 li
363.358 178.132 li
358.634 178.132 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
391.701 228.96 mo
396.425 228.96 li
391.701 228.96 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
391.701 228.96 mo
396.425 228.96 li
391.701 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
424.768 228.96 mo
429.491 228.96 li
429.491 184.486 li
424.768 184.486 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
424.768 228.96 mo
429.491 228.96 li
429.491 184.486 li
424.768 184.486 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
457.834 228.96 mo
462.558 228.96 li
462.558 202.723 li
457.834 202.723 li
cp
.699794 .114168 .779477 .00390631 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
457.834 228.96 mo
462.558 228.96 li
462.558 202.723 li
457.834 202.723 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
65.758 228.96 mo
70.4818 228.96 li
65.758 228.96 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
65.758 228.96 mo
70.4818 228.96 li
65.758 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
98.8247 228.96 mo
103.549 228.96 li
103.549 228.518 li
98.8247 228.518 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
98.8247 228.96 mo
103.549 228.96 li
103.549 228.518 li
98.8247 228.518 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
131.891 228.96 mo
136.615 228.96 li
136.615 54.1234 li
131.891 54.1234 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
131.891 228.96 mo
136.615 228.96 li
136.615 54.1234 li
131.891 54.1234 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
164.958 228.96 mo
169.682 228.96 li
164.958 228.96 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
164.958 228.96 mo
169.682 228.96 li
164.958 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
198.025 228.96 mo
202.749 228.96 li
202.749 191.54 li
198.025 191.54 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
198.025 228.96 mo
202.749 228.96 li
202.749 191.54 li
198.025 191.54 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
231.091 228.96 mo
235.815 228.96 li
235.815 207.869 li
231.091 207.869 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
231.091 228.96 mo
235.815 228.96 li
235.815 207.869 li
231.091 207.869 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
264.158 228.96 mo
268.882 228.96 li
268.882 221.371 li
264.158 221.371 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
264.158 228.96 mo
268.882 228.96 li
268.882 221.371 li
264.158 221.371 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
297.225 228.96 mo
301.949 228.96 li
297.225 228.96 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
297.225 228.96 mo
301.949 228.96 li
297.225 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
330.291 228.96 mo
335.015 228.96 li
330.291 228.96 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
330.291 228.96 mo
335.015 228.96 li
330.291 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
363.358 228.96 mo
368.082 228.96 li
363.358 228.96 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
363.358 228.96 mo
368.082 228.96 li
363.358 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
396.425 228.96 mo
401.149 228.96 li
401.149 193.28 li
396.425 193.28 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
396.425 228.96 mo
401.149 228.96 li
401.149 193.28 li
396.425 193.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
429.491 228.96 mo
434.215 228.96 li
429.491 228.96 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
429.491 228.96 mo
434.215 228.96 li
429.491 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
462.558 228.96 mo
467.282 228.96 li
467.282 215.117 li
462.558 215.117 li
cp
.177707 .828367 .648554 .0424201 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
462.558 228.96 mo
467.282 228.96 li
467.282 215.117 li
462.558 215.117 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
70.4818 228.96 mo
75.2057 228.96 li
70.4818 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
70.4818 228.96 mo
75.2057 228.96 li
70.4818 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
103.549 228.96 mo
108.272 228.96 li
103.549 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
103.549 228.96 mo
108.272 228.96 li
103.549 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
136.615 228.96 mo
141.339 228.96 li
136.615 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
136.615 228.96 mo
141.339 228.96 li
136.615 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
169.682 228.96 mo
174.406 228.96 li
169.682 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
169.682 228.96 mo
174.406 228.96 li
169.682 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
202.749 228.96 mo
207.472 228.96 li
207.472 223.763 li
202.749 223.763 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
202.749 228.96 mo
207.472 228.96 li
207.472 223.763 li
202.749 223.763 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
235.815 228.96 mo
240.539 228.96 li
235.815 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
235.815 228.96 mo
240.539 228.96 li
235.815 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
268.882 228.96 mo
273.606 228.96 li
268.882 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
268.882 228.96 mo
273.606 228.96 li
268.882 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
301.949 228.96 mo
306.672 228.96 li
301.949 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
301.949 228.96 mo
306.672 228.96 li
301.949 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
335.015 228.96 mo
339.739 228.96 li
335.015 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
335.015 228.96 mo
339.739 228.96 li
335.015 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
368.082 228.96 mo
372.806 228.96 li
368.082 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
368.082 228.96 mo
372.806 228.96 li
368.082 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
401.149 228.96 mo
405.872 228.96 li
401.149 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
401.149 228.96 mo
405.872 228.96 li
401.149 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
434.215 228.96 mo
438.939 228.96 li
434.215 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
434.215 228.96 mo
438.939 228.96 li
434.215 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
467.282 228.96 mo
472.006 228.96 li
467.282 228.96 li
cp
.546685 .59231 .000915541 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
467.282 228.96 mo
472.006 228.96 li
467.282 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
75.2057 228.96 mo
79.9295 228.96 li
75.2057 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
75.2057 228.96 mo
79.9295 228.96 li
75.2057 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
108.272 228.96 mo
112.996 228.96 li
108.272 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
108.272 228.96 mo
112.996 228.96 li
108.272 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
141.339 228.96 mo
146.063 228.96 li
146.063 197.065 li
141.339 197.065 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
141.339 228.96 mo
146.063 228.96 li
146.063 197.065 li
141.339 197.065 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
174.406 228.96 mo
179.129 228.96 li
179.129 188.222 li
174.406 188.222 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
174.406 228.96 mo
179.129 228.96 li
179.129 188.222 li
174.406 188.222 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
207.472 228.96 mo
212.196 228.96 li
212.196 198.232 li
207.472 198.232 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
207.472 228.96 mo
212.196 228.96 li
212.196 198.232 li
207.472 198.232 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
240.539 228.96 mo
245.263 228.96 li
240.539 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
240.539 228.96 mo
245.263 228.96 li
240.539 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
273.606 228.96 mo
278.329 228.96 li
273.606 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
273.606 228.96 mo
278.329 228.96 li
273.606 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
306.672 228.96 mo
311.396 228.96 li
311.396 226.734 li
306.672 226.734 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
306.672 228.96 mo
311.396 228.96 li
311.396 226.734 li
306.672 226.734 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
339.739 228.96 mo
344.463 228.96 li
339.739 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
339.739 228.96 mo
344.463 228.96 li
339.739 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
372.806 228.96 mo
377.529 228.96 li
377.529 209.123 li
372.806 209.123 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
372.806 228.96 mo
377.529 228.96 li
377.529 209.123 li
372.806 209.123 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
405.872 228.96 mo
410.596 228.96 li
405.872 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
405.872 228.96 mo
410.596 228.96 li
405.872 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
438.939 228.96 mo
443.663 228.96 li
438.939 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
438.939 228.96 mo
443.663 228.96 li
438.939 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
472.006 228.96 mo
476.729 228.96 li
472.006 228.96 li
cp
.396185 .482246 .627894 .126314 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
472.006 228.96 mo
476.729 228.96 li
472.006 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
79.9295 228.96 mo
84.6533 228.96 li
79.9295 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
79.9295 228.96 mo
84.6533 228.96 li
79.9295 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
112.996 228.96 mo
117.72 228.96 li
112.996 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
112.996 228.96 mo
117.72 228.96 li
112.996 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
146.063 228.96 mo
150.787 228.96 li
150.787 209.302 li
146.063 209.302 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
146.063 228.96 mo
150.787 228.96 li
150.787 209.302 li
146.063 209.302 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
179.129 228.96 mo
183.853 228.96 li
179.129 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
179.129 228.96 mo
183.853 228.96 li
179.129 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
212.196 228.96 mo
216.92 228.96 li
216.92 198.297 li
212.196 198.297 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
212.196 228.96 mo
216.92 228.96 li
216.92 198.297 li
212.196 198.297 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
245.263 228.96 mo
249.987 228.96 li
249.987 227.871 li
245.263 227.871 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
245.263 228.96 mo
249.987 228.96 li
249.987 227.871 li
245.263 227.871 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
278.329 228.96 mo
283.053 228.96 li
283.053 223.23 li
278.329 223.23 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
278.329 228.96 mo
283.053 228.96 li
283.053 223.23 li
278.329 223.23 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
311.396 228.96 mo
316.12 228.96 li
311.396 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
311.396 228.96 mo
316.12 228.96 li
311.396 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
344.463 228.96 mo
349.187 228.96 li
349.187 152.98 li
344.463 152.98 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
344.463 228.96 mo
349.187 228.96 li
349.187 152.98 li
344.463 152.98 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
377.529 228.96 mo
382.253 228.96 li
377.529 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
377.529 228.96 mo
382.253 228.96 li
377.529 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
410.596 228.96 mo
415.32 228.96 li
410.596 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
410.596 228.96 mo
415.32 228.96 li
410.596 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
443.663 228.96 mo
448.387 228.96 li
443.663 228.96 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
443.663 228.96 mo
448.387 228.96 li
443.663 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
476.729 228.96 mo
481.453 228.96 li
481.453 213.271 li
476.729 213.271 li
cp
.122103 .544396 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
476.729 228.96 mo
481.453 228.96 li
481.453 213.271 li
476.729 213.271 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
84.6533 228.96 mo
89.3771 228.96 li
84.6533 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
84.6533 228.96 mo
89.3771 228.96 li
84.6533 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
117.72 228.96 mo
122.444 228.96 li
117.72 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
117.72 228.96 mo
122.444 228.96 li
117.72 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
150.787 228.96 mo
155.51 228.96 li
150.787 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
150.787 228.96 mo
155.51 228.96 li
150.787 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
183.853 228.96 mo
188.577 228.96 li
183.853 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
183.853 228.96 mo
188.577 228.96 li
183.853 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
216.92 228.96 mo
221.644 228.96 li
221.644 194.919 li
216.92 194.919 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
216.92 228.96 mo
221.644 228.96 li
221.644 194.919 li
216.92 194.919 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
249.987 228.96 mo
254.71 228.96 li
254.71 211.66 li
249.987 211.66 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
249.987 228.96 mo
254.71 228.96 li
254.71 211.66 li
249.987 211.66 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
283.053 228.96 mo
287.777 228.96 li
283.053 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
283.053 228.96 mo
287.777 228.96 li
283.053 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
316.12 228.96 mo
320.844 228.96 li
316.12 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
316.12 228.96 mo
320.844 228.96 li
316.12 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
349.187 228.96 mo
353.91 228.96 li
353.91 181.187 li
349.187 181.187 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
349.187 228.96 mo
353.91 228.96 li
353.91 181.187 li
349.187 181.187 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
382.253 228.96 mo
386.977 228.96 li
382.253 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
382.253 228.96 mo
386.977 228.96 li
382.253 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
415.32 228.96 mo
420.044 228.96 li
415.32 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
415.32 228.96 mo
420.044 228.96 li
415.32 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
448.387 228.96 mo
453.11 228.96 li
448.387 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
448.387 228.96 mo
453.11 228.96 li
448.387 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
48.0438 228.96 mo
494.444 228.96 li
494.444 7.19995 li
48.0438 7.19995 li
48.0438 228.96 li
clp
481.453 228.96 mo
486.177 228.96 li
481.453 228.96 li
cp
.217563 .22443 .651911 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
481.453 228.96 mo
486.177 228.96 li
481.453 228.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
1.25 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
48.0438 228.96 mo
48.0438 7.19998 li
1 /0 /CSD get_res sepcs
.2 sep
@
494.444 228.96 mo
494.444 7.19998 li
@
48.0438 228.96 mo
494.444 228.96 li
@
48.0438 7.19998 mo
494.444 7.19998 li
@
411.547 22.0156 mo
415.369 11.9916 li
416.797 11.9916 li
420.899 22.0156 li
419.401 22.0156 li
418.225 18.9776 li
414.039 18.9776 li
412.933 22.0156 li
411.547 22.0156 li
cp
414.417 17.8996 mo
417.819 17.8996 li
416.769 15.1276 li
416.447 14.2876 416.209 13.5876 416.055 13.0416 cv
415.929 13.6856 415.747 14.3296 415.523 14.9596 cv
414.417 17.8996 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
421.781 22.0156 mo
421.781 11.9916 li
423.013 11.9916 li
423.013 22.0156 li
421.781 22.0156 li
cp
f
424.917 24.7876 mo
424.917 14.7496 li
426.037 14.7496 li
426.037 15.7016 li
426.289 15.3376 426.597 15.0576 426.933 14.8756 cv
427.269 14.6936 427.661 14.5956 428.137 14.5956 cv
428.753 14.5956 429.299 14.7636 429.775 15.0716 cv
430.251 15.3936 430.601 15.8416 430.853 16.4296 cv
431.091 17.0176 431.217 17.6476 431.217 18.3336 cv
431.217 19.0756 431.077 19.7476 430.811 20.3356 cv
430.545 20.9376 430.153 21.3996 429.649 21.7076 cv
429.145 22.0156 428.613 22.1696 428.053 22.1696 cv
427.633 22.1696 427.269 22.0856 426.947 21.9176 cv
426.611 21.7496 426.345 21.5396 426.149 21.2596 cv
426.149 24.7876 li
424.917 24.7876 li
cp
426.037 18.4316 mo
426.037 19.3696 426.219 20.0556 426.597 20.5036 cv
426.975 20.9516 427.437 21.1616 427.969 21.1616 cv
428.515 21.1616 428.977 20.9376 429.369 20.4756 cv
429.761 20.0136 429.957 19.2996 429.957 18.3196 cv
429.957 17.3956 429.761 16.7096 429.383 16.2476 cv
429.005 15.7996 428.557 15.5616 428.025 15.5616 cv
427.493 15.5616 427.031 15.8136 426.639 16.3036 cv
426.233 16.7936 426.037 17.5076 426.037 18.4316 cv
cp
f
432.701 22.0156 mo
432.701 11.9916 li
433.933 11.9916 li
433.933 15.5896 li
434.493 14.9316 435.221 14.5956 436.103 14.5956 cv
436.635 14.5956 437.111 14.7076 437.503 14.9176 cv
437.895 15.1276 438.189 15.4216 438.357 15.7856 cv
438.525 16.1636 438.609 16.7096 438.609 17.4096 cv
438.609 22.0156 li
437.377 22.0156 li
437.377 17.4096 li
437.377 16.7936 437.237 16.3456 436.971 16.0656 cv
436.705 15.7856 436.327 15.6456 435.851 15.6456 cv
435.487 15.6456 435.137 15.7436 434.815 15.9396 cv
434.493 16.1356 434.269 16.3876 434.129 16.7096 cv
433.989 17.0316 433.933 17.4796 433.933 18.0396 cv
433.933 22.0156 li
432.701 22.0156 li
cp
f
445.217 21.1196 mo
444.755 21.5116 444.321 21.7916 443.901 21.9456 cv
443.481 22.0856 443.019 22.1696 442.543 22.1696 cv
441.745 22.1696 441.129 21.9876 440.709 21.5956 cv
440.275 21.2036 440.065 20.7136 440.065 20.0976 cv
440.065 19.7476 440.135 19.4256 440.303 19.1316 cv
440.471 18.8376 440.681 18.5996 440.947 18.4176 cv
441.199 18.2496 441.493 18.1096 441.829 18.0116 cv
442.067 17.9556 442.431 17.8996 442.921 17.8296 cv
443.915 17.7176 444.643 17.5776 445.119 17.4096 cv
445.119 17.2416 445.119 17.1436 445.119 17.0876 cv
445.119 16.5836 445.007 16.2336 444.783 16.0236 cv
444.461 15.7436 443.985 15.6036 443.369 15.6036 cv
442.781 15.6036 442.361 15.7156 442.081 15.9116 cv
441.801 16.1216 441.605 16.4856 441.479 16.9896 cv
440.275 16.8216 li
440.387 16.3176 440.569 15.8976 440.821 15.5756 cv
441.073 15.2676 441.423 15.0156 441.899 14.8476 cv
442.375 14.6796 442.921 14.5956 443.551 14.5956 cv
444.167 14.5956 444.671 14.6796 445.063 14.8196 cv
445.455 14.9596 445.735 15.1416 445.917 15.3656 cv
446.099 15.5896 446.225 15.8556 446.295 16.1916 cv
446.337 16.4156 446.365 16.7936 446.365 17.3396 cv
446.365 18.9776 li
446.365 20.1256 446.379 20.8396 446.435 21.1476 cv
446.491 21.4556 446.589 21.7356 446.757 22.0156 cv
445.469 22.0156 li
445.329 21.7636 445.245 21.4696 445.217 21.1196 cv
cp
445.119 18.3756 mo
444.671 18.5576 443.999 18.7116 443.103 18.8376 cv
442.599 18.9216 442.235 19.0056 442.025 19.0896 cv
441.815 19.1736 441.661 19.3136 441.549 19.4816 cv
441.437 19.6636 441.381 19.8596 441.381 20.0696 cv
441.381 20.4056 441.493 20.6716 441.745 20.8956 cv
441.997 21.1196 442.361 21.2176 442.837 21.2176 cv
443.313 21.2176 443.733 21.1196 444.097 20.9096 cv
444.461 20.6996 444.741 20.4196 444.923 20.0556 cv
445.049 19.7756 445.119 19.3696 445.119 18.8236 cv
445.119 18.3756 li
cp
f
449.403 22.0156 mo
448.255 22.0156 li
448.255 11.9916 li
449.487 11.9916 li
449.487 15.5756 li
450.005 14.9316 450.663 14.5956 451.475 14.5956 cv
451.923 14.5956 452.343 14.6936 452.749 14.8616 cv
453.141 15.0436 453.477 15.2956 453.729 15.6176 cv
453.981 15.9536 454.191 16.3456 454.331 16.8076 cv
454.471 17.2696 454.555 17.7596 454.555 18.2776 cv
454.555 19.5236 454.247 20.4896 453.631 21.1616 cv
453.015 21.8336 452.273 22.1696 451.419 22.1696 cv
450.551 22.1696 449.879 21.8196 449.403 21.1056 cv
449.403 22.0156 li
cp
449.389 18.3336 mo
449.389 19.2016 449.501 19.8316 449.739 20.2236 cv
450.131 20.8536 450.649 21.1616 451.321 21.1616 cv
451.853 21.1616 452.315 20.9376 452.707 20.4616 cv
453.099 19.9996 453.295 19.2996 453.295 18.3756 cv
453.295 17.4376 453.099 16.7376 452.735 16.2896 cv
452.357 15.8416 451.909 15.6036 451.377 15.6036 cv
450.831 15.6036 450.369 15.8416 449.977 16.3036 cv
449.585 16.7796 449.389 17.4516 449.389 18.3336 cv
cp
f
461.023 19.6776 mo
462.297 19.8316 li
462.087 20.5876 461.709 21.1616 461.177 21.5676 cv
460.631 21.9736 459.945 22.1696 459.105 22.1696 cv
458.041 22.1696 457.187 21.8476 456.571 21.2036 cv
455.955 20.5596 455.647 19.6356 455.647 18.4456 cv
455.647 17.2276 455.955 16.2756 456.585 15.6036 cv
457.201 14.9316 458.027 14.5956 459.035 14.5956 cv
460.001 14.5956 460.799 14.9316 461.415 15.5896 cv
462.031 16.2476 462.339 17.1716 462.339 18.3756 cv
462.339 18.4596 462.325 18.5576 462.325 18.6976 cv
456.907 18.6976 li
456.949 19.5096 457.173 20.1116 457.579 20.5316 cv
457.985 20.9516 458.489 21.1616 459.105 21.1616 cv
459.553 21.1616 459.945 21.0496 460.267 20.8116 cv
460.575 20.5876 460.827 20.2096 461.023 19.6776 cv
cp
456.977 17.6896 mo
461.037 17.6896 li
460.981 17.0736 460.827 16.6256 460.575 16.3176 cv
460.183 15.8416 459.665 15.6036 459.049 15.6036 cv
458.475 15.6036 457.999 15.7996 457.621 16.1776 cv
457.229 16.5556 457.019 17.0596 456.977 17.6896 cv
cp
f
466.525 20.9096 mo
466.707 22.0016 li
466.343 22.0576 466.035 22.0996 465.769 22.0996 cv
465.321 22.0996 464.971 22.0296 464.733 21.9036 cv
464.481 21.7636 464.313 21.5816 464.215 21.3436 cv
464.103 21.1196 464.061 20.6296 464.061 19.8876 cv
464.061 15.7156 li
463.165 15.7156 li
463.165 14.7496 li
464.061 14.7496 li
464.061 12.9576 li
465.279 12.2156 li
465.279 14.7496 li
466.525 14.7496 li
466.525 15.7156 li
465.279 15.7156 li
465.279 19.9576 li
465.279 20.3216 465.293 20.5456 465.349 20.6436 cv
465.391 20.7416 465.461 20.8256 465.559 20.8816 cv
465.657 20.9376 465.797 20.9656 465.979 20.9656 cv
466.119 20.9656 466.301 20.9516 466.525 20.9096 cv
cp
f
412.2 37.6906 mo
389.2 37.6906 li
389.2 30.2906 li
412.2 30.2906 li
412.2 37.6906 li
.0862745 .447059 .6 .00392157 cmyk
f
413.2 38.6906 mo
388.2 38.6906 li
388.2 38.1906 li
388.7 38.1906 li
388.2 38.1906 li
388.2 29.2906 li
413.2 29.2906 li
413.2 38.6906 li
389.2 37.6906 mo
412.2 37.6906 li
412.2 30.2906 li
389.2 30.2906 li
389.2 37.6906 li
f
428.864 29.5986 mo
430.004 29.5986 li
430.004 34.5666 li
430.004 35.4306 429.896 36.1266 429.704 36.6306 cv
429.512 37.1346 429.152 37.5426 428.648 37.8546 cv
428.132 38.1666 427.46 38.3226 426.644 38.3226 cv
425.828 38.3226 425.168 38.1906 424.664 37.9146 cv
424.148 37.6506 423.788 37.2546 423.572 36.7266 cv
423.356 36.1986 423.248 35.4786 423.248 34.5666 cv
423.248 29.5986 li
424.376 29.5986 li
424.376 34.5546 li
424.376 35.3106 424.436 35.8626 424.58 36.2106 cv
424.724 36.5706 424.964 36.8346 425.3 37.0266 cv
425.636 37.2186 426.044 37.3146 426.548 37.3146 cv
427.376 37.3146 427.964 37.1346 428.324 36.7506 cv
428.684 36.3666 428.864 35.6346 428.864 34.5546 cv
428.864 29.5986 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
431.876 38.1906 mo
431.876 29.5986 li
433.04 29.5986 li
437.552 36.3426 li
437.552 29.5986 li
438.644 29.5986 li
438.644 38.1906 li
437.48 38.1906 li
432.968 31.4346 li
432.968 38.1906 li
431.876 38.1906 li
cp
f
440.744 38.1906 mo
440.744 29.5986 li
441.884 29.5986 li
441.884 38.1906 li
440.744 38.1906 li
cp
f
443.888 38.1906 mo
443.888 29.5986 li
447.128 29.5986 li
447.692 29.5986 448.124 29.6346 448.436 29.6826 cv
448.856 29.7546 449.204 29.8986 449.492 30.0906 cv
449.78 30.2826 450.008 30.5586 450.188 30.9186 cv
450.356 31.2786 450.452 31.6626 450.452 32.0826 cv
450.452 32.8266 450.212 33.4386 449.744 33.9426 cv
449.276 34.4466 448.436 34.6986 447.224 34.6986 cv
445.028 34.6986 li
445.028 38.1906 li
443.888 38.1906 li
cp
445.028 33.6906 mo
447.248 33.6906 li
447.98 33.6906 448.496 33.5586 448.808 33.2826 cv
449.12 33.0066 449.276 32.6226 449.276 32.1186 cv
449.276 31.7586 449.18 31.4586 449 31.1946 cv
448.808 30.9426 448.568 30.7746 448.28 30.6906 cv
448.088 30.6426 447.728 30.6186 447.224 30.6186 cv
445.028 30.6186 li
445.028 33.6906 li
cp
f
451.916 38.1906 mo
451.916 29.5986 li
455.72 29.5986 li
456.488 29.5986 457.064 29.6826 457.46 29.8386 cv
457.856 29.9946 458.18 30.2706 458.42 30.6546 cv
458.66 31.0386 458.78 31.4706 458.78 31.9386 cv
458.78 32.5626 458.576 33.0786 458.18 33.4866 cv
457.784 33.9066 457.172 34.1706 456.356 34.2786 cv
456.656 34.4226 456.884 34.5666 457.04 34.7106 cv
457.376 35.0226 457.688 35.3946 457.988 35.8506 cv
459.476 38.1906 li
458.048 38.1906 li
456.92 36.4026 li
456.584 35.8986 456.308 35.5026 456.092 35.2266 cv
455.876 34.9506 455.684 34.7586 455.516 34.6506 cv
455.348 34.5426 455.168 34.4706 455 34.4226 cv
454.868 34.3986 454.652 34.3746 454.364 34.3746 cv
453.044 34.3746 li
453.044 38.1906 li
451.916 38.1906 li
cp
453.044 33.3906 mo
455.492 33.3906 li
456.008 33.3906 456.416 33.3426 456.704 33.2346 cv
456.992 33.1266 457.22 32.9586 457.376 32.7186 cv
457.52 32.4786 457.604 32.2266 457.604 31.9386 cv
457.604 31.5426 457.448 31.2066 457.16 30.9426 cv
456.86 30.6786 456.392 30.5466 455.768 30.5466 cv
453.044 30.5466 li
453.044 33.3906 li
cp
f
460.208 34.0026 mo
460.208 32.5866 460.592 31.4706 461.36 30.6546 cv
462.128 29.8506 463.112 29.4426 464.324 29.4426 cv
465.116 29.4426 465.824 29.6346 466.46 30.0186 cv
467.096 30.4026 467.588 30.9306 467.924 31.6026 cv
468.26 32.2866 468.428 33.0546 468.428 33.9066 cv
468.428 34.7826 468.248 35.5626 467.9 36.2466 cv
467.54 36.9426 467.048 37.4586 466.4 37.8066 cv
465.752 38.1546 465.068 38.3226 464.324 38.3226 cv
463.508 38.3226 462.788 38.1306 462.152 37.7466 cv
461.504 37.3626 461.024 36.8346 460.7 36.1626 cv
460.364 35.4906 460.208 34.7706 460.208 34.0026 cv
cp
461.384 34.0266 mo
461.384 35.0586 461.66 35.8746 462.212 36.4746 cv
462.764 37.0746 463.472 37.3626 464.312 37.3626 cv
465.164 37.3626 465.872 37.0626 466.424 36.4626 cv
466.976 35.8626 467.252 35.0106 467.252 33.9066 cv
467.252 33.2106 467.132 32.5986 466.892 32.0706 cv
466.652 31.5546 466.316 31.1466 465.86 30.8586 cv
465.404 30.5706 464.888 30.4266 464.336 30.4266 cv
463.52 30.4266 462.824 30.7026 462.248 31.2546 cv
461.672 31.8066 461.384 32.7306 461.384 34.0266 cv
cp
f
472.076 38.1906 mo
472.076 30.6186 li
469.244 30.6186 li
469.244 29.5986 li
476.06 29.5986 li
476.06 30.6186 li
473.216 30.6186 li
473.216 38.1906 li
472.076 38.1906 li
cp
f
480.776 38.1906 mo
479.72 38.1906 li
479.72 31.4706 li
479.456 31.7106 479.12 31.9626 478.712 32.2026 cv
478.304 32.4426 477.932 32.6226 477.608 32.7426 cv
477.608 31.7226 li
478.196 31.4466 478.712 31.1106 479.156 30.7146 cv
479.588 30.3306 479.9 29.9466 480.092 29.5626 cv
480.776 29.5626 li
480.776 38.1906 li
cp
f
485.096 33.5346 mo
484.652 33.3786 484.328 33.1506 484.112 32.8506 cv
483.896 32.5626 483.8 32.2026 483.8 31.7826 cv
483.8 31.1586 484.016 30.6426 484.472 30.2106 cv
484.928 29.7786 485.528 29.5626 486.272 29.5626 cv
487.016 29.5626 487.628 29.7906 488.084 30.2226 cv
488.54 30.6546 488.768 31.1826 488.768 31.8066 cv
488.768 32.2146 488.66 32.5626 488.456 32.8506 cv
488.24 33.1506 487.928 33.3786 487.496 33.5346 cv
488.024 33.7026 488.42 33.9786 488.696 34.3626 cv
488.972 34.7466 489.116 35.2026 489.116 35.7306 cv
489.116 36.4746 488.852 37.0866 488.336 37.5786 cv
487.808 38.0826 487.124 38.3226 486.284 38.3226 cv
485.432 38.3226 484.748 38.0826 484.232 37.5786 cv
483.716 37.0866 483.464 36.4626 483.464 35.7066 cv
483.464 35.1546 483.596 34.6866 483.884 34.3026 cv
484.16 33.9306 484.568 33.6786 485.096 33.5346 cv
cp
484.88 31.7466 mo
484.88 32.1546 485.012 32.4906 485.276 32.7426 cv
485.54 33.0066 485.876 33.1266 486.296 33.1266 cv
486.704 33.1266 487.028 33.0066 487.292 32.7426 cv
487.556 32.4906 487.688 32.1786 487.688 31.8066 cv
487.688 31.4226 487.544 31.0986 487.28 30.8346 cv
487.016 30.5706 486.68 30.4386 486.284 30.4386 cv
485.876 30.4386 485.54 30.5706 485.276 30.8226 cv
485.012 31.0866 484.88 31.3866 484.88 31.7466 cv
cp
484.544 35.7066 mo
484.544 36.0186 484.616 36.3066 484.76 36.5826 cv
484.904 36.8706 485.108 37.0866 485.396 37.2426 cv
485.672 37.3986 485.972 37.4706 486.296 37.4706 cv
486.8 37.4706 487.208 37.3146 487.544 36.9906 cv
487.868 36.6666 488.036 36.2466 488.036 35.7426 cv
488.036 35.2386 487.868 34.8306 487.532 34.4946 cv
487.196 34.1586 486.764 33.9906 486.26 33.9906 cv
485.756 33.9906 485.348 34.1586 485.024 34.4826 cv
484.7 34.8186 484.544 35.2266 484.544 35.7066 cv
cp
f
412.2 53.475 mo
389.2 53.475 li
389.2 46.075 li
412.2 46.075 li
412.2 53.475 li
.556863 .0862745 .619608 .00392157 cmyk
f
413.2 54.475 mo
388.2 54.475 li
388.2 53.975 li
388.7 53.975 li
388.2 53.975 li
388.2 45.075 li
413.2 45.075 li
413.2 54.475 li
389.2 53.475 mo
412.2 53.475 li
412.2 46.075 li
389.2 46.075 li
389.2 53.475 li
f
423.26 53.975 mo
423.26 45.383 li
424.4 45.383 li
424.4 48.911 li
428.864 48.911 li
428.864 45.383 li
430.004 45.383 li
430.004 53.975 li
428.864 53.975 li
428.864 49.931 li
424.4 49.931 li
424.4 53.975 li
423.26 53.975 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
431.504 51.215 mo
432.572 51.119 li
432.62 51.551 432.74 51.911 432.932 52.187 cv
433.112 52.463 433.4 52.679 433.796 52.847 cv
434.18 53.015 434.624 53.099 435.116 53.099 cv
435.548 53.099 435.92 53.039 436.256 52.907 cv
436.592 52.787 436.832 52.607 437 52.379 cv
437.156 52.163 437.24 51.911 437.24 51.647 cv
437.24 51.383 437.156 51.143 437 50.939 cv
436.844 50.747 436.592 50.579 436.232 50.435 cv
436.004 50.339 435.5 50.207 434.708 50.015 cv
433.916 49.823 433.364 49.643 433.052 49.475 cv
432.644 49.259 432.332 48.995 432.128 48.683 cv
431.924 48.371 431.828 48.011 431.828 47.603 cv
431.828 47.171 431.948 46.775 432.2 46.391 cv
432.44 46.019 432.8 45.731 433.28 45.539 cv
433.748 45.347 434.276 45.239 434.852 45.239 cv
435.488 45.239 436.052 45.347 436.532 45.551 cv
437.012 45.755 437.396 46.055 437.66 46.451 cv
437.924 46.859 438.056 47.303 438.08 47.807 cv
436.988 47.891 li
436.928 47.351 436.736 46.943 436.4 46.655 cv
436.064 46.379 435.56 46.235 434.9 46.235 cv
434.204 46.235 433.712 46.367 433.4 46.619 cv
433.088 46.871 432.932 47.171 432.932 47.531 cv
432.932 47.843 433.04 48.095 433.256 48.287 cv
433.472 48.491 434.048 48.695 434.972 48.911 cv
435.896 49.127 436.532 49.307 436.88 49.451 cv
437.372 49.691 437.744 49.979 437.984 50.327 cv
438.224 50.687 438.344 51.095 438.344 51.551 cv
438.344 52.007 438.212 52.439 437.948 52.847 cv
437.684 53.255 437.3 53.567 436.82 53.783 cv
436.328 53.999 435.776 54.107 435.164 54.107 cv
434.384 54.107 433.736 53.999 433.208 53.783 cv
432.68 53.567 432.272 53.219 431.972 52.763 cv
431.672 52.307 431.516 51.791 431.504 51.215 cv
cp
f
439.892 53.975 mo
439.892 45.383 li
442.856 45.383 li
443.516 45.383 444.02 45.431 444.38 45.503 cv
444.872 45.623 445.292 45.839 445.64 46.127 cv
446.096 46.511 446.432 47.003 446.66 47.591 cv
446.876 48.191 446.996 48.863 446.996 49.631 cv
446.996 50.291 446.912 50.867 446.768 51.371 cv
446.612 51.875 446.42 52.295 446.18 52.619 cv
445.94 52.955 445.676 53.207 445.388 53.399 cv
445.1 53.591 444.764 53.735 444.368 53.831 cv
443.96 53.927 443.504 53.975 442.988 53.975 cv
439.892 53.975 li
cp
441.032 52.967 mo
442.868 52.967 li
443.432 52.967 443.876 52.919 444.2 52.811 cv
444.512 52.703 444.776 52.547 444.968 52.355 cv
445.232 52.091 445.448 51.731 445.592 51.275 cv
445.736 50.819 445.82 50.267 445.82 49.619 cv
445.82 48.719 445.664 48.023 445.376 47.543 cv
445.088 47.063 444.728 46.739 444.308 46.571 cv
443.996 46.463 443.504 46.403 442.832 46.403 cv
441.032 46.403 li
441.032 52.967 li
cp
f
448.52 53.975 mo
448.52 45.383 li
450.236 45.383 li
452.264 51.467 li
452.456 52.043 452.588 52.463 452.672 52.739 cv
452.768 52.427 452.924 51.971 453.128 51.359 cv
455.192 45.383 li
456.716 45.383 li
456.716 53.975 li
455.624 53.975 li
455.624 46.787 li
453.128 53.975 li
452.108 53.975 li
449.624 46.667 li
449.624 53.975 li
448.52 53.975 li
cp
f
462.104 53.975 mo
461.048 53.975 li
461.048 47.255 li
460.784 47.495 460.448 47.747 460.04 47.987 cv
459.632 48.227 459.26 48.407 458.936 48.527 cv
458.936 47.507 li
459.524 47.231 460.04 46.895 460.484 46.499 cv
460.916 46.115 461.228 45.731 461.42 45.347 cv
462.104 45.347 li
462.104 53.975 li
cp
f
464.864 46.511 mo
464.864 45.491 li
470.432 45.491 li
470.432 46.319 li
469.88 46.907 469.328 47.687 468.8 48.647 cv
468.26 49.607 467.84 50.603 467.552 51.611 cv
467.336 52.331 467.204 53.123 467.156 53.975 cv
466.064 53.975 li
466.076 53.303 466.208 52.487 466.46 51.527 cv
466.712 50.567 467.072 49.643 467.552 48.755 cv
468.032 47.867 468.536 47.123 469.076 46.511 cv
464.864 46.511 li
cp
f
412.2 69.2593 mo
389.2 69.2593 li
389.2 61.8593 li
412.2 61.8593 li
412.2 69.2593 li
.141176 .662745 .517647 .0352941 cmyk
f
413.2 70.2593 mo
388.2 70.2593 li
388.2 69.7594 li
388.7 69.7594 li
388.2 69.7594 li
388.2 60.8593 li
413.2 60.8593 li
413.2 70.2593 li
389.2 69.2593 mo
412.2 69.2593 li
412.2 61.8593 li
389.2 61.8593 li
389.2 69.2593 li
f
423.188 69.7594 mo
423.188 61.1674 li
424.904 61.1674 li
426.932 67.2514 li
427.124 67.8274 427.256 68.2474 427.34 68.5234 cv
427.436 68.2114 427.592 67.7554 427.796 67.1434 cv
429.86 61.1674 li
431.384 61.1674 li
431.384 69.7594 li
430.292 69.7594 li
430.292 62.5714 li
427.796 69.7594 li
426.776 69.7594 li
424.292 62.4514 li
424.292 69.7594 li
423.188 69.7594 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
433.184 69.7594 mo
433.184 61.1674 li
434.9 61.1674 li
436.928 67.2514 li
437.12 67.8274 437.252 68.2474 437.336 68.5234 cv
437.432 68.2114 437.588 67.7554 437.792 67.1434 cv
439.856 61.1674 li
441.38 61.1674 li
441.38 69.7594 li
440.288 69.7594 li
440.288 62.5714 li
437.792 69.7594 li
436.772 69.7594 li
434.288 62.4514 li
434.288 69.7594 li
433.184 69.7594 li
cp
f
442.832 66.9994 mo
443.9 66.9034 li
443.948 67.3354 444.068 67.6954 444.26 67.9714 cv
444.44 68.2474 444.728 68.4634 445.124 68.6314 cv
445.508 68.7994 445.952 68.8834 446.444 68.8834 cv
446.876 68.8834 447.248 68.8234 447.584 68.6914 cv
447.92 68.5714 448.16 68.3914 448.328 68.1634 cv
448.484 67.9474 448.568 67.6954 448.568 67.4314 cv
448.568 67.1674 448.484 66.9274 448.328 66.7234 cv
448.172 66.5314 447.92 66.3634 447.56 66.2194 cv
447.332 66.1234 446.828 65.9914 446.036 65.7994 cv
445.244 65.6074 444.692 65.4274 444.38 65.2594 cv
443.972 65.0434 443.66 64.7794 443.456 64.4674 cv
443.252 64.1554 443.156 63.7954 443.156 63.3874 cv
443.156 62.9554 443.276 62.5594 443.528 62.1754 cv
443.768 61.8034 444.128 61.5154 444.608 61.3234 cv
445.076 61.1314 445.604 61.0234 446.18 61.0234 cv
446.816 61.0234 447.38 61.1314 447.86 61.3354 cv
448.34 61.5394 448.724 61.8394 448.988 62.2354 cv
449.252 62.6434 449.384 63.0874 449.408 63.5914 cv
448.316 63.6754 li
448.256 63.1354 448.064 62.7274 447.728 62.4394 cv
447.392 62.1634 446.888 62.0194 446.228 62.0194 cv
445.532 62.0194 445.04 62.1514 444.728 62.4034 cv
444.416 62.6554 444.26 62.9554 444.26 63.3154 cv
444.26 63.6274 444.368 63.8794 444.584 64.0714 cv
444.8 64.2754 445.376 64.4794 446.3 64.6954 cv
447.224 64.9114 447.86 65.0914 448.208 65.2354 cv
448.7 65.4754 449.072 65.7634 449.312 66.1114 cv
449.552 66.4714 449.672 66.8794 449.672 67.3354 cv
449.672 67.7914 449.54 68.2234 449.276 68.6314 cv
449.012 69.0394 448.628 69.3514 448.148 69.5674 cv
447.656 69.7834 447.104 69.8914 446.492 69.8914 cv
445.712 69.8914 445.064 69.7834 444.536 69.5674 cv
444.008 69.3514 443.6 69.0034 443.3 68.5474 cv
443 68.0914 442.844 67.5754 442.832 66.9994 cv
cp
f
451.244 69.7594 mo
451.244 61.1674 li
457.46 61.1674 li
457.46 62.1874 li
452.384 62.1874 li
452.384 64.8154 li
457.136 64.8154 li
457.136 65.8234 li
452.384 65.8234 li
452.384 68.7514 li
457.652 68.7514 li
457.652 69.7594 li
451.244 69.7594 li
cp
f
465.74 68.8354 mo
466.268 69.2074 466.748 69.4714 467.192 69.6394 cv
466.856 70.4194 li
466.232 70.1914 465.62 69.8434 465.02 69.3754 cv
464.372 69.7234 463.676 69.8914 462.908 69.8914 cv
462.128 69.8914 461.42 69.7114 460.784 69.3394 cv
460.148 68.9674 459.656 68.4394 459.32 67.7674 cv
458.984 67.0954 458.816 66.3274 458.816 65.4634 cv
458.816 64.6234 458.984 63.8434 459.332 63.1474 cv
459.668 62.4514 460.16 61.9234 460.796 61.5634 cv
461.432 61.2034 462.14 61.0114 462.932 61.0114 cv
463.724 61.0114 464.432 61.2034 465.068 61.5874 cv
465.704 61.9714 466.196 62.4994 466.532 63.1714 cv
466.868 63.8434 467.036 64.6114 467.036 65.4634 cv
467.036 66.1714 466.928 66.8074 466.712 67.3714 cv
466.496 67.9354 466.172 68.4274 465.74 68.8354 cv
cp
463.232 67.3834 mo
463.88 67.5754 464.42 67.8514 464.852 68.2114 cv
465.524 67.5994 465.86 66.6874 465.86 65.4634 cv
465.86 64.7674 465.74 64.1674 465.5 63.6394 cv
465.26 63.1234 464.924 62.7154 464.468 62.4274 cv
464.012 62.1394 463.496 61.9954 462.932 61.9954 cv
462.08 61.9954 461.372 62.2954 460.82 62.8714 cv
460.268 63.4474 459.992 64.3114 459.992 65.4634 cv
459.992 66.5914 460.268 67.4434 460.82 68.0434 cv
461.372 68.6434 462.068 68.9314 462.932 68.9314 cv
463.34 68.9314 463.724 68.8594 464.084 68.7034 cv
463.724 68.4754 463.352 68.3074 462.956 68.2114 cv
463.232 67.3834 li
cp
f
468.176 66.9994 mo
469.244 66.9034 li
469.292 67.3354 469.412 67.6954 469.604 67.9714 cv
469.784 68.2474 470.072 68.4634 470.468 68.6314 cv
470.852 68.7994 471.296 68.8834 471.788 68.8834 cv
472.22 68.8834 472.592 68.8234 472.928 68.6914 cv
473.264 68.5714 473.504 68.3914 473.672 68.1634 cv
473.828 67.9474 473.912 67.6954 473.912 67.4314 cv
473.912 67.1674 473.828 66.9274 473.672 66.7234 cv
473.516 66.5314 473.264 66.3634 472.904 66.2194 cv
472.676 66.1234 472.172 65.9914 471.38 65.7994 cv
470.588 65.6074 470.036 65.4274 469.724 65.2594 cv
469.316 65.0434 469.004 64.7794 468.8 64.4674 cv
468.596 64.1554 468.5 63.7954 468.5 63.3874 cv
468.5 62.9554 468.62 62.5594 468.872 62.1754 cv
469.112 61.8034 469.472 61.5154 469.952 61.3234 cv
470.42 61.1314 470.948 61.0234 471.524 61.0234 cv
472.16 61.0234 472.724 61.1314 473.204 61.3354 cv
473.684 61.5394 474.068 61.8394 474.332 62.2354 cv
474.596 62.6434 474.728 63.0874 474.752 63.5914 cv
473.66 63.6754 li
473.6 63.1354 473.408 62.7274 473.072 62.4394 cv
472.736 62.1634 472.232 62.0194 471.572 62.0194 cv
470.876 62.0194 470.384 62.1514 470.072 62.4034 cv
469.76 62.6554 469.604 62.9554 469.604 63.3154 cv
469.604 63.6274 469.712 63.8794 469.928 64.0714 cv
470.144 64.2754 470.72 64.4794 471.644 64.6954 cv
472.568 64.9114 473.204 65.0914 473.552 65.2354 cv
474.044 65.4754 474.416 65.7634 474.656 66.1114 cv
474.896 66.4714 475.016 66.8794 475.016 67.3354 cv
475.016 67.7914 474.884 68.2234 474.62 68.6314 cv
474.356 69.0394 473.972 69.3514 473.492 69.5674 cv
473 69.7834 472.448 69.8914 471.836 69.8914 cv
471.056 69.8914 470.408 69.7834 469.88 69.5674 cv
469.352 69.3514 468.944 69.0034 468.644 68.5474 cv
468.344 68.0914 468.188 67.5754 468.176 66.9994 cv
cp
f
480.116 69.7594 mo
479.06 69.7594 li
479.06 63.0394 li
478.796 63.2794 478.46 63.5314 478.052 63.7714 cv
477.644 64.0114 477.272 64.1914 476.948 64.3114 cv
476.948 63.2914 li
477.536 63.0154 478.052 62.6794 478.496 62.2834 cv
478.928 61.8994 479.24 61.5154 479.432 61.1314 cv
480.116 61.1314 li
480.116 69.7594 li
cp
f
482.816 67.4914 mo
483.872 67.3474 li
483.992 67.9474 484.196 68.3794 484.484 68.6434 cv
484.772 68.9074 485.132 69.0394 485.552 69.0394 cv
486.044 69.0394 486.464 68.8714 486.8 68.5234 cv
487.136 68.1874 487.316 67.7554 487.316 67.2514 cv
487.316 66.7714 487.148 66.3634 486.836 66.0514 cv
486.524 65.7394 486.116 65.5714 485.636 65.5714 cv
485.432 65.5714 485.18 65.6194 484.892 65.6914 cv
485.012 64.7674 li
485.18 64.7794 li
485.624 64.7794 486.032 64.6714 486.392 64.4314 cv
486.752 64.1914 486.932 63.8314 486.932 63.3394 cv
486.932 62.9554 486.8 62.6434 486.536 62.3914 cv
486.272 62.1394 485.936 62.0074 485.528 62.0074 cv
485.12 62.0074 484.772 62.1394 484.496 62.3914 cv
484.22 62.6554 484.052 63.0394 483.98 63.5434 cv
482.924 63.3634 li
483.044 62.6554 483.344 62.1034 483.8 61.7194 cv
484.256 61.3354 484.82 61.1314 485.504 61.1314 cv
485.972 61.1314 486.404 61.2394 486.8 61.4434 cv
487.184 61.6474 487.484 61.9234 487.7 62.2594 cv
487.916 62.6074 488.024 62.9794 488.024 63.3634 cv
488.024 63.7474 487.916 64.0834 487.724 64.3834 cv
487.52 64.6954 487.22 64.9354 486.836 65.1034 cv
487.34 65.2234 487.724 65.4754 488.012 65.8354 cv
488.3 66.2074 488.444 66.6754 488.444 67.2274 cv
488.444 67.9714 488.168 68.6074 487.616 69.1234 cv
487.064 69.6514 486.38 69.9034 485.552 69.9034 cv
484.784 69.9034 484.16 69.6874 483.668 69.2314 cv
483.164 68.7874 482.888 68.2114 482.816 67.4914 cv
cp
f
412.2 85.0438 mo
389.2 85.0438 li
389.2 77.6438 li
412.2 77.6438 li
412.2 85.0438 li
.431373 .47451 0 0 cmyk
f
413.2 86.0438 mo
388.2 86.0438 li
388.2 85.5437 li
388.7 85.5437 li
388.2 85.5437 li
388.2 76.6438 li
413.2 76.6438 li
413.2 86.0438 li
389.2 85.0438 mo
412.2 85.0438 li
412.2 77.6438 li
389.2 77.6438 li
389.2 85.0438 li
f
424.724 85.5438 mo
422.444 76.9517 li
423.608 76.9517 li
424.916 82.5798 li
425.06 83.1798 425.18 83.7677 425.288 84.3438 cv
425.504 83.4318 425.624 82.9038 425.672 82.7598 cv
427.304 76.9517 li
428.672 76.9517 li
429.908 81.2957 li
430.208 82.3758 430.424 83.3957 430.568 84.3438 cv
430.676 83.8038 430.82 83.1798 431 82.4718 cv
432.344 76.9517 li
433.496 76.9517 li
431.132 85.5438 li
430.04 85.5438 li
428.228 79.0037 li
428.072 78.4517 427.988 78.1157 427.964 77.9958 cv
427.868 78.3917 427.784 78.7277 427.712 79.0037 cv
425.888 85.5438 li
424.724 85.5438 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
433.191 85.5438 mo
436.467 76.9517 li
437.691 76.9517 li
441.206 85.5438 li
439.923 85.5438 li
438.915 82.9397 li
435.326 82.9397 li
434.378 85.5438 li
433.191 85.5438 li
cp
435.65 82.0158 mo
438.567 82.0158 li
437.667 79.6398 li
437.391 78.9197 437.187 78.3198 437.055 77.8517 cv
436.947 78.4038 436.791 78.9558 436.598 79.4958 cv
435.65 82.0158 li
cp
f
441.735 82.7837 mo
442.803 82.6877 li
442.851 83.1197 442.971 83.4797 443.163 83.7557 cv
443.343 84.0317 443.631 84.2478 444.027 84.4158 cv
444.411 84.5838 444.855 84.6678 445.347 84.6678 cv
445.779 84.6678 446.151 84.6078 446.487 84.4757 cv
446.823 84.3557 447.063 84.1758 447.231 83.9477 cv
447.387 83.7318 447.471 83.4797 447.471 83.2157 cv
447.471 82.9517 447.387 82.7117 447.231 82.5077 cv
447.075 82.3158 446.823 82.1477 446.463 82.0037 cv
446.235 81.9077 445.731 81.7758 444.939 81.5838 cv
444.147 81.3917 443.595 81.2117 443.283 81.0438 cv
442.875 80.8277 442.563 80.5637 442.359 80.2518 cv
442.155 79.9397 442.059 79.5798 442.059 79.1717 cv
442.059 78.7397 442.179 78.3438 442.431 77.9598 cv
442.671 77.5877 443.031 77.2997 443.511 77.1078 cv
443.979 76.9158 444.507 76.8078 445.083 76.8078 cv
445.719 76.8078 446.283 76.9158 446.763 77.1198 cv
447.243 77.3237 447.627 77.6238 447.891 78.0197 cv
448.155 78.4278 448.287 78.8718 448.311 79.3758 cv
447.219 79.4598 li
447.159 78.9197 446.967 78.5118 446.631 78.2238 cv
446.295 77.9477 445.791 77.8038 445.131 77.8038 cv
444.435 77.8038 443.943 77.9357 443.631 78.1877 cv
443.319 78.4397 443.163 78.7397 443.163 79.0997 cv
443.163 79.4117 443.271 79.6638 443.487 79.8557 cv
443.703 80.0597 444.279 80.2638 445.203 80.4797 cv
446.127 80.6958 446.763 80.8758 447.111 81.0197 cv
447.603 81.2598 447.975 81.5477 448.215 81.8957 cv
448.455 82.2557 448.575 82.6638 448.575 83.1197 cv
448.575 83.5757 448.443 84.0077 448.179 84.4158 cv
447.915 84.8237 447.531 85.1358 447.051 85.3517 cv
446.559 85.5678 446.007 85.6758 445.395 85.6758 cv
444.615 85.6758 443.967 85.5678 443.439 85.3517 cv
442.911 85.1358 442.503 84.7878 442.203 84.3318 cv
441.903 83.8758 441.747 83.3598 441.735 82.7837 cv
cp
f
449.739 82.7837 mo
450.807 82.6877 li
450.855 83.1197 450.975 83.4797 451.167 83.7557 cv
451.347 84.0317 451.635 84.2478 452.031 84.4158 cv
452.415 84.5838 452.859 84.6678 453.351 84.6678 cv
453.783 84.6678 454.155 84.6078 454.491 84.4757 cv
454.827 84.3557 455.067 84.1758 455.235 83.9477 cv
455.391 83.7318 455.475 83.4797 455.475 83.2157 cv
455.475 82.9517 455.391 82.7117 455.235 82.5077 cv
455.079 82.3158 454.827 82.1477 454.467 82.0037 cv
454.239 81.9077 453.735 81.7758 452.943 81.5838 cv
452.151 81.3917 451.599 81.2117 451.287 81.0438 cv
450.879 80.8277 450.567 80.5637 450.363 80.2518 cv
450.159 79.9397 450.063 79.5798 450.063 79.1717 cv
450.063 78.7397 450.183 78.3438 450.435 77.9598 cv
450.675 77.5877 451.035 77.2997 451.515 77.1078 cv
451.983 76.9158 452.511 76.8078 453.087 76.8078 cv
453.723 76.8078 454.287 76.9158 454.767 77.1198 cv
455.247 77.3237 455.631 77.6238 455.895 78.0197 cv
456.159 78.4278 456.291 78.8718 456.315 79.3758 cv
455.223 79.4598 li
455.163 78.9197 454.971 78.5118 454.635 78.2238 cv
454.299 77.9477 453.795 77.8038 453.135 77.8038 cv
452.439 77.8038 451.947 77.9357 451.635 78.1877 cv
451.323 78.4397 451.167 78.7397 451.167 79.0997 cv
451.167 79.4117 451.275 79.6638 451.491 79.8557 cv
451.707 80.0597 452.283 80.2638 453.207 80.4797 cv
454.131 80.6958 454.767 80.8758 455.115 81.0197 cv
455.607 81.2598 455.979 81.5477 456.219 81.8957 cv
456.459 82.2557 456.579 82.6638 456.579 83.1197 cv
456.579 83.5757 456.447 84.0077 456.183 84.4158 cv
455.919 84.8237 455.535 85.1358 455.055 85.3517 cv
454.563 85.5678 454.011 85.6758 453.399 85.6758 cv
452.619 85.6758 451.971 85.5678 451.443 85.3517 cv
450.915 85.1358 450.507 84.7878 450.207 84.3318 cv
449.907 83.8758 449.751 83.3598 449.739 82.7837 cv
cp
f
461.679 85.5438 mo
460.623 85.5438 li
460.623 78.8237 li
460.359 79.0637 460.023 79.3158 459.615 79.5558 cv
459.207 79.7957 458.835 79.9757 458.511 80.0958 cv
458.511 79.0757 li
459.099 78.7997 459.615 78.4637 460.059 78.0678 cv
460.491 77.6837 460.803 77.2997 460.995 76.9158 cv
461.679 76.9158 li
461.679 85.5438 li
cp
f
464.379 83.2758 mo
465.435 83.1317 li
465.555 83.7318 465.759 84.1638 466.047 84.4278 cv
466.335 84.6918 466.695 84.8237 467.115 84.8237 cv
467.607 84.8237 468.027 84.6557 468.363 84.3078 cv
468.699 83.9718 468.879 83.5398 468.879 83.0357 cv
468.879 82.5558 468.711 82.1477 468.399 81.8357 cv
468.087 81.5238 467.679 81.3557 467.199 81.3557 cv
466.995 81.3557 466.743 81.4038 466.455 81.4757 cv
466.575 80.5518 li
466.743 80.5637 li
467.187 80.5637 467.595 80.4558 467.955 80.2157 cv
468.315 79.9757 468.495 79.6157 468.495 79.1238 cv
468.495 78.7397 468.363 78.4278 468.099 78.1758 cv
467.835 77.9237 467.499 77.7918 467.091 77.7918 cv
466.683 77.7918 466.335 77.9237 466.059 78.1758 cv
465.783 78.4397 465.615 78.8237 465.543 79.3277 cv
464.487 79.1478 li
464.607 78.4397 464.907 77.8878 465.363 77.5037 cv
465.819 77.1198 466.383 76.9158 467.067 76.9158 cv
467.535 76.9158 467.967 77.0237 468.363 77.2277 cv
468.747 77.4318 469.047 77.7078 469.263 78.0438 cv
469.479 78.3917 469.587 78.7638 469.587 79.1478 cv
469.587 79.5317 469.479 79.8677 469.287 80.1678 cv
469.083 80.4797 468.783 80.7198 468.399 80.8878 cv
468.903 81.0077 469.287 81.2598 469.575 81.6197 cv
469.863 81.9917 470.007 82.4598 470.007 83.0118 cv
470.007 83.7557 469.731 84.3917 469.179 84.9077 cv
468.627 85.4357 467.943 85.6877 467.115 85.6877 cv
466.347 85.6877 465.723 85.4718 465.231 85.0158 cv
464.727 84.5717 464.451 83.9958 464.379 83.2758 cv
cp
f
412.2 100.828 mo
389.2 100.828 li
389.2 93.4281 li
412.2 93.4281 li
412.2 100.828 li
.317647 .384314 .501961 .101961 cmyk
f
413.2 101.828 mo
388.2 101.828 li
388.2 101.328 li
388.7 101.328 li
388.2 101.328 li
388.2 92.4281 li
413.2 92.4281 li
413.2 101.828 li
389.2 100.828 mo
412.2 100.828 li
412.2 93.4281 li
389.2 93.4281 li
389.2 100.828 li
f
422.84 98.5681 mo
423.908 98.4721 li
423.956 98.9041 424.076 99.2641 424.268 99.5401 cv
424.448 99.8161 424.736 100.032 425.132 100.2 cv
425.516 100.368 425.96 100.452 426.452 100.452 cv
426.884 100.452 427.256 100.392 427.592 100.26 cv
427.928 100.14 428.168 99.9601 428.336 99.7321 cv
428.492 99.5161 428.576 99.2641 428.576 99.0001 cv
428.576 98.7361 428.492 98.4961 428.336 98.2921 cv
428.18 98.1001 427.928 97.9321 427.568 97.7881 cv
427.34 97.6921 426.836 97.5601 426.044 97.3681 cv
425.252 97.1761 424.7 96.9961 424.388 96.8281 cv
423.98 96.6121 423.668 96.3481 423.464 96.0361 cv
423.26 95.7241 423.164 95.3641 423.164 94.9561 cv
423.164 94.5241 423.284 94.1281 423.536 93.7441 cv
423.776 93.3721 424.136 93.0841 424.616 92.8921 cv
425.084 92.7001 425.612 92.5921 426.188 92.5921 cv
426.824 92.5921 427.388 92.7001 427.868 92.9041 cv
428.348 93.1081 428.732 93.4081 428.996 93.8041 cv
429.26 94.2121 429.392 94.6561 429.416 95.1601 cv
428.324 95.2441 li
428.264 94.7041 428.072 94.2961 427.736 94.0081 cv
427.4 93.7321 426.896 93.5881 426.236 93.5881 cv
425.54 93.5881 425.048 93.7201 424.736 93.9721 cv
424.424 94.2241 424.268 94.5241 424.268 94.8841 cv
424.268 95.1961 424.376 95.4481 424.592 95.6401 cv
424.808 95.8441 425.384 96.0481 426.308 96.2641 cv
427.232 96.4801 427.868 96.6601 428.216 96.8041 cv
428.708 97.0441 429.08 97.3321 429.32 97.6801 cv
429.56 98.0401 429.68 98.4481 429.68 98.9041 cv
429.68 99.3601 429.548 99.7921 429.284 100.2 cv
429.02 100.608 428.636 100.92 428.156 101.136 cv
427.664 101.352 427.112 101.46 426.5 101.46 cv
425.72 101.46 425.072 101.352 424.544 101.136 cv
424.016 100.92 423.608 100.572 423.308 100.116 cv
423.008 99.6601 422.852 99.1441 422.84 98.5681 cv
cp
1 /0 /CSD get_res sepcs
.85 sep
f
431.228 101.328 mo
431.228 92.7361 li
434.192 92.7361 li
434.852 92.7361 435.356 92.7841 435.716 92.8561 cv
436.208 92.9761 436.628 93.1921 436.976 93.4801 cv
437.432 93.8641 437.768 94.3561 437.996 94.9441 cv
438.212 95.5441 438.332 96.2161 438.332 96.9841 cv
438.332 97.6441 438.248 98.2201 438.104 98.7241 cv
437.948 99.2281 437.756 99.6481 437.516 99.9721 cv
437.276 100.308 437.012 100.56 436.724 100.752 cv
436.436 100.944 436.1 101.088 435.704 101.184 cv
435.296 101.28 434.84 101.328 434.324 101.328 cv
431.228 101.328 li
cp
432.368 100.32 mo
434.204 100.32 li
434.768 100.32 435.212 100.272 435.536 100.164 cv
435.848 100.056 436.112 99.9001 436.304 99.7081 cv
436.568 99.4441 436.784 99.0841 436.928 98.6281 cv
437.072 98.1721 437.156 97.6201 437.156 96.9721 cv
437.156 96.0721 437 95.3761 436.712 94.8961 cv
436.424 94.4161 436.064 94.0921 435.644 93.9241 cv
435.332 93.8161 434.84 93.7561 434.168 93.7561 cv
432.368 93.7561 li
432.368 100.32 li
cp
f
439.856 101.328 mo
439.856 92.7361 li
441.572 92.7361 li
443.6 98.8201 li
443.792 99.3961 443.924 99.8161 444.008 100.092 cv
444.104 99.7801 444.26 99.3241 444.464 98.7121 cv
446.528 92.7361 li
448.052 92.7361 li
448.052 101.328 li
446.96 101.328 li
446.96 94.1401 li
444.464 101.328 li
443.444 101.328 li
440.96 94.0201 li
440.96 101.328 li
439.856 101.328 li
cp
f
453.44 101.328 mo
452.384 101.328 li
452.384 94.6081 li
452.12 94.8481 451.784 95.1001 451.376 95.3401 cv
450.968 95.5801 450.596 95.7601 450.272 95.8801 cv
450.272 94.8601 li
450.86 94.5841 451.376 94.2481 451.82 93.8521 cv
452.252 93.4681 452.564 93.0841 452.756 92.7001 cv
453.44 92.7001 li
453.44 101.328 li
cp
f
461.672 100.32 mo
461.672 101.328 li
455.996 101.328 li
455.984 101.076 456.032 100.836 456.128 100.596 cv
456.272 100.212 456.5 99.8401 456.812 99.4561 cv
457.124 99.0841 457.592 98.6521 458.192 98.1481 cv
459.128 97.3921 459.752 96.7921 460.088 96.3361 cv
460.412 95.8921 460.58 95.4721 460.58 95.0641 cv
460.58 94.6561 460.424 94.2961 460.124 94.0081 cv
459.824 93.7201 459.44 93.5761 458.96 93.5761 cv
458.456 93.5761 458.048 93.7321 457.748 94.0321 cv
457.436 94.3441 457.28 94.7641 457.28 95.3041 cv
456.2 95.1841 li
456.272 94.3801 456.548 93.7681 457.028 93.3361 cv
457.508 92.9161 458.168 92.7001 458.984 92.7001 cv
459.8 92.7001 460.46 92.9401 460.94 93.3961 cv
461.42 93.8521 461.66 94.4161 461.66 95.0881 cv
461.66 95.4361 461.588 95.7721 461.444 96.1081 cv
461.3 96.4441 461.072 96.7921 460.748 97.1521 cv
460.424 97.5241 459.884 98.0281 459.128 98.6641 cv
458.492 99.1921 458.084 99.5521 457.904 99.7441 cv
457.724 99.9361 457.58 100.128 457.46 100.32 cv
461.672 100.32 li
cp
f
412.2 116.613 mo
389.2 116.613 li
389.2 109.213 li
412.2 109.213 li
412.2 116.613 li
.0980392 .431373 0 0 cmyk
f
413.2 117.613 mo
388.2 117.613 li
388.2 117.112 li
388.7 117.112 li
388.2 117.112 li
388.2 108.212 li
413.2 108.212 li
413.2 117.613 li
389.2 116.613 mo
412.2 116.613 li
412.2 109.213 li
389.2 109.213 li
389.2 116.613 li
f
427.244 113.74 mo
427.244 112.732 li
430.88 112.732 li
430.88 115.912 li
430.328 116.368 429.752 116.704 429.152 116.92 cv
428.552 117.136 427.952 117.244 427.328 117.244 cv
426.476 117.244 425.708 117.076 425.024 116.716 cv
424.328 116.356 423.812 115.84 423.464 115.156 cv
423.104 114.472 422.936 113.704 422.936 112.864 cv
422.936 112.024 423.104 111.244 423.464 110.524 cv
423.812 109.804 424.316 109.264 424.976 108.904 cv
425.624 108.556 426.38 108.376 427.244 108.376 cv
427.856 108.376 428.42 108.484 428.924 108.676 cv
429.428 108.88 429.812 109.156 430.1 109.516 cv
430.388 109.876 430.604 110.344 430.76 110.92 cv
429.728 111.208 li
429.596 110.776 429.44 110.428 429.248 110.176 cv
429.056 109.936 428.78 109.732 428.42 109.576 cv
428.06 109.432 427.676 109.348 427.244 109.348 cv
426.716 109.348 426.272 109.432 425.888 109.588 cv
425.504 109.756 425.204 109.96 424.976 110.212 cv
424.736 110.476 424.556 110.752 424.436 111.064 cv
424.22 111.592 424.112 112.168 424.112 112.792 cv
424.112 113.56 424.244 114.196 424.508 114.712 cv
424.772 115.228 425.156 115.612 425.66 115.864 cv
426.164 116.116 426.692 116.236 427.268 116.236 cv
427.748 116.236 428.228 116.14 428.696 115.948 cv
429.164 115.756 429.524 115.564 429.776 115.348 cv
429.776 113.74 li
427.244 113.74 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
432.512 117.112 mo
432.512 108.52 li
435.74 108.52 li
436.388 108.52 436.916 108.616 437.312 108.784 cv
437.708 108.964 438.02 109.228 438.248 109.588 cv
438.464 109.948 438.584 110.332 438.584 110.716 cv
438.584 111.088 438.476 111.436 438.284 111.76 cv
438.08 112.084 437.78 112.348 437.384 112.54 cv
437.9 112.696 438.296 112.96 438.584 113.32 cv
438.86 113.692 439.004 114.124 439.004 114.616 cv
439.004 115.024 438.908 115.408 438.74 115.744 cv
438.572 116.092 438.356 116.356 438.116 116.548 cv
437.864 116.74 437.552 116.872 437.18 116.968 cv
436.796 117.064 436.34 117.112 435.788 117.112 cv
432.512 117.112 li
cp
433.652 112.132 mo
435.512 112.132 li
436.016 112.132 436.376 112.108 436.592 112.036 cv
436.88 111.952 437.096 111.808 437.24 111.604 cv
437.384 111.412 437.468 111.16 437.468 110.86 cv
437.468 110.572 437.396 110.32 437.264 110.104 cv
437.12 109.888 436.928 109.744 436.676 109.66 cv
436.412 109.588 435.98 109.54 435.368 109.54 cv
433.652 109.54 li
433.652 112.132 li
cp
433.652 116.104 mo
435.788 116.104 li
436.148 116.104 436.412 116.092 436.568 116.056 cv
436.82 116.008 437.036 115.936 437.216 115.828 cv
437.384 115.72 437.528 115.564 437.648 115.348 cv
437.768 115.144 437.828 114.904 437.828 114.616 cv
437.828 114.304 437.744 114.028 437.576 113.788 cv
437.408 113.548 437.18 113.38 436.892 113.284 cv
436.604 113.188 436.184 113.14 435.632 113.14 cv
433.652 113.14 li
433.652 116.104 li
cp
f
440.528 117.112 mo
440.528 108.52 li
442.244 108.52 li
444.272 114.604 li
444.464 115.18 444.596 115.6 444.68 115.876 cv
444.776 115.564 444.932 115.108 445.136 114.496 cv
447.2 108.52 li
448.724 108.52 li
448.724 117.112 li
447.632 117.112 li
447.632 109.924 li
445.136 117.112 li
444.116 117.112 li
441.632 109.804 li
441.632 117.112 li
440.528 117.112 li
cp
f
450.584 117.112 mo
450.584 108.52 li
454.388 108.52 li
455.156 108.52 455.732 108.604 456.128 108.76 cv
456.524 108.916 456.848 109.192 457.088 109.576 cv
457.328 109.96 457.448 110.392 457.448 110.86 cv
457.448 111.484 457.244 112 456.848 112.408 cv
456.452 112.828 455.84 113.092 455.024 113.2 cv
455.324 113.344 455.552 113.488 455.708 113.632 cv
456.044 113.944 456.356 114.316 456.656 114.772 cv
458.144 117.112 li
456.716 117.112 li
455.588 115.324 li
455.252 114.82 454.976 114.424 454.76 114.148 cv
454.544 113.872 454.352 113.68 454.184 113.572 cv
454.016 113.464 453.836 113.392 453.668 113.344 cv
453.536 113.32 453.32 113.296 453.032 113.296 cv
451.712 113.296 li
451.712 117.112 li
450.584 117.112 li
cp
451.712 112.312 mo
454.16 112.312 li
454.676 112.312 455.084 112.264 455.372 112.156 cv
455.66 112.048 455.888 111.88 456.044 111.64 cv
456.188 111.4 456.272 111.148 456.272 110.86 cv
456.272 110.464 456.116 110.128 455.828 109.864 cv
455.528 109.6 455.06 109.468 454.436 109.468 cv
451.712 109.468 li
451.712 112.312 li
cp
f
458.864 109.648 mo
458.864 108.628 li
464.432 108.628 li
464.432 109.456 li
463.88 110.044 463.328 110.824 462.8 111.784 cv
462.26 112.744 461.84 113.74 461.552 114.748 cv
461.336 115.468 461.204 116.26 461.156 117.112 cv
460.064 117.112 li
460.076 116.44 460.208 115.624 460.46 114.664 cv
460.712 113.704 461.072 112.78 461.552 111.892 cv
462.032 111.004 462.536 110.26 463.076 109.648 cv
458.864 109.648 li
cp
f
412.2 132.397 mo
389.2 132.397 li
389.2 124.997 li
412.2 124.997 li
412.2 132.397 li
.172549 .180392 .521569 0 cmyk
f
413.2 133.397 mo
388.2 133.397 li
388.2 132.897 li
388.7 132.897 li
388.2 132.897 li
388.2 123.997 li
413.2 123.997 li
413.2 133.397 li
389.2 132.397 mo
412.2 132.397 li
412.2 124.997 li
389.2 124.997 li
389.2 132.397 li
f
427.244 129.525 mo
427.244 128.517 li
430.88 128.517 li
430.88 131.697 li
430.328 132.153 429.752 132.489 429.152 132.705 cv
428.552 132.921 427.952 133.029 427.328 133.029 cv
426.476 133.029 425.708 132.861 425.024 132.501 cv
424.328 132.141 423.812 131.625 423.464 130.941 cv
423.104 130.257 422.936 129.489 422.936 128.649 cv
422.936 127.809 423.104 127.029 423.464 126.309 cv
423.812 125.589 424.316 125.049 424.976 124.689 cv
425.624 124.341 426.38 124.161 427.244 124.161 cv
427.856 124.161 428.42 124.269 428.924 124.461 cv
429.428 124.665 429.812 124.941 430.1 125.301 cv
430.388 125.661 430.604 126.129 430.76 126.705 cv
429.728 126.993 li
429.596 126.561 429.44 126.213 429.248 125.961 cv
429.056 125.721 428.78 125.517 428.42 125.361 cv
428.06 125.217 427.676 125.133 427.244 125.133 cv
426.716 125.133 426.272 125.217 425.888 125.373 cv
425.504 125.541 425.204 125.745 424.976 125.997 cv
424.736 126.261 424.556 126.537 424.436 126.849 cv
424.22 127.377 424.112 127.953 424.112 128.577 cv
424.112 129.345 424.244 129.981 424.508 130.497 cv
424.772 131.013 425.156 131.397 425.66 131.649 cv
426.164 131.901 426.692 132.021 427.268 132.021 cv
427.748 132.021 428.228 131.925 428.696 131.733 cv
429.164 131.541 429.524 131.349 429.776 131.133 cv
429.776 129.525 li
427.244 129.525 li
cp
1 /0 /CSD get_res sepcs
.85 sep
f
432.512 132.897 mo
432.512 124.305 li
435.74 124.305 li
436.388 124.305 436.916 124.401 437.312 124.569 cv
437.708 124.749 438.02 125.013 438.248 125.373 cv
438.464 125.733 438.584 126.117 438.584 126.501 cv
438.584 126.873 438.476 127.221 438.284 127.545 cv
438.08 127.869 437.78 128.133 437.384 128.325 cv
437.9 128.481 438.296 128.745 438.584 129.105 cv
438.86 129.477 439.004 129.909 439.004 130.401 cv
439.004 130.809 438.908 131.193 438.74 131.529 cv
438.572 131.877 438.356 132.141 438.116 132.333 cv
437.864 132.525 437.552 132.657 437.18 132.753 cv
436.796 132.849 436.34 132.897 435.788 132.897 cv
432.512 132.897 li
cp
433.652 127.917 mo
435.512 127.917 li
436.016 127.917 436.376 127.893 436.592 127.821 cv
436.88 127.737 437.096 127.593 437.24 127.389 cv
437.384 127.197 437.468 126.945 437.468 126.645 cv
437.468 126.357 437.396 126.105 437.264 125.889 cv
437.12 125.673 436.928 125.529 436.676 125.445 cv
436.412 125.373 435.98 125.325 435.368 125.325 cv
433.652 125.325 li
433.652 127.917 li
cp
433.652 131.889 mo
435.788 131.889 li
436.148 131.889 436.412 131.877 436.568 131.841 cv
436.82 131.793 437.036 131.721 437.216 131.613 cv
437.384 131.505 437.528 131.349 437.648 131.133 cv
437.768 130.929 437.828 130.689 437.828 130.401 cv
437.828 130.089 437.744 129.813 437.576 129.573 cv
437.408 129.333 437.18 129.165 436.892 129.069 cv
436.604 128.973 436.184 128.925 435.632 128.925 cv
433.652 128.925 li
433.652 131.889 li
cp
f
440.528 132.897 mo
440.528 124.305 li
442.244 124.305 li
444.272 130.389 li
444.464 130.965 444.596 131.385 444.68 131.661 cv
444.776 131.349 444.932 130.893 445.136 130.281 cv
447.2 124.305 li
448.724 124.305 li
448.724 132.897 li
447.632 132.897 li
447.632 125.709 li
445.136 132.897 li
444.116 132.897 li
441.632 125.589 li
441.632 132.897 li
440.528 132.897 li
cp
f
450.584 132.897 mo
450.584 124.305 li
454.388 124.305 li
455.156 124.305 455.732 124.389 456.128 124.545 cv
456.524 124.701 456.848 124.977 457.088 125.361 cv
457.328 125.745 457.448 126.177 457.448 126.645 cv
457.448 127.269 457.244 127.785 456.848 128.193 cv
456.452 128.613 455.84 128.877 455.024 128.985 cv
455.324 129.129 455.552 129.273 455.708 129.417 cv
456.044 129.729 456.356 130.101 456.656 130.557 cv
458.144 132.897 li
456.716 132.897 li
455.588 131.109 li
455.252 130.605 454.976 130.209 454.76 129.933 cv
454.544 129.657 454.352 129.465 454.184 129.357 cv
454.016 129.249 453.836 129.177 453.668 129.129 cv
453.536 129.105 453.32 129.081 453.032 129.081 cv
451.712 129.081 li
451.712 132.897 li
450.584 132.897 li
cp
451.712 128.097 mo
454.16 128.097 li
454.676 128.097 455.084 128.049 455.372 127.941 cv
455.66 127.833 455.888 127.665 456.044 127.425 cv
456.188 127.185 456.272 126.933 456.272 126.645 cv
456.272 126.249 456.116 125.913 455.828 125.649 cv
455.528 125.385 455.06 125.253 454.436 125.253 cv
451.712 125.253 li
451.712 128.097 li
cp
f
462.176 132.897 mo
462.176 130.845 li
458.456 130.845 li
458.456 129.873 li
462.368 124.305 li
463.232 124.305 li
463.232 129.873 li
464.396 129.873 li
464.396 130.845 li
463.232 130.845 li
463.232 132.897 li
462.176 132.897 li
cp
462.176 129.873 mo
462.176 125.997 li
459.488 129.873 li
462.176 129.873 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
